/* eslint-disable */
/**
 * @typedef {object} BuiltinFunction
 * @property {string} [markdown]
 * @property {string} [plain]
 * @property {string} [deprecated]
 * @property {{ params: { name: string; rest?: boolean; }[]; returns?: string; }[]} signatures
 */
/**
 * @typedef {object} Constant
 * @property {string} [markdown]
 * @property {string} [plain]
 */
/**
 * @typedef {object} BuiltinCallback
 * @property {string} [markdown]
 * @property {string} [plain]
 * @property {string} [deprecated]
 * @property {{ name: string; rest?: boolean; }[]} params
 */
/**
 * @type {{
 *     callbacks: Record<string, BuiltinCallback>;
 *     constants: Record<string, Constant>;
 *     events: string[];
 *     functions: Record<string, BuiltinFunction>;
 * }} */
const data = JSON.parse("{\"callbacks\":{\"__command\":{\"params\":[],\"permalink\":\"https://scarpet.pages.dev/minecraft/app/__command/\"},\"__config\":{\"markdown\":\"If an app defines `__config` method, and that method returns a map, it will be\\nused to apply custom settings for this app. Currently, the following options are\\nsupported:\\n\\n- `'strict'` : if `true`, any use of an uninitialized variable will result in\\n  program failure. Defaults to `false` if not specified. With `'strict'`you have\\n  to assign an initial value to any variable before using it. It is very useful\\n  to use this setting for app debugging and for beginner programmers. Explicit\\n  initialization is not required for your code to work, but mistakes may result\\n  from improper assumptions about initial variable values of `null`.\\n- `'scope'`: default scope for global variables for the app, Default is\\n  `'player'`, which means that globals and defined functions will be unique for\\n  each player so that apps for each player will run in isolation. This is useful\\n  in tool-like applications, where behaviour of things is always from a player's\\n  perspective. With player scope the initial run of the app creates is initial\\n  state: defined functions, global variables, config and event handlers, which\\n  is then copied for each player that interacts with the app. With `'global'`\\n  scope - the state created by the initial load is the only variant of the app\\n  state and all players interactions run in the same context, sharing defined\\n  functions, globals, config and events. `'global'` scope is most applicable to\\n  world-focused apps, where either players are not relevant, or player data is\\n  stored explicitly keyed with players, player names, uuids, etc. Even for\\n  `'player'` scoped apps, you can access specific player app with with\\n  commandblocks using `/execute as <player> run script in <app> run ...`. To\\n  access global/server state for a player app, which you shouldn't do, you need\\n  to disown the command from any player, so either use a command block, or any\\n  arbitrary entity:\\n  `/execute as @e[type=bat,limit=1] run script in <app> globals` for instance,\\n  however running anything in the global scope for a `'player'` scoped app is\\n  not intended.\\n- `'event_priority'`: defaults to `0`. This specifies the order in which events\\n  will be run, from highest to lowest. This is need since cancelling an event\\n  will stop executing the event in subsequent apps with lower priority.\\n- `'stay_loaded'`: defaults to `true`. If true, and `/carpet scriptsAutoload` is\\n  turned on, the following apps will stay loaded after startup. Otherwise, after\\n  reading the app the first time, and fetching the config, server will drop them\\n  down. WARNING: all apps will run once at startup anyways, so be aware that\\n  their actions that are called statically, will be performed once anyways. Only\\n  apps present in the world's `scripts` folder will be autoloaded.\\n- `'legacy_command_type_support'` - if `true`, and the app defines the legacy\\n  command system via `__command()` function, all parameters of command functions\\n  will be interpreted and used using brigadier / vanilla style argument parser\\n  and their type will be inferred from their names, otherwise the legacy scarpet\\n  variable parser will be used to provide arguments to commands.\\n- `'allow_command_conflicts'` - if custom app commands tree is defined, the app\\n  engine will check and identify conflicts and ambiguities between different\\n  paths of execution. While ambiguous commands are allowed in brigadier, and\\n  they tend to execute correctly, the suggestion support works really poorly in\\n  these situations and scarpet will warn and prevent such apps from loading with\\n  an error message. If `allow_command_conflicts` is specified and `true`, then\\n  scarpet will load all provided commands regardless.\\n- `'requires'` - defines either a map of mod dependencies in Fabric's mod.json\\n  style, or a function to be executed. If it's a map, it will only allow the app\\n  to load if all of the mods specified in the map meet the version criteria. If\\n  it's a function, it will prevent the app from loading if the function does not\\n  execute to `false`, displaying whatever is returned to the user.\\n\\n  Available prefixes for the version comparison are `>=`, `<=`, `>`, `<`, `~`,\\n  `^` and `=` (default if none specified), based in the spec at\\n  [NPM docs about SemVer ranges](https://docs.npmjs.com/cli/v6/using-npm/semver#ranges)\\n\\n  ```scarpet\\n  __config() -> {\\n    'requires' -> {\\n      'carpet' -> '>=1.4.33', // Will require Carpet with a version >= 1.4.32\\n      'minecraft' -> '>=1.16', // Will require Minecraft with a version >= 1.16\\n      'chat-up' -> '*' // Will require any version of the chat-up mod\\n    }\\n  }\\n  ```\\n\\n  ```scarpet\\n  __config() -> {\\n    'requires' -> _() -> (\\n        d = convert_date(unix_time());\\n        if(d:6 == 5 && d:2 == 13,\\n          'Its Friday, 13th' // Will throw this if Friday 13th, will load else since `if` function returns `null` by default\\n        )\\n  }\\n  ```\\n\\n- `'command_permission'` - indicates a custom permission to run the command. It\\n  can either be a number indicating permission level (from 1 to 4) or a string\\n  value, one of: `'all'` (default), `'ops'` (default opped player with\\n  permission level of 2), `'server'` - command accessible only through the\\n  server console and commandblocks, but not in chat, `'players'` - opposite of\\n  the former, allowing only use in player chat. It can also be a function\\n  (lambda function or function value, not function name) that takes 1 parameter,\\n  which represents the calling player, or `'null'` if the command represents a\\n  server call. The function will prevent the command from running if it\\n  evaluates to `false`. Please note, that Minecraft evaluates eligible commands\\n  for players when they join, or on reload/restart, so if you use a predicate\\n  that is volatile and might change, the command might falsely do or do not\\n  indicate that it is available to the player, however player will always be\\n  able to type it in and either succeed, or fail, based on their current\\n  permissions. Custom permission applies to legacy commands with\\n  `'legacy_command_type_support'` as well as for the custom commands defined\\n  with `'commands'`, see below.\\n- `'resources'` - list of all downloadable resources when installing the app\\n  from an app store. List of resources needs to be in a list and contain of\\n  map-like resources descriptors, looking like\\n\\n```scarpet\\n  'resources' -> [\\n       {\\n           'source' -> 'https://raw.githubusercontent.com/gnembon/fabric-carpet/master/src/main/resources/assets/carpet/icon.png',\\n           'target' -> 'foo/photos.zip/foo/cm.png',\\n       },\\n       {\\n           'source' -> '/survival/README.md',\\n           'target' -> 'survival_readme.md',\\n           'shared' -> true,\\n       },\\n       {\\n           'source' -> 'circle.sc', // Relative path\\n           'target' -> 'apps/circle.sc', // This won't install the app, use 'libraries' for that\\n       },\\n   ]\\n```\\n\\n`source` indicates resource location: either an arbitrary url (starting with\\n`http://` or `https://`), absolute location of a file in the app store (starting\\nwith a slash `/`), or a relative location in the same folder as the app in\\nquestion (the relative location directly). `'target'` points to the path in app\\ndata, or shared app data folder. If not specified it will place the app into the\\nmain data folder with the name it has. if `'shared'` is specified and `true`.\\nWhen re-downloading the app, all resources will be re-downloaded as well.\\nCurrently, app resources are only downloaded when using `/script download`\\ncommand.\\n\\n- `libraries` - list of libraries or apps to be downloaded when installing the\\n  app from the app store. It needs to be a list of map-like resource\\n  descriptors, like the above `resources` field.\\n\\n```scarpet\\n'libraries' -> [\\n     {\\n         'source' -> '/tutorial/carpets.sc'\\n     },\\n     {\\n         'source' -> '/fundamentals/heap.sc',\\n         'target' -> 'heap-lib.sc'\\n     }\\n ]\\n```\\n\\n`source` indicates resource location and must point to a scarpet app or library.\\nIt can be either an arbitrary url (starting with `http://` or `https://`),\\nabsolute location of a file in the app store (starting with a slash `/`), or a\\nrelative location in the same folder as the app in question (the relative\\nlocation directly). `target` is an optional field indicating the new name of the\\napp. If not specified it will place the app into the main data folder with the\\nname it has.\\n\\nIf the app has relative resources dependencies, Carpet will use the app's path\\nfor relatives if the app was loaded from the same app store, or none if the app\\nwas loaded from an external url. If you need to `import()` from dependencies\\nindicated in this block, make sure to have the `__config()` map before any\\nimport that references your remote dependencies, in order to allow them to be\\ndownloaded and initialized before the import is executed.\\n\\n- `'arguments'` - defines custom argument types for legacy commands with\\n  `'legacy_command_type_support'` as well as for the custom commands defined\\n  with `'commands'`, see below.\\n- `'commands'` - defines custom commands for the app to be executed with\\n  `/<app>` command, see below.\",\"params\":[],\"permalink\":\"https://scarpet.pages.dev/minecraft/app/__config/\",\"plain\":\"If an app defines __config method, and that method returns a map, it will be used to apply custom settings for this app. Currently, the following options are supported:\\n'strict' : if true, any use of an uninitialized variable will result in program failure. Defaults to false if not specified. With 'strict'you have to assign an initial value to any variable before using it. It is very useful to use this setting for app debugging and for beginner programmers. Explicit initialization is not required for your code to work, but mistakes may result from improper assumptions about initial variable values of null.\\n'scope': default scope for global variables for the app, Default is 'player', which means that globals and defined functions will be unique for each player so that apps for each player will run in isolation. This is useful in tool-like applications, where behaviour of things is always from a player’s perspective. With player scope the initial run of the app creates is initial state: defined functions, global variables, config and event handlers, which is then copied for each player that interacts with the app. With 'global' scope - the state created by the initial load is the only variant of the app state and all players interactions run in the same context, sharing defined functions, globals, config and events. 'global' scope is most applicable to world-focused apps, where either players are not relevant, or player data is stored explicitly keyed with players, player names, uuids, etc. Even for 'player' scoped apps, you can access specific player app with with commandblocks using /execute as <player> run script in <app> run .... To access global/server state for a player app, which you shouldn’t do, you need to disown the command from any player, so either use a command block, or any arbitrary entity: /execute as @e[type=bat,limit=1] run script in <app> globals for instance, however running anything in the global scope for a 'player' scoped app is not intended.\\n'event_priority': defaults to 0. This specifies the order in which events will be run, from highest to lowest. This is need since cancelling an event will stop executing the event in subsequent apps with lower priority.\\n'stay_loaded': defaults to true. If true, and /carpet scriptsAutoload is turned on, the following apps will stay loaded after startup. Otherwise, after reading the app the first time, and fetching the config, server will drop them down. WARNING: all apps will run once at startup anyways, so be aware that their actions that are called statically, will be performed once anyways. Only apps present in the world’s scripts folder will be autoloaded.\\n'legacy_command_type_support' - if true, and the app defines the legacy command system via __command() function, all parameters of command functions will be interpreted and used using brigadier / vanilla style argument parser and their type will be inferred from their names, otherwise the legacy scarpet variable parser will be used to provide arguments to commands.\\n'allow_command_conflicts' - if custom app commands tree is defined, the app engine will check and identify conflicts and ambiguities between different paths of execution. While ambiguous commands are allowed in brigadier, and they tend to execute correctly, the suggestion support works really poorly in these situations and scarpet will warn and prevent such apps from loading with an error message. If allow_command_conflicts is specified and true, then scarpet will load all provided commands regardless.\\n'requires' - defines either a map of mod dependencies in Fabric’s mod.json style, or a function to be executed. If it’s a map, it will only allow the app to load if all of the mods specified in the map meet the version criteria. If it’s a function, it will prevent the app from loading if the function does not execute to false, displaying whatever is returned to the user.\\nAvailable prefixes for the version comparison are >=, <=, >, <, ~, ^ and = (default if none specified), based in the spec at NPM docs about SemVer ranges\\n__config() -> { 'requires' -> { 'carpet' -> '>=1.4.33', // Will require Carpet with a version >= 1.4.32 'minecraft' -> '>=1.16', // Will require Minecraft with a version >= 1.16 'chat-up' -> '*' // Will require any version of the chat-up mod } } __config() -> { 'requires' -> _() -> ( d = convert_date(unix_time()); if(d:6 == 5 && d:2 == 13, 'Its Friday, 13th' // Will throw this if Friday 13th, will load else since `if` function returns `null` by default ) } 'command_permission' - indicates a custom permission to run the command. It can either be a number indicating permission level (from 1 to 4) or a string value, one of: 'all' (default), 'ops' (default opped player with permission level of 2), 'server' - command accessible only through the server console and commandblocks, but not in chat, 'players' - opposite of the former, allowing only use in player chat. It can also be a function (lambda function or function value, not function name) that takes 1 parameter, which represents the calling player, or 'null' if the command represents a server call. The function will prevent the command from running if it evaluates to false. Please note, that Minecraft evaluates eligible commands for players when they join, or on reload/restart, so if you use a predicate that is volatile and might change, the command might falsely do or do not indicate that it is available to the player, however player will always be able to type it in and either succeed, or fail, based on their current permissions. Custom permission applies to legacy commands with 'legacy_command_type_support' as well as for the custom commands defined with 'commands', see below.\\n'resources' - list of all downloadable resources when installing the app from an app store. List of resources needs to be in a list and contain of map-like resources descriptors, looking like\\n'resources' -> [ { 'source' -> 'https://raw.githubusercontent.com/gnembon/fabric-carpet/master/src/main/resources/assets/carpet/icon.png', 'target' -> 'foo/photos.zip/foo/cm.png', }, { 'source' -> '/survival/README.md', 'target' -> 'survival_readme.md', 'shared' -> true, }, { 'source' -> 'circle.sc', // Relative path 'target' -> 'apps/circle.sc', // This won't install the app, use 'libraries' for that }, ] source indicates resource location: either an arbitrary url (starting with http:// or https://), absolute location of a file in the app store (starting with a slash /), or a relative location in the same folder as the app in question (the relative location directly). 'target' points to the path in app data, or shared app data folder. If not specified it will place the app into the main data folder with the name it has. if 'shared' is specified and true. When re-downloading the app, all resources will be re-downloaded as well. Currently, app resources are only downloaded when using /script download command.\\nlibraries - list of libraries or apps to be downloaded when installing the app from the app store. It needs to be a list of map-like resource descriptors, like the above resources field. 'libraries' -> [ { 'source' -> '/tutorial/carpets.sc' }, { 'source' -> '/fundamentals/heap.sc', 'target' -> 'heap-lib.sc' } ] source indicates resource location and must point to a scarpet app or library. It can be either an arbitrary url (starting with http:// or https://), absolute location of a file in the app store (starting with a slash /), or a relative location in the same folder as the app in question (the relative location directly). target is an optional field indicating the new name of the app. If not specified it will place the app into the main data folder with the name it has.\\nIf the app has relative resources dependencies, Carpet will use the app’s path for relatives if the app was loaded from the same app store, or none if the app was loaded from an external url. If you need to import() from dependencies indicated in this block, make sure to have the __config() map before any import that references your remote dependencies, in order to allow them to be downloaded and initialized before the import is executed.\\n'arguments' - defines custom argument types for legacy commands with 'legacy_command_type_support' as well as for the custom commands defined with 'commands', see below. 'commands' - defines custom commands for the app to be executed with /<app> command, see below. \"},\"__on_carpet_rule_changes\":{\"markdown\":\"Triggered when a carpet mod rule is changed. It includes extension rules, not\\nusing default `/carpet` command, which will then be namespaced as\\n`namespace:rule`.\",\"params\":[{\"name\":\"rule\"},{\"name\":\"new_value\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/global_events/carpet_rule_changes/\",\"plain\":\"Triggered when a carpet mod rule is changed. It includes extension rules, not using default /carpet command, which will then be namespaced as namespace:rule.\"},\"__on_chunk_generated\":{\"markdown\":\"Called right after a chunk at a given coordinate is full generated. `x` and `z`\\ncorrespond to the lowest x and z coords in the chunk. Handling of this event is\\nscheduled as an off-tick task happening after the chunk is confirmed to be\\ngenerated and loaded to the game, due to the off-thread chunk loading in the\\ngame. So handling of this event is not technically guaranteed if the game\\ncrashes while players are moving for example, and the game decides to shut down\\nafter chunk is fully loaded and before its handler is processed in between\\nticks. In normal operation this should not happen, but let you be warned.\",\"params\":[{\"name\":\"x\"},{\"name\":\"z\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/global_events/chunk_generated/\",\"plain\":\"Called right after a chunk at a given coordinate is full generated. x and z correspond to the lowest x and z coords in the chunk. Handling of this event is scheduled as an off-tick task happening after the chunk is confirmed to be generated and loaded to the game, due to the off-thread chunk loading in the game. So handling of this event is not technically guaranteed if the game crashes while players are moving for example, and the game decides to shut down after chunk is fully loaded and before its handler is processed in between ticks. In normal operation this should not happen, but let you be warned.\"},\"__on_chunk_loaded\":{\"markdown\":\"Called right after a chunk at a given coordinate is loaded. All newly generated\\nchunks are considered loaded as well. `x` and `z` correspond to the lowest x and\\nz coordinates in the chunk.\",\"params\":[{\"name\":\"x\"},{\"name\":\"z\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/global_events/chunk_loaded/\",\"plain\":\"Called right after a chunk at a given coordinate is loaded. All newly generated chunks are considered loaded as well. x and z correspond to the lowest x and z coordinates in the chunk.\"},\"__on_chunk_unloaded\":{\"markdown\":\"Called right before a chunk at the given coordinates is unloaded. `x` and `z`\\ncorrespond to the lowest x and z coordinates in the chunk.\",\"params\":[{\"name\":\"x\"},{\"name\":\"z\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/global_events/chunk_unloaded/\",\"plain\":\"Called right before a chunk at the given coordinates is unloaded. x and z correspond to the lowest x and z coordinates in the chunk.\"},\"__on_close\":{\"markdown\":\"Called once per app when the app is closing or reloading, right before the app\\nis removed. For player scoped apps, its called once per player. Scarpet app\\nengine will attempt to call `__on_close()` even if the system is closing down\\nexceptionally.\",\"params\":[],\"permalink\":\"https://scarpet.pages.dev/minecraft/app/__on_close/\",\"plain\":\"Called once per app when the app is closing or reloading, right before the app is removed. For player scoped apps, its called once per player. Scarpet app engine will attempt to call __on_close() even if the system is closing down exceptionally.\"},\"__on_explosion\":{\"markdown\":\"Event triggered right before explosion takes place and before has any effect on\\nthe world. `source` can be an entity causing the explosion, and `causer` the\\nentity triggering it, `mode` indicates block effects: `'none'`, `'break'` (drop\\nall blocks), or `'destroy'` - drop few blocks. Event is not captured when\\n`create_explosion()` is called.\",\"params\":[{\"name\":\"pos\"},{\"name\":\"power\"},{\"name\":\"source\"},{\"name\":\"causer\"},{\"name\":\"mode\"},{\"name\":\"fire\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/global_events/explosion/\",\"plain\":\"Event triggered right before explosion takes place and before has any effect on the world. source can be an entity causing the explosion, and causer the entity triggering it, mode indicates block effects: 'none', 'break' (drop all blocks), or 'destroy' - drop few blocks. Event is not captured when create_explosion() is called.\"},\"__on_explosion_outcome\":{\"markdown\":\"Triggered during the explosion, before any changes to the blocks are done, but\\nthe decision to blow up is already made and entities are already affected. The\\nparameter `blocks` contains the list of blocks that will blow up (empty if\\n`explosionNoBlockDamage` is set to `true`). The parameter `entities` contains\\nthe list of entities that have been affected by the explosion. Triggered even\\nwith `create_explosion()`.\",\"params\":[{\"name\":\"pos\"},{\"name\":\"power\"},{\"name\":\"source\"},{\"name\":\"causer\"},{\"name\":\"mode\"},{\"name\":\"fire\"},{\"name\":\"blocks\"},{\"name\":\"entities\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/global_events/explosion_outcome/\",\"plain\":\"Triggered during the explosion, before any changes to the blocks are done, but the decision to blow up is already made and entities are already affected. The parameter blocks contains the list of blocks that will blow up (empty if explosionNoBlockDamage is set to true). The parameter entities contains the list of entities that have been affected by the explosion. Triggered even with create_explosion().\"},\"__on_lightning\":{\"markdown\":\"Triggered right after a lightning strikes. Lightning entity as well as potential\\nhorseman trap would already be spawned at that point. `mode` is `true` if the\\nlightning did cause a trap to spawn.\",\"params\":[{\"name\":\"block\"},{\"name\":\"mode\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/global_events/lightning/\",\"plain\":\"Triggered right after a lightning strikes. Lightning entity as well as potential horseman trap would already be spawned at that point. mode is true if the lightning did cause a trap to spawn.\"},\"__on_player_attacks_entity\":{\"markdown\":\"Triggered when a player attacks entity, right before it happens server side.\\n\\nThis event can be cancelled by returning `'cancel'`, which prevents the player\\nfrom attacking the entity.\",\"params\":[{\"name\":\"player\"},{\"name\":\"entity\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_attacks_entity/\",\"plain\":\"Triggered when a player attacks entity, right before it happens server side.\\nThis event can be cancelled by returning 'cancel', which prevents the player from attacking the entity.\"},\"__on_player_breaks_block\":{\"markdown\":\"Called when player breaks a block, right before any changes to the world are\\ndone, but the decision is made to remove the block.\\n\\nThis event can be cancelled by returning `'cancel'`, which prevents the block\\nfrom being placed.\",\"params\":[{\"name\":\"player\"},{\"name\":\"block\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_breaks_block/\",\"plain\":\"Called when player breaks a block, right before any changes to the world are done, but the decision is made to remove the block.\\nThis event can be cancelled by returning 'cancel', which prevents the block from being placed.\"},\"__on_player_changes_dimension\":{\"markdown\":\"Called when a player moves from one dimension to another. Event is handled still\\nwhen the player is in its previous dimension and position.\\n\\n`player_changes_dimension` returns `null` as `to_pos` when player goes back to\\nthe overworld from the end , since the respawn location of the player is not\\ncontrolled by the teleport, or a player can still see the end credits. After the\\nplayer is eligible to respawn in the overworld, `player_respawns` will be\\ntriggered.\",\"params\":[{\"name\":\"player\"},{\"name\":\"from_pos\"},{\"name\":\"from_dimension\"},{\"name\":\"to_pos\"},{\"name\":\"to_dimension\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_changes_dimension/\",\"plain\":\"Called when a player moves from one dimension to another. Event is handled still when the player is in its previous dimension and position.\\nplayer_changes_dimension returns null as to_pos when player goes back to the overworld from the end , since the respawn location of the player is not controlled by the teleport, or a player can still see the end credits. After the player is eligible to respawn in the overworld, player_respawns will be triggered.\"},\"__on_player_chooses_recipe\":{\"markdown\":\"Triggered when a player clicks a recipe in the crafting window from the crafting\\nbook, after server received a client request, but before any items are moved\\nfrom its inventory to the crafting menu.\\n\\nThis event can be cancelled by returning `'cancel'`, which prevents the recipe\\nfrom being moved into the crafting grid.\",\"params\":[{\"name\":\"player\"},{\"name\":\"recipe\"},{\"name\":\"full_stack\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_chooses_recipe/\",\"plain\":\"Triggered when a player clicks a recipe in the crafting window from the crafting book, after server received a client request, but before any items are moved from its inventory to the crafting menu.\\nThis event can be cancelled by returning 'cancel', which prevents the recipe from being moved into the crafting grid.\"},\"__on_player_clicks_block\":{\"markdown\":\"Representing left-click attack on a block, usually signifying start of breaking\\nof a block. Triggers right after the server receives a client packet, before\\nanything happens on the server side.\\n\\nThis event can be cancelled by returning `'cancel'`, which stops the player from\\nbreaking a block.\",\"params\":[{\"name\":\"player\"},{\"name\":\"block\"},{\"name\":\"face\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_clicks_block/\",\"plain\":\"Representing left-click attack on a block, usually signifying start of breaking of a block. Triggers right after the server receives a client packet, before anything happens on the server side.\\nThis event can be cancelled by returning 'cancel', which stops the player from breaking a block.\"},\"__on_player_collides_with_entity\":{\"markdown\":\"Triggered every time a player - entity collisions are calculated, before effects\\nof collisions are applied in the game. Useful not only when colliding with\\nliving entities, but also to intercept items or XP orbs before they have an\\neffect on the player.\",\"params\":[{\"name\":\"player\"},{\"name\":\"entity\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_collides_with_entity/\",\"plain\":\"Triggered every time a player - entity collisions are calculated, before effects of collisions are applied in the game. Useful not only when colliding with living entities, but also to intercept items or XP orbs before they have an effect on the player.\"},\"__on_player_command\":{\"markdown\":\"Triggered when a player runs a command. Command value is returned without the /\\nin front.\\n\\nThis event can be cancelled by returning `'cancel'`, which prevents the message\\nfrom being sent.\",\"params\":[{\"name\":\"player\"},{\"name\":\"command\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_command/\",\"plain\":\"Triggered when a player runs a command. Command value is returned without the / in front.\\nThis event can be cancelled by returning 'cancel', which prevents the message from being sent.\"},\"__on_player_connects\":{\"markdown\":\"Triggered when the player has successfully logged in and was placed in the game.\",\"params\":[{\"name\":\"player\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_connects/\",\"plain\":\"Triggered when the player has successfully logged in and was placed in the game.\"},\"__on_player_deals_damage\":{\"markdown\":\"Triggered when a player deals damage to another entity. Its applied in the same\\nmoment as `player_takes_damage` if both sides of the event are players, and\\nsimilar for all other entities, just their absorption is taken twice, just noone\\never notices that ¯\\\\\\\\\\\\_(ツ)\\\\_/¯\\n\\nThis event can be cancelled by returning `'cancel'`, which prevents the damage\\nfrom being dealt.\",\"params\":[{\"name\":\"player\"},{\"name\":\"amount\"},{\"name\":\"entity\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_deals_damage/\",\"plain\":\"Triggered when a player deals damage to another entity. Its applied in the same moment as player_takes_damage if both sides of the event are players, and similar for all other entities, just their absorption is taken twice, just noone ever notices that ¯\\\\_(ツ)_/¯\\nThis event can be cancelled by returning 'cancel', which prevents the damage from being dealt.\"},\"__on_player_deploys_elytra\":{\"markdown\":\"Triggered when a server receives a request to deploy elytra, regardless if the\\nflight was agreed upon server side..\",\"params\":[{\"name\":\"player\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_deploys_elytra/\",\"plain\":\"Triggered when a server receives a request to deploy elytra, regardless if the flight was agreed upon server side..\"},\"__on_player_dies\":{\"markdown\":\"Triggered when a player dies. Player is already dead, so don't revive them then.\\nEvent applied before broadcasting messages about players death and applying\\nexternal effects (like mob anger etc).\",\"params\":[{\"name\":\"player\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_dies/\",\"plain\":\"Triggered when a player dies. Player is already dead, so don’t revive them then. Event applied before broadcasting messages about players death and applying external effects (like mob anger etc).\"},\"__on_player_disconnects\":{\"markdown\":\"Triggered when a player sends a disconnect package or is forcefully disconnected\\nfrom the server.\",\"params\":[{\"name\":\"player\"},{\"name\":\"reason\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_disconnects/\",\"plain\":\"Triggered when a player sends a disconnect package or is forcefully disconnected from the server.\"},\"__on_player_drops_item\":{\"params\":[{\"name\":\"player\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_drops_item/\"},\"__on_player_drops_stack\":{\"markdown\":\"Triggered when the game receives the request from a player to drop one item or\\nfull stack from its inventory. Event happens before anything is changed server\\nside.\\n\\nThese events can be cancelled by returning `'cancel'`, which prevents the player\\ndropping the items.\",\"params\":[{\"name\":\"player\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_drops_stack/\",\"plain\":\"Triggered when the game receives the request from a player to drop one item or full stack from its inventory. Event happens before anything is changed server side.\\nThese events can be cancelled by returning 'cancel', which prevents the player dropping the items.\"},\"__on_player_escapes_sleep\":{\"markdown\":\"Same as `player_wakes_up` but only triggered when pressing the ESC button. Not\\nsure why Mojang decided to send that event twice when pressing escape, but might\\nbe interesting to be able to detect that.\",\"params\":[{\"name\":\"player\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_escapes_sleep/\",\"plain\":\"Same as player_wakes_up but only triggered when pressing the ESC button. Not sure why Mojang decided to send that event twice when pressing escape, but might be interesting to be able to detect that.\"},\"__on_player_finishes_using_item\":{\"markdown\":\"Player using of an item is done. This is controlled server side and is\\nresponsible for such events as finishing eating. The event is triggered after\\nconfirming that the action is valid, and sending the feedback back to the\\nclient, but before triggering it and its effects in game.\\n\\nThis event can be cancelled by returning `'cancel'`, which prevents the player\\nfrom finishing using the item.\",\"params\":[{\"name\":\"player\"},{\"name\":\"item_tuple\"},{\"name\":\"hand\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_finishes_using_item/\",\"plain\":\"Player using of an item is done. This is controlled server side and is responsible for such events as finishing eating. The event is triggered after confirming that the action is valid, and sending the feedback back to the client, but before triggering it and its effects in game.\\nThis event can be cancelled by returning 'cancel', which prevents the player from finishing using the item.\"},\"__on_player_interacts_with_block\":{\"markdown\":\"Called when player successfully interacted with a block, which resulted in\\nactivation of said block, right after this happened.\",\"params\":[{\"name\":\"player\"},{\"name\":\"hand\"},{\"name\":\"block\"},{\"name\":\"face\"},{\"name\":\"hitvec\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_interacts_with_block/\",\"plain\":\"Called when player successfully interacted with a block, which resulted in activation of said block, right after this happened.\"},\"__on_player_interacts_with_entity\":{\"markdown\":\"Triggered when player right clicks (interacts) with an entity, even if the\\nentity has no vanilla interaction with the player or the item they are holding.\\nThe event is invoked after receiving a packet from the client, before anything\\nhappens server side with that interaction.\\n\\nThis event can be cancelled by returning `'cancel'`, which prevents the player\\ninteracting with the entity.\",\"params\":[{\"name\":\"player\"},{\"name\":\"entity\"},{\"name\":\"hand\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_interacts_with_entity/\",\"plain\":\"Triggered when player right clicks (interacts) with an entity, even if the entity has no vanilla interaction with the player or the item they are holding. The event is invoked after receiving a packet from the client, before anything happens server side with that interaction.\\nThis event can be cancelled by returning 'cancel', which prevents the player interacting with the entity.\"},\"__on_player_jumps\":{\"markdown\":\"Triggered when a game receives a jump input from the client, and the player is\\nconsidered standing on the ground.\",\"params\":[{\"name\":\"player\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_jumps/\",\"plain\":\"Triggered when a game receives a jump input from the client, and the player is considered standing on the ground.\"},\"__on_player_message\":{\"markdown\":\"Triggered when a player sends a chat message.\",\"params\":[{\"name\":\"player\"},{\"name\":\"message\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_message/\",\"plain\":\"Triggered when a player sends a chat message.\"},\"__on_player_picks_up_item\":{\"markdown\":\"Triggered AFTER a player successfully ingested an item in its inventory. Item\\nrepresents the total stack of items ingested by the player. The exact position\\nof these items is unknown as technically these items could be spread all across\\nthe inventory.\",\"params\":[{\"name\":\"player\"},{\"name\":\"item\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_picks_up_item/\",\"plain\":\"Triggered AFTER a player successfully ingested an item in its inventory. Item represents the total stack of items ingested by the player. The exact position of these items is unknown as technically these items could be spread all across the inventory.\"},\"__on_player_places_block\":{\"markdown\":\"Triggered when player places a block, after block is placed in the world, but\\nbefore scoreboard is triggered or player inventory adjusted.\",\"params\":[{\"name\":\"player\"},{\"name\":\"item_tuple\"},{\"name\":\"hand\"},{\"name\":\"block\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_places_block/\",\"plain\":\"Triggered when player places a block, after block is placed in the world, but before scoreboard is triggered or player inventory adjusted.\"},\"__on_player_placing_block\":{\"markdown\":\"Triggered when player places a block, before block is placed in the world.\\n\\nThis event can be cancelled by returning `'cancel'`, which prevents the block\\nfrom being placed.\",\"params\":[{\"name\":\"player\"},{\"name\":\"item_tuple\"},{\"name\":\"hand\"},{\"name\":\"block\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_placing_block/\",\"plain\":\"Triggered when player places a block, before block is placed in the world.\\nThis event can be cancelled by returning 'cancel', which prevents the block from being placed.\"},\"__on_player_releases_item\":{\"markdown\":\"Player stops right-click-holding on an item that can be held. This event is a\\nresult of a client request. Example events that may cause it to happen is\\nreleasing a bow. The event is triggered after the game processes the request,\\nhowever the `item_tuple` is provided representing the item that the player\\nstarted with. You can use that and compare with the currently held item for a\\ndelta.\",\"params\":[{\"name\":\"player\"},{\"name\":\"item_tuple\"},{\"name\":\"hand\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_releases_item/\",\"plain\":\"Player stops right-click-holding on an item that can be held. This event is a result of a client request. Example events that may cause it to happen is releasing a bow. The event is triggered after the game processes the request, however the item_tuple is provided representing the item that the player started with. You can use that and compare with the currently held item for a delta.\"},\"__on_player_respawns\":{\"markdown\":\"Triggered when a player respawns. This includes spawning after death, or landing\\nin the overworld after leaving the end. When the event is handled, a player is\\nstill in its previous location and dimension - will be repositioned right after.\\nIn case player died, its previous inventory as already been scattered, and its\\ncurrent inventory will not be copied to the respawned entity, so any\\nmanipulation to player data is best to be scheduled at the end of the tick, but\\nyou can still use its current reference to query its status as of the respawn\\nevent.\",\"params\":[{\"name\":\"player\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_respawns/\",\"plain\":\"Triggered when a player respawns. This includes spawning after death, or landing in the overworld after leaving the end. When the event is handled, a player is still in its previous location and dimension - will be repositioned right after. In case player died, its previous inventory as already been scattered, and its current inventory will not be copied to the respawned entity, so any manipulation to player data is best to be scheduled at the end of the tick, but you can still use its current reference to query its status as of the respawn event.\"},\"__on_player_rides\":{\"markdown\":\"Triggers when a server receives movement controls when riding vehicles. Its\\nhandled before the effects are applied server side.\",\"params\":[{\"name\":\"player\"},{\"name\":\"forward\"},{\"name\":\"strafe\"},{\"name\":\"jumping\"},{\"name\":\"sneaking\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_rides/\",\"plain\":\"Triggers when a server receives movement controls when riding vehicles. Its handled before the effects are applied server side.\"},\"__on_player_right_clicks_block\":{\"markdown\":\"Called when player right clicks on a block with anything, or interacts with a\\nblock. This event is triggered right before other interaction events, like\\n`'player_interacts_with_block'` or `'player_places_block'`.\\n\\nThis event can be cancelled by returning `'cancel'`, which prevents the player\\ninteraction.\",\"params\":[{\"name\":\"player\"},{\"name\":\"item_tuple\"},{\"name\":\"hand\"},{\"name\":\"block\"},{\"name\":\"face\"},{\"name\":\"hitvec\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_right_clicks_block/\",\"plain\":\"Called when player right clicks on a block with anything, or interacts with a block. This event is triggered right before other interaction events, like 'player_interacts_with_block' or 'player_places_block'.\\nThis event can be cancelled by returning 'cancel', which prevents the player interaction.\"},\"__on_player_starts_sneaking\":{\"params\":[{\"name\":\"player\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_starts_sneaking/\"},\"__on_player_starts_sprinting\":{\"params\":[{\"name\":\"player\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_starts_sprinting/\"},\"__on_player_stops_sneaking\":{\"params\":[{\"name\":\"player\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_stops_sneaking/\"},\"__on_player_stops_sprinting\":{\"markdown\":\"Four events triggered when player controls for sneaking and sprinting toggle.\",\"params\":[{\"name\":\"player\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_stops_sprinting/\",\"plain\":\"Four events triggered when player controls for sneaking and sprinting toggle.\"},\"__on_player_swaps_hands\":{\"markdown\":\"Triggered when a player sends a command to swap their offhand item. Executed\\nbefore the effect is applied on the server.\\n\\nThis event can be cancelled by returning `'cancel'`, which prevents the hands\\nfrom being swapped.\",\"params\":[{\"name\":\"player\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_swaps_hands/\",\"plain\":\"Triggered when a player sends a command to swap their offhand item. Executed before the effect is applied on the server.\\nThis event can be cancelled by returning 'cancel', which prevents the hands from being swapped.\"},\"__on_player_swings_hand\":{\"markdown\":\"Triggered when a player starts swinging their hand. The event typically triggers\\nafter a corresponding event that caused it (`player_uses_item`,\\n`player_breaks_block`, etc.), but it triggers also after some failed events,\\nlike attacking the air. When swinging continues as an effect of an action, no\\nnew swinging events will be issued until the swinging is stopped.\",\"params\":[{\"name\":\"player\"},{\"name\":\"hand\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_swings_hand/\",\"plain\":\"Triggered when a player starts swinging their hand. The event typically triggers after a corresponding event that caused it (player_uses_item, player_breaks_block, etc.), but it triggers also after some failed events, like attacking the air. When swinging continues as an effect of an action, no new swinging events will be issued until the swinging is stopped.\"},\"__on_player_switches_slot\":{\"markdown\":\"Triggered when a player changes their selected hotbar slot. Applied right after\\nthe server receives the message to switch the slot.\",\"params\":[{\"name\":\"player\"},{\"name\":\"from\"},{\"name\":\"to\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_switches_slot/\",\"plain\":\"Triggered when a player changes their selected hotbar slot. Applied right after the server receives the message to switch the slot.\"},\"__on_player_takes_damage\":{\"markdown\":\"Triggered when a player is taking damage. Event is executed right after\\npotential absorption was applied and before the actual damage is applied to the\\nplayer.\\n\\nThis event can be cancelled by returning `'cancel'`, which prevents the player\\nfrom taking damage.\",\"params\":[{\"name\":\"player\"},{\"name\":\"amount\"},{\"name\":\"source\"},{\"name\":\"source_entity\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_takes_damage/\",\"plain\":\"Triggered when a player is taking damage. Event is executed right after potential absorption was applied and before the actual damage is applied to the player.\\nThis event can be cancelled by returning 'cancel', which prevents the player from taking damage.\"},\"__on_player_trades\":{\"markdown\":\"Triggered when player trades with a merchant. The event is invoked after the\\nserver allow the trade, but before the inventory changes and merchant updates\\nits trade-uses counter. The parameter `entity` can be `null` if the merchant is\\nnot an entity.\",\"params\":[{\"name\":\"player\"},{\"name\":\"entity\"},{\"name\":\"buy_left\"},{\"name\":\"buy_right\"},{\"name\":\"sell\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_trades/\",\"plain\":\"Triggered when player trades with a merchant. The event is invoked after the server allow the trade, but before the inventory changes and merchant updates its trade-uses counter. The parameter entity can be null if the merchant is not an entity.\"},\"__on_player_uses_item\":{\"markdown\":\"Triggers with a right click action. Event is triggered right after a server\\nreceives the packet, before the game manages to do anything about it. Event\\ntriggers when player starts eating food, or starts drawing a bow. Use\\n`player_finishes_using_item`, or `player_releases_item` to capture the end of\\nthese events.\\n\\nThis event can be cancelled by returning `'cancel'`, which prevents the item\\nfrom being used.\\n\\nEvent is not triggered when a player places a block, for that use\\n`player_right_clicks_block` or `player_places_block` event.\",\"params\":[{\"name\":\"player\"},{\"name\":\"item_tuple\"},{\"name\":\"hand\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_uses_item/\",\"plain\":\"Triggers with a right click action. Event is triggered right after a server receives the packet, before the game manages to do anything about it. Event triggers when player starts eating food, or starts drawing a bow. Use player_finishes_using_item, or player_releases_item to capture the end of these events.\\nThis event can be cancelled by returning 'cancel', which prevents the item from being used.\\nEvent is not triggered when a player places a block, for that use player_right_clicks_block or player_places_block event.\"},\"__on_player_wakes_up\":{\"markdown\":\"Player wakes up from the bed mid sleep, but not when it is kicked out of bed\\nbecause it finished sleeping.\",\"params\":[{\"name\":\"player\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/player_wakes_up/\",\"plain\":\"Player wakes up from the bed mid sleep, but not when it is kicked out of bed because it finished sleeping.\"},\"__on_server_shuts_down\":{\"markdown\":\"Event triggers when the server started the shutdown process, before\\n`__on_close()` is executed. Unlike `__on_close()`, it doesn't trigger with\\n`/reload`.\",\"params\":[],\"permalink\":\"https://scarpet.pages.dev/minecraft/global_events/server_shuts_down/\",\"plain\":\"Event triggers when the server started the shutdown process, before __on_close() is executed. Unlike __on_close(), it doesn’t trigger with /reload.\"},\"__on_server_starts\":{\"markdown\":\"Event triggers after world is loaded and after all startup apps have started. It\\nwon't be triggered with `/reload`.\",\"params\":[],\"permalink\":\"https://scarpet.pages.dev/minecraft/global_events/server_starts/\",\"plain\":\"Event triggers after world is loaded and after all startup apps have started. It won’t be triggered with /reload.\"},\"__on_start\":{\"markdown\":\"Called once per app in its logical execution run. For `global` scope apps its\\nexecuted right after the app is loaded. For `player` scope apps, it is triggered\\nonce per player before the app can be used by that player. Since each player app\\nacts independently from other player apps, this is probably the best location to\\ninclude some player specific initializations. Static code (i.e. code typed\\ndirectly in the app code that executes immediately, outside of function\\ndefinitions), will only execute once per app, regardless of scope,\\n`__on_start()` allows to reliably call player specific initializations. However,\\nmost event handlers defined in the static body of the app will be copied over to\\neach player scoped instance when they join.\",\"params\":[],\"permalink\":\"https://scarpet.pages.dev/minecraft/app/__on_start/\",\"plain\":\"Called once per app in its logical execution run. For global scope apps its executed right after the app is loaded. For player scope apps, it is triggered once per player before the app can be used by that player. Since each player app acts independently from other player apps, this is probably the best location to include some player specific initializations. Static code (i.e. code typed directly in the app code that executes immediately, outside of function definitions), will only execute once per app, regardless of scope, __on_start() allows to reliably call player specific initializations. However, most event handlers defined in the static body of the app will be copied over to each player scoped instance when they join.\"},\"__on_statistic\":{\"markdown\":\"Triggered when a player statistic changes. Doesn't notify on periodic an\\nrhythmic events, i.e. `time_since_death`, `time_since_rest`, and\\n`played_one_minute` since these are triggered every tick. Event is handled\\nbefore scoreboard values for these statistics are changed.\",\"params\":[{\"name\":\"player\"},{\"name\":\"category\"},{\"name\":\"event\"},{\"name\":\"value\"}],\"permalink\":\"https://scarpet.pages.dev/minecraft/player_events/statistic/\",\"plain\":\"Triggered when a player statistic changes. Doesn’t notify on periodic an rhythmic events, i.e. time_since_death, time_since_rest, and played_one_minute since these are triggered every tick. Event is handled before scoreboard values for these statistics are changed.\"},\"__on_tick\":{\"markdown\":\"Event triggers at the beginning of each tick, located in the overworld. You can\\nuse `in_dimension()` to access other dimensions from there.\",\"params\":[],\"permalink\":\"https://scarpet.pages.dev/minecraft/global_events/tick/\",\"plain\":\"Event triggers at the beginning of each tick, located in the overworld. You can use in_dimension() to access other dimensions from there.\"},\"__on_tick_ender\":{\"deprecated\":\"Deprecated --- use [`__on_tick()`](/minecraft/global_events/tick/) and [`in_dimension()`](/minecraft/auxillary/in_dimension/)\",\"markdown\":\"Duplicate of `tick`, just automatically located in the end. Use\\n`__on_tick() -> in_dimension('end', ... ` instead.\",\"params\":[],\"permalink\":\"https://scarpet.pages.dev/minecraft/global_events/tick_ender/\",\"plain\":\"Duplicate of tick, just automatically located in the end. Use __on_tick() -> in_dimension('end', ... instead.\"},\"__on_tick_nether\":{\"deprecated\":\"Deprecated --- use [`__on_tick()`](/minecraft/global_events/tick/) and [`in_dimension()`](/minecraft/auxillary/in_dimension/)\",\"markdown\":\"Duplicate of `tick`, just automatically located in the nether. Use\\n`__on_tick() -> in_dimension('nether', ... ` instead.\",\"params\":[],\"permalink\":\"https://scarpet.pages.dev/minecraft/global_events/tick_nether/\",\"plain\":\"Duplicate of tick, just automatically located in the nether. Use __on_tick() -> in_dimension('nether', ... instead.\"}},\"constants\":{\"euler\":{\"markdown\":\"The closest number to `e` (Euler's number), the base of the natural logarithms.\",\"permalink\":\"https://scarpet.pages.dev/syntax/constants/euler/\",\"plain\":\"The closest number to e (Euler’s number), the base of the natural logarithms.\"},\"false\":{\"markdown\":\"A value of type `bool` representing logical **false**.\",\"permalink\":\"https://scarpet.pages.dev/syntax/constants/false/\",\"plain\":\"A value of type bool representing logical false.\"},\"null\":{\"markdown\":\"No value.\\n\\n`null` represents the absence of a value.\\n\\n```scarpet\\nfoo = null;\\n```\\n\\nAny variable which is not yet defined will default to `null` (if strict mode is\\nnot set).\\n\\n```scarpet\\nprint(bar); // bar == null\\n```\\n\\nSimilarly, trying to get a non-existent key from a collection will return\\n`null`.\",\"permalink\":\"https://scarpet.pages.dev/syntax/constants/null/\",\"plain\":\"No value.\\nnull represents the absence of a value.\\nfoo = null; Any variable which is not yet defined will default to null (if strict mode is not set).\\nprint(bar); // bar == null Similarly, trying to get a non-existent key from a collection will return null.\"},\"pi\":{\"markdown\":\"The closest number to `pi`, the ratio of the circumference of a circle to its\\ndiameter.\",\"permalink\":\"https://scarpet.pages.dev/syntax/constants/pi/\",\"plain\":\"The closest number to pi, the ratio of the circumference of a circle to its diameter.\"},\"true\":{\"markdown\":\"A value of type `bool` representing logical **true**.\",\"permalink\":\"https://scarpet.pages.dev/syntax/constants/true/\",\"plain\":\"A value of type bool representing logical true.\"}},\"events\":[\"carpet_rule_changes\",\"chunk_generated\",\"chunk_loaded\",\"chunk_unloaded\",\"explosion\",\"explosion_outcome\",\"lightning\",\"player_attacks_entity\",\"player_breaks_block\",\"player_changes_dimension\",\"player_chooses_recipe\",\"player_clicks_block\",\"player_collides_with_entity\",\"player_command\",\"player_connects\",\"player_deals_damage\",\"player_deploys_elytra\",\"player_dies\",\"player_disconnects\",\"player_drops_item\",\"player_drops_stack\",\"player_escapes_sleep\",\"player_finishes_using_item\",\"player_interacts_with_block\",\"player_interacts_with_entity\",\"player_jumps\",\"player_message\",\"player_picks_up_item\",\"player_places_block\",\"player_placing_block\",\"player_releases_item\",\"player_respawns\",\"player_rides\",\"player_right_clicks_block\",\"player_starts_sneaking\",\"player_starts_sprinting\",\"player_stops_sneaking\",\"player_stops_sprinting\",\"player_swaps_hands\",\"player_swings_hand\",\"player_switches_slot\",\"player_takes_damage\",\"player_trades\",\"player_uses_item\",\"player_wakes_up\",\"server_shuts_down\",\"server_starts\",\"statistic\",\"tick\",\"tick_ender\",\"tick_nether\"],\"functions\":{\"abs\":{\"markdown\":\"Returns the absolute value of a number.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/abs/\",\"plain\":\"Returns the absolute value of a number.\",\"signatures\":[{\"params\":[{\"name\":\"n\"}]}]},\"acos\":{\"markdown\":\"Returns the inverse cosine of a number in **degrees**.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/acos/\",\"plain\":\"Returns the inverse cosine of a number in degrees.\",\"signatures\":[{\"params\":[{\"name\":\"x\"}]}]},\"acosh\":{\"markdown\":\"Returns the inverse hyperbolic cosine of a number.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/acosh/\",\"plain\":\"Returns the inverse hyperbolic cosine of a number.\",\"signatures\":[{\"params\":[{\"name\":\"x\"}]}]},\"acot\":{\"markdown\":\"Returns the inverse cotangent of a number in **degrees**.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/acot/\",\"plain\":\"Returns the inverse cotangent of a number in degrees.\",\"signatures\":[{\"params\":[{\"name\":\"x\"}]}]},\"air\":{\"markdown\":\"Boolean function, true if a block is air... or cave air... or void air... or any\\nother air they come up with.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/air/\",\"plain\":\"Boolean function, true if a block is air… or cave air… or void air… or any other air they come up with.\",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"all\":{\"markdown\":\"Returns `true` if all elements on the list satisfy the condition. Its roughly\\nequivalent to `all(list,expr) <=> for(list,expr)==length(list)`. `expr` also\\nreceives bound `_` and `_i` variables. `break` and `continue` have no sense and\\ncannot be used inside of `expr` body.\\n\\n```scarpet\\nall([1,2,3], check_prime(_))  => true\\nall(neighbours(x,y,z), _=='stone')  => true // if all neighbours of [x, y, z] are stone\\nmap(filter(rect(0,4,0,1000,0,1000), [x,y,z]=pos(_); all(rect(x,y,z,1,0,1),_=='bedrock') ), pos(_) )\\n  => [[-298, 4, -703], [-287, 4, -156], [-269, 4, 104], [242, 4, 250], [-159, 4, 335], [-208, 4, 416], [-510, 4, 546], [376, 4, 806]]\\n    // find all 3x3 bedrock structures in the top bedrock layer\\nmap( filter( rect(0,4,0,1000,1,1000,1000,0,1000), [x,y,z]=pos(_);\\n        all(rect(x,y,z,1,0,1),_=='bedrock') && for(rect(x,y-1,z,1,1,1,1,0,1),_=='bedrock')<8),\\n   pos(_) )  => [[343, 3, -642], [153, 3, -285], [674, 3, 167], [-710, 3, 398]]\\n    // ditto, but requiring at most 7 bedrock block in the 18 blocks below them\\n```\",\"permalink\":\"https://scarpet.pages.dev/builtins/iteration/all/\",\"plain\":\"Returns true if all elements on the list satisfy the condition. Its roughly equivalent to all(list,expr) <=> for(list,expr)==length(list). expr also receives bound _ and _i variables. break and continue have no sense and cannot be used inside of expr body.\\nall([1,2,3], check_prime(_)) => true all(neighbours(x,y,z), _=='stone') => true // if all neighbours of [x, y, z] are stone map(filter(rect(0,4,0,1000,0,1000), [x,y,z]=pos(_); all(rect(x,y,z,1,0,1),_=='bedrock') ), pos(_) ) => [[-298, 4, -703], [-287, 4, -156], [-269, 4, 104], [242, 4, 250], [-159, 4, 335], [-208, 4, 416], [-510, 4, 546], [376, 4, 806]] // find all 3x3 bedrock structures in the top bedrock layer map( filter( rect(0,4,0,1000,1,1000,1000,0,1000), [x,y,z]=pos(_); all(rect(x,y,z,1,0,1),_=='bedrock') && for(rect(x,y-1,z,1,1,1,1,0,1),_=='bedrock')<8), pos(_) ) => [[343, 3, -642], [153, 3, -285], [674, 3, 167], [-710, 3, 398]] // ditto, but requiring at most 7 bedrock block in the 18 blocks below them \",\"signatures\":[{\"params\":[{\"name\":\"list\"},{\"binds\":[\"_\",\"_i\"],\"name\":\"expr\"}]}]},\"asin\":{\"markdown\":\"Returns the inverse sine of a number in **degrees**.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/asin/\",\"plain\":\"Returns the inverse sine of a number in degrees.\",\"signatures\":[{\"params\":[{\"name\":\"x\"}]}]},\"asinh\":{\"markdown\":\"Returns the inverse hyperbolic sine of a number.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/asinh/\",\"plain\":\"Returns the inverse hyperbolic sine of a number.\",\"signatures\":[{\"params\":[{\"name\":\"x\"}]}]},\"atan\":{\"markdown\":\"Returns the inverse tangent of a number in **degrees**.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/atan/\",\"plain\":\"Returns the inverse tangent of a number in degrees.\",\"signatures\":[{\"params\":[{\"name\":\"x\"}]}]},\"atan2\":{\"markdown\":\"Returns the angle _theta_ from the conversion of rectangular coordinates (x, y)\\nto polar coordinates (r, _theta_). Return value is in **degrees**.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/atan2/\",\"plain\":\"Returns the angle theta from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta). Return value is in degrees.\",\"signatures\":[{\"params\":[{\"name\":\"y\"},{\"name\":\"x\"}]}]},\"atanh\":{\"markdown\":\"Returns the inverse hyperbolic tangent of a number.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/atanh/\",\"plain\":\"Returns the inverse hyperbolic tangent of a number.\",\"signatures\":[{\"params\":[{\"name\":\"x\"}]}]},\"biome\":{\"markdown\":\"Without arguments, returns the list of biomes in the world.\\n\\nWith block, or name, returns the name of the biome in that position, or throws\\n`'unknown_biome'` if provided biome or block are not valid.\\n\\n(1.18+) if passed a map of `continentalness`, `depth`, `erosion`, `humidity`,\\n`temperature`, `weirdness`, returns the biome that exists at those noise values.\\nNote: Have to pass all 6 of the mentioned noise types and only these noise types\\nfor it to evaluate a biome.\\n\\nWith an optional feature, it returns value for the specified attribute for that\\nbiome. Available and queryable features include:\\n\\n- `'top_material'`: unlocalized block representing the top surface material\\n  (1.17.1 and below only)\\n- `'under_material'`: unlocalized block representing what sits below topsoil\\n  (1.17.1 and below only)\\n- `'category'`: the parent biome this biome is derived from. Possible values\\n  include (1.18.2 and below only): `'none'`, `'taiga'`, `'extreme_hills'`,\\n  `'jungle'`, `'mesa'`, `'plains'`, `'savanna'`, `'icy'`, `'the_end'`,\\n  `'beach'`, `'forest'`, `'ocean'`, `'desert'`, `'river'`, `'swamp'`,\\n  `'mushroom'` , `'nether'`, `'underground'` (1.18+) and `'mountain'` (1.18+).\\n- `'tags'`: list of biome tags associated with this biome\\n- `'temperature'`: temperature from 0 to 1\\n- `'fog_color'`: RGBA color value of fog\\n- `'foliage_color'`: RGBA color value of foliage\\n- `'sky_color'`: RGBA color value of sky\\n- `'water_color'`: RGBA color value of water\\n- `'water_fog_color'`: RGBA color value of water fog\\n- `'humidity'`: value from 0 to 1 indicating how wet is the biome\\n- `'precipitation'`: `'rain'` `'snot'`, or `'none'`... ok, maybe `'snow'`, but\\n  that means snots for sure as well.\\n- `'depth'`: (1.17.1 and below only) float value indicating how high or low the\\n  terrain should generate. Values > 0 indicate generation above sea level and\\n  values < 0, below sea level.\\n- `'scale'`: (1.17.1 and below only) float value indicating how flat is the\\n  terrain.\\n- `'features'`: list of features that generate in the biome, grouped by\\n  generation steps\\n- `'structures'`: (1.17.1 and below only) list of structures that generate in\\n  the biome.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/biome/\",\"plain\":\"Without arguments, returns the list of biomes in the world.\\nWith block, or name, returns the name of the biome in that position, or throws 'unknown_biome' if provided biome or block are not valid.\\n(1.18+) if passed a map of continentalness, depth, erosion, humidity, temperature, weirdness, returns the biome that exists at those noise values. Note: Have to pass all 6 of the mentioned noise types and only these noise types for it to evaluate a biome.\\nWith an optional feature, it returns value for the specified attribute for that biome. Available and queryable features include:\\n'top_material': unlocalized block representing the top surface material (1.17.1 and below only) 'under_material': unlocalized block representing what sits below topsoil (1.17.1 and below only) 'category': the parent biome this biome is derived from. Possible values include (1.18.2 and below only): 'none', 'taiga', 'extreme_hills', 'jungle', 'mesa', 'plains', 'savanna', 'icy', 'the_end', 'beach', 'forest', 'ocean', 'desert', 'river', 'swamp', 'mushroom' , 'nether', 'underground' (1.18+) and 'mountain' (1.18+). 'tags': list of biome tags associated with this biome 'temperature': temperature from 0 to 1 'fog_color': RGBA color value of fog 'foliage_color': RGBA color value of foliage 'sky_color': RGBA color value of sky 'water_color': RGBA color value of water 'water_fog_color': RGBA color value of water fog 'humidity': value from 0 to 1 indicating how wet is the biome 'precipitation': 'rain' 'snot', or 'none'… ok, maybe 'snow', but that means snots for sure as well. 'depth': (1.17.1 and below only) float value indicating how high or low the terrain should generate. Values > 0 indicate generation above sea level and values < 0, below sea level. 'scale': (1.17.1 and below only) float value indicating how flat is the terrain. 'features': list of features that generate in the biome, grouped by generation steps 'structures': (1.17.1 and below only) list of structures that generate in the biome. \",\"signatures\":[{\"params\":[]},{\"params\":[{\"name\":\"pos/name/noise_map\"}]},{\"params\":[{\"name\":\"pos/name\"},{\"name\":\"feature\"}]}]},\"blast_resistance\":{\"markdown\":\"Numeric function, indicating blast_resistance of a block.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/blast_resistance/\",\"plain\":\"Numeric function, indicating blast_resistance of a block.\",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"block\":{\"markdown\":\"Returns either a block from specified location, or block with a specific state\\n(as used by `/setblock` command), so allowing for block properties, block entity\\ndata etc. Blocks otherwise can be referenced everywhere by its simple string\\nname, but its only used in its default state.\\n\\n```scarpet\\nblock('air')  => air\\nblock('iron_trapdoor[half=top]')  => iron_trapdoor\\nblock(0,0,0) == block('bedrock')  => 1\\nblock('hopper[facing=north]{Items:[{Slot:1b,id:\\\"minecraft:slime_ball\\\",Count:16b}]}') => hopper\\n```\\n\\nRetrieving a block with `block` function has also a side-effect of evaluating\\nits current state and data. So if you use it later it will reflect block state\\nand data of the block that was when block was called, rather than when it was\\nused. Block values passed in various places like `scan` functions, etc, are not\\nfully evaluated unless its properties are needed. This means that if the block\\nat the location changes before its queried in the program this might result in\\ngetting the later state, which might not be desired. Consider the following\\nexample:\\n\\nThrows `unknown_block` if provided input is not valid.\\n\\n```scarpet\\nset(10,10,10,'stone');\\nscan(10,10,10,0,0,0, b = _);\\nset(10,10,10,'air');\\nprint(b); // 'air', block was remembered 'lazily', and evaluated by `print`, when it was already set to air\\nset(10,10,10,'stone');\\nscan(10,10,10,0,0,0, b = block(_));\\nset(10,10,10,'air');\\nprint(b); // 'stone', block was evaluated 'eagerly' but call to `block`\\n```\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/block/\",\"plain\":\"Returns either a block from specified location, or block with a specific state (as used by /setblock command), so allowing for block properties, block entity data etc. Blocks otherwise can be referenced everywhere by its simple string name, but its only used in its default state.\\nblock('air') => air block('iron_trapdoor[half=top]') => iron_trapdoor block(0,0,0) == block('bedrock') => 1 block('hopper[facing=north]{Items:[{Slot:1b,id:\\\"minecraft:slime_ball\\\",Count:16b}]}') => hopper Retrieving a block with block function has also a side-effect of evaluating its current state and data. So if you use it later it will reflect block state and data of the block that was when block was called, rather than when it was used. Block values passed in various places like scan functions, etc, are not fully evaluated unless its properties are needed. This means that if the block at the location changes before its queried in the program this might result in getting the later state, which might not be desired. Consider the following example:\\nThrows unknown_block if provided input is not valid.\\nset(10,10,10,'stone'); scan(10,10,10,0,0,0, b = _); set(10,10,10,'air'); print(b); // 'air', block was remembered 'lazily', and evaluated by `print`, when it was already set to air set(10,10,10,'stone'); scan(10,10,10,0,0,0, b = block(_)); set(10,10,10,'air'); print(b); // 'stone', block was evaluated 'eagerly' but call to `block` \",\"signatures\":[{\"params\":[{\"name\":\"x\"},{\"name\":\"y\"},{\"name\":\"z\"}]},{\"params\":[{\"name\":\"pos/state\"}]}]},\"block_data\":{\"markdown\":\"Return NBT string associated with specific location, or null if the block does\\nnot carry block data. Can be currently used to match specific information from\\nit, or use it to copy to another block\\n\\n```scarpet\\nblock_data(x,y,z) => '{TransferCooldown:0,x:450,y:68, ... }'\\n```\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/block_data/\",\"plain\":\"Return NBT string associated with specific location, or null if the block does not carry block data. Can be currently used to match specific information from it, or use it to copy to another block\\nblock_data(x,y,z) => '{TransferCooldown:0,x:450,y:68, ... }' \",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"block_light\":{\"markdown\":\"Numeric function, returning the block light at position (from torches and other\\nlight sources).\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/block_light/\",\"plain\":\"Numeric function, returning the block light at position (from torches and other light sources).\",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"block_list\":{\"markdown\":\"Returns a list of all blocks that belong to the given block tag. If omitted it\\nwill return a list of all the blocks in the game.\\n\\n### Examples\\n\\n```scarpet\\nblock_list(); // => [dark_oak_button, wall_torch, ...]\\nblock_list('impermeable'); // => [glass, white_stained_glass, ...]\\nblock_list('rails'); // => [rail, powered_rail, detector_rail, activator_rail]\\nblock_list('not_a_valid_block_tag'); // => null\\n```\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/block_list/\",\"plain\":\"Returns a list of all blocks that belong to the given block tag. If omitted it will return a list of all the blocks in the game.\\nExamples block_list(); // => [dark_oak_button, wall_torch, ...] block_list('impermeable'); // => [glass, white_stained_glass, ...] block_list('rails'); // => [rail, powered_rail, detector_rail, activator_rail] block_list('not_a_valid_block_tag'); // => null \",\"signatures\":[{\"params\":[]},{\"params\":[{\"name\":\"tag\"}]}]},\"block_properties\":{\"deprecated\":\"Deprecated — use [`block_state()`](/minecraft/world/block_state/)\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/block_properties/\",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"block_sound\":{\"markdown\":\"Returns the name of sound type made by the block at position. One of:\\n\\n- `'wood'`\\n- `'gravel'`\\n- `'grass'`\\n- `'stone'`\\n- `'metal'`\\n- `'glass'`\\n- `'wool'`\\n- `'sand'`\\n- `'snow'`\\n- `'ladder'`\\n- `'anvil'`\\n- `'slime'`\\n- `'sea_grass'`\\n- `'coral'`\\n- `'bamboo'`\\n- `'shoots'`\\n- `'scaffolding'`\\n- `'berry'`\\n- `'crop'`\\n- `'stem'`\\n- `'wart'`\\n- `'lantern'`\\n- `'fungi_stem'`\\n- `'nylium'`\\n- `'fungus'`\\n- `'roots'`\\n- `'shroomlight'`\\n- `'weeping_vines'`\\n- `'soul_sand'`\\n- `'soul_soil'`\\n- `'basalt'`\\n- `'wart'`\\n- `'netherrack'`\\n- `'nether_bricks'`\\n- `'nether_sprouts'`\\n- `'nether_ore'`\\n- `'bone'`\\n- `'netherite'`\\n- `'ancient_debris'`\\n- `'lodestone'`\\n- `'chain'`\\n- `'nether_gold_ore'`\\n- `'gilded_blackstone'`\\n- `'candle'`\\n- `'amethyst'`\\n- `'amethyst_cluster'`\\n- `'small_amethyst_bud'`\\n- `'large_amethyst_bud'`\\n- `'medium_amethyst_bud'`\\n- `'tuff'`\\n- `'calcite'`\\n- `'copper'`\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/block_sound/\",\"plain\":\"Returns the name of sound type made by the block at position. One of:\\n'wood' 'gravel' 'grass' 'stone' 'metal' 'glass' 'wool' 'sand' 'snow' 'ladder' 'anvil' 'slime' 'sea_grass' 'coral' 'bamboo' 'shoots' 'scaffolding' 'berry' 'crop' 'stem' 'wart' 'lantern' 'fungi_stem' 'nylium' 'fungus' 'roots' 'shroomlight' 'weeping_vines' 'soul_sand' 'soul_soil' 'basalt' 'wart' 'netherrack' 'nether_bricks' 'nether_sprouts' 'nether_ore' 'bone' 'netherite' 'ancient_debris' 'lodestone' 'chain' 'nether_gold_ore' 'gilded_blackstone' 'candle' 'amethyst' 'amethyst_cluster' 'small_amethyst_bud' 'large_amethyst_bud' 'medium_amethyst_bud' 'tuff' 'calcite' 'copper' \",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"block_state\":{\"markdown\":\"If used with a `block` argument only, it returns a map of block properties and\\ntheir values. If a block has no properties, returns an empty map.\\n\\nIf `property` is specified, returns a string value of that property, or `null`\\nif property is not applicable.\\n\\nReturned values or properties are always strings. It is expected from the user\\nto know what to expect and convert values to numbers using `number()` function\\nor booleans using `bool()` function. Returned string values can be directly used\\nback in state definition in various applications where block properties are\\nrequired.\\n\\n`block_state` can also accept block names as input, returning block's default\\nstate.\\n\\nThrows `unknown_block` if the provided input is not valid.\\n\\n```scarpet\\nset(x,y,z,'iron_block'); block_state(x,y,z)  => {}\\nset(x,y,z,'iron_trapdoor','half','top'); block_state(x,y,z)  => {waterlogged: false, half: top, open: false, ...}\\nset(x,y,z,'iron_trapdoor','half','top'); block_state(x,y,z,'half')  => top\\nblock_state('iron_trapdoor','half')  => top\\nset(x,y,z,'air'); block_state(x,y,z,'half')  => null\\nblock_state(block('iron_trapdoor[half=top]'),'half')  => top\\nblock_state(block('iron_trapdoor[half=top]'),'powered')  => false\\nbool(block_state(block('iron_trapdoor[half=top]'),'powered'))  => 0\\n```\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/block_state/\",\"plain\":\"If used with a block argument only, it returns a map of block properties and their values. If a block has no properties, returns an empty map.\\nIf property is specified, returns a string value of that property, or null if property is not applicable.\\nReturned values or properties are always strings. It is expected from the user to know what to expect and convert values to numbers using number() function or booleans using bool() function. Returned string values can be directly used back in state definition in various applications where block properties are required.\\nblock_state can also accept block names as input, returning block’s default state.\\nThrows unknown_block if the provided input is not valid.\\nset(x,y,z,'iron_block'); block_state(x,y,z) => {} set(x,y,z,'iron_trapdoor','half','top'); block_state(x,y,z) => {waterlogged: false, half: top, open: false, ...} set(x,y,z,'iron_trapdoor','half','top'); block_state(x,y,z,'half') => top block_state('iron_trapdoor','half') => top set(x,y,z,'air'); block_state(x,y,z,'half') => null block_state(block('iron_trapdoor[half=top]'),'half') => top block_state(block('iron_trapdoor[half=top]'),'powered') => false bool(block_state(block('iron_trapdoor[half=top]'),'powered')) => 0 \",\"signatures\":[{\"params\":[{\"name\":\"block\"}]},{\"params\":[{\"name\":\"block\"},{\"name\":\"property\"}]}]},\"block_tags\":{\"markdown\":\"Without arguments, returns list of available tags, with block supplied (either\\nby coordinates, or via block name), returns lost of tags the block belongs to,\\nand if a tag is specified, returns `null` if tag is invalid, `false` if this\\nblock doesn't belong to this tag, and `true` if the block belongs to the tag.\\n\\nThrows `unknown_block` if `block` doesn't exist\\n\\n```scarpet\\nblock_tags() => [geode_invalid_blocks, wall_post_override, ice, wooden_stairs, bamboo_blocks, stone_bricks... ]\\nblock_tags('iron_block') => [mineable/pickaxe, needs_stone_tool, beacon_base_blocks]\\nblock_tags('glass') => [impermeable]\\nblock_tags('glass', 'impermeable') => true\\nblock_tags('glass', 'beacon_base_blocks') => false\\n```\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/block_tags/\",\"plain\":\"Without arguments, returns list of available tags, with block supplied (either by coordinates, or via block name), returns lost of tags the block belongs to, and if a tag is specified, returns null if tag is invalid, false if this block doesn’t belong to this tag, and true if the block belongs to the tag.\\nThrows unknown_block if block doesn’t exist\\nblock_tags() => [geode_invalid_blocks, wall_post_override, ice, wooden_stairs, bamboo_blocks, stone_bricks... ] block_tags('iron_block') => [mineable/pickaxe, needs_stone_tool, beacon_base_blocks] block_tags('glass') => [impermeable] block_tags('glass', 'impermeable') => true block_tags('glass', 'beacon_base_blocks') => false \",\"signatures\":[{\"params\":[]},{\"params\":[{\"name\":\"block\"}]},{\"params\":[{\"name\":\"block\"},{\"name\":\"tag\"}]}]},\"block_tick\":{\"markdown\":\"Causes a block to tick at position.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/block_tick/\",\"plain\":\"Causes a block to tick at position.\",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"blocks_daylight\":{\"markdown\":\"Boolean function, true if the block blocks daylight.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/blocks_daylight/\",\"plain\":\"Boolean function, true if the block blocks daylight.\",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"blocks_movement\":{\"markdown\":\"Boolean function, true if the block at position blocks movement.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/blocks_movement/\",\"plain\":\"Boolean function, true if the block at position blocks movement.\",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"bool\":{\"markdown\":\"Returns a boolean context of the expression. Bool is also interpreting string\\nvalues as boolean, which is different from other places where boolean context\\ncan be used. This can be used in places where API functions return string values\\nto represent binary values.\\n\\n```scarpet\\nbool(pi) => true\\nbool(false) => false\\nbool('') => false\\nbool([]) => false\\nbool(['']) => true\\nbool('foo') => true\\nbool('false') => false\\nbool('nulL') => false\\nif('false',1,0) => true\\n```\",\"permalink\":\"https://scarpet.pages.dev/builtins/functions/bool/\",\"plain\":\"Returns a boolean context of the expression. Bool is also interpreting string values as boolean, which is different from other places where boolean context can be used. This can be used in places where API functions return string values to represent binary values.\\nbool(pi) => true bool(false) => false bool('') => false bool([]) => false bool(['']) => true bool('foo') => true bool('false') => false bool('nulL') => false if('false',1,0) => true \",\"signatures\":[{\"params\":[{\"name\":\"expr\"}]}]},\"break\":{\"markdown\":\"Exit early from a loop.\\n\\n`break()` terminates the execution of the current loop.\\n\\n```scarpet\\nfor([1, 2, 3], if(_ == 2, break()));\\n```\",\"permalink\":\"https://scarpet.pages.dev/syntax/control_flow/break/\",\"plain\":\"Exit early from a loop.\\nbreak() terminates the execution of the current loop.\\nfor([1, 2, 3], if(_ == 2, break())); \",\"signatures\":[{\"params\":[]},{\"params\":[{\"name\":\"value\"}]}]},\"c_for\":{\"markdown\":\"Mimics a C-Style `for` loop `for (init; condition; increment) { body }`\\n\\n```java\\nfor (int i = 0; i < 5; i += 1) {\\n    printf(\\\"%d\\\\n\\\", i);\\n}\\n```\\n\\n```scarpet\\nc_for(i = 0, i < 5, i += 1, print(i));\\n```\",\"permalink\":\"https://scarpet.pages.dev/syntax/control_flow/c_for/\",\"plain\":\"Mimics a C-Style for loop for (init; condition; increment) { body }\\nfor (int i = 0; i < 5; i += 1) { printf(\\\"%d\\\\n\\\", i); } c_for(i = 0, i < 5, i += 1, print(i)); \",\"signatures\":[{\"params\":[{\"name\":\"init\"},{\"name\":\"condition\"},{\"name\":\"increment\"},{\"name\":\"body\"}]}]},\"call\":{\"markdown\":\"Calls a function with the provided arguments.\\n\\nFunction values cannot be called directly and can only be executed with\\n`call()`.\\n\\n```scarpet\\nf = (_(x) -> x + 1);\\nval = call(f, 12);\\nval == 13\\n```\\n\\n`call()` can also invoke functions by name.\\n\\n```scarpet\\nf(x) -> x + 1;\\nval = call('f', 12);\\n```\\n\\n`call()` resolves function names from the call site.\\n\\n### Passing function references\\n\\nIn case a function is defined by its name, Scarpet will attempt to resolve its\\ndefinition in the given module and its imports, meaning if the call is in a\\nimported library, and not in the main module of your app, and that function is\\nnot visible from the library perspective, but in the app, it won't be call-able.\\nIn case you pass a function name to a separate module in your app, it should\\nimport back that method from the main module for visibility.\\n\\nCheck an example of a problematic code of a library that expects a function\\nvalue as a passed argument and how it is called in the parent app:\\n\\n```scarpet\\n//app.sc\\nimport('lib', 'callme');\\nfoo(x) -> x*x;\\ntest() -> callme('foo' , 5);\\n```\\n\\n```scarpet\\n//lib.scl\\ncallme(fun, arg) -> call(fun, arg);\\n```\\n\\nIn this case `'foo'` will fail to dereference in `lib` as it is not visible by\\nname. In tightly coupled modules, where `lib` is just a component of your `app`\\nyou can use circular import to acknowledge the symbol from the other module\\n(pretty much like imports in Java classes), and that solves the issue but makes\\nthe library dependent on the main app:\\n\\n```scarpet\\n//lib.scl\\nimport('app','foo');\\ncallme(fun, arg) -> call(fun, arg);\\n```\\n\\nYou can circumvent that issue by explicitly dereferencing the local function\\nwhere it is used as a lambda argument created in the module in which the\\nrequested function is visible:\\n\\n```scarpet\\n//app.sc\\nimport('lib', 'callme');\\nfoo(x) -> x*x;\\ntest() -> callme(_(x) -> foo(x), 5);\\n```\\n\\n```scarpet\\n//lib.scl\\ncallme(fun, arg) -> call(fun, arg);\\n```\\n\\nOr by passing an explicit reference to the function, instead of calling it by\\nname:\\n\\n```scarpet\\n//app.sc\\nimport('lib', 'callme');\\nglobal_foohandler = (foo(x) -> x*x);\\ntest() -> callme(global_foohandler, 5);\\n```\\n\\nLittle technical note: the use of `_` in expression passed to built in functions\\nis much more efficient due to not creating new call stacks for each invoked\\nfunction, but anonymous functions is the only mechanism available for\\nprogrammers with their own lambda arguments\\n\\n```scarpet\\nmy_map(list, function) -> map(list, call(function, _));\\nmy_map([1,2,3], _(x) -> x*x);    // => [1,4,9]\\nprofile_expr(my_map([1,2,3], _(x) -> x*x));   // => ~32000\\nsq(x) -> x*x; profile_expr(my_map([1,2,3], 'sq'));   // => ~36000\\nsq = (_(x) -> x*x); profile_expr(my_map([1,2,3], sq));   // => ~36000\\nprofile_expr(map([1,2,3], _*_));   // => ~80000\\n```\",\"permalink\":\"https://scarpet.pages.dev/syntax/control_flow/call/\",\"plain\":\"Calls a function with the provided arguments.\\nFunction values cannot be called directly and can only be executed with call().\\nf = (_(x) -> x + 1); val = call(f, 12); val == 13 call() can also invoke functions by name.\\nf(x) -> x + 1; val = call('f', 12); call() resolves function names from the call site.\\nPassing function references In case a function is defined by its name, Scarpet will attempt to resolve its definition in the given module and its imports, meaning if the call is in a imported library, and not in the main module of your app, and that function is not visible from the library perspective, but in the app, it won’t be call-able. In case you pass a function name to a separate module in your app, it should import back that method from the main module for visibility.\\nCheck an example of a problematic code of a library that expects a function value as a passed argument and how it is called in the parent app:\\n//app.sc import('lib', 'callme'); foo(x) -> x*x; test() -> callme('foo' , 5); //lib.scl callme(fun, arg) -> call(fun, arg); In this case 'foo' will fail to dereference in lib as it is not visible by name. In tightly coupled modules, where lib is just a component of your app you can use circular import to acknowledge the symbol from the other module (pretty much like imports in Java classes), and that solves the issue but makes the library dependent on the main app:\\n//lib.scl import('app','foo'); callme(fun, arg) -> call(fun, arg); You can circumvent that issue by explicitly dereferencing the local function where it is used as a lambda argument created in the module in which the requested function is visible:\\n//app.sc import('lib', 'callme'); foo(x) -> x*x; test() -> callme(_(x) -> foo(x), 5); //lib.scl callme(fun, arg) -> call(fun, arg); Or by passing an explicit reference to the function, instead of calling it by name:\\n//app.sc import('lib', 'callme'); global_foohandler = (foo(x) -> x*x); test() -> callme(global_foohandler, 5); Little technical note: the use of _ in expression passed to built in functions is much more efficient due to not creating new call stacks for each invoked function, but anonymous functions is the only mechanism available for programmers with their own lambda arguments\\nmy_map(list, function) -> map(list, call(function, _)); my_map([1,2,3], _(x) -> x*x); // => [1,4,9] profile_expr(my_map([1,2,3], _(x) -> x*x)); // => ~32000 sq(x) -> x*x; profile_expr(my_map([1,2,3], 'sq')); // => ~36000 sq = (_(x) -> x*x); profile_expr(my_map([1,2,3], sq)); // => ~36000 profile_expr(map([1,2,3], _*_)); // => ~80000 \",\"signatures\":[{\"params\":[{\"name\":\"function\"},{\"name\":\"args\",\"rest\":true}]}]},\"ceil\":{\"markdown\":\"Returns the smallest integer greater than or equal to the given number.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/ceil/\",\"plain\":\"Returns the smallest integer greater than or equal to the given number.\",\"signatures\":[{\"params\":[{\"name\":\"n\"}]}]},\"close_screen\":{\"markdown\":\"Closes the screen of the given screen value. Returns `true` if the screen was\\nclosed. If the screen is already closed, returns `false`.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/inventory/close_screen/\",\"plain\":\"Closes the screen of the given screen value. Returns true if the screen was closed. If the screen is already closed, returns false.\",\"signatures\":[{\"params\":[{\"name\":\"screen\"}]}]},\"continue\":{\"markdown\":\"Skip to the next iteration of the loop.\\n\\n`continue()` terminates execution of the current iteration skipping to the next.\\n\\n```scarpet\\nfor([1, 2, 3, 4],\\n    if(_ == 3, continue());\\n    print(_); // 1, 2, 4\\n);\\n```\",\"permalink\":\"https://scarpet.pages.dev/syntax/control_flow/continue/\",\"plain\":\"Skip to the next iteration of the loop.\\ncontinue() terminates execution of the current iteration skipping to the next.\\nfor([1, 2, 3, 4], if(_ == 3, continue()); print(_); // 1, 2, 4 ); \",\"signatures\":[{\"params\":[]},{\"params\":[{\"name\":\"value\"}]}]},\"convert_date\":{\"markdown\":\"If called with a single argument, converts standard POSIX time to a list in the\\nformat:\\n\\n`[year, month, day, hours, mins, secs, day_of_week, day_of_year, week_of_year]`\\n\\neg: `convert_date(1592401346960) -> [2020, 6, 17, 10, 42, 26, 3, 169, 25]`\\n\\nWhere the `6` stands for June, but `17` stands for 17th, `10` stands for 10am,\\n`42` stands for 42 minutes past the hour, and `26` stands for 26 seconds past\\nthe minute, and `3` stands for Wednesday, `169` is the day of year, and `25` is\\na week of year.\\n\\nRun `convert_date(unix_time())` to get current time as list.\\n\\nWhen called with a list, or with 3 or 6 arguments, returns standard POSIX time\\nas a number of milliseconds since the start of the epoch (1 Jan 1970), using the\\ntime inputted into the function as opposed to the system time.\\n\\nExample editing:\\n\\n```scarpet\\ndate = convert_date(unix_time());\\n\\nmonths = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\\n\\ndays = ['Mon','Tue','Wed','Thu','Fri','Sat','Sun'];\\n\\nprint(\\n  str('Its %s, %d %s %d, %02d:%02d:%02d',\\n    days:(date:6-1), date:2, months:(date:1-1), date:0, date:3, date:4, date:5\\n  )\\n)\\n```\\n\\nThis will give you a date:\\n\\nIt is currently `hrs`:`mins` and `secs` seconds on the `day`th of `month`,\\n`year`\",\"permalink\":\"https://scarpet.pages.dev/builtins/functions/convert_date/\",\"plain\":\"If called with a single argument, converts standard POSIX time to a list in the format:\\n[year, month, day, hours, mins, secs, day_of_week, day_of_year, week_of_year]\\neg: convert_date(1592401346960) -> [2020, 6, 17, 10, 42, 26, 3, 169, 25]\\nWhere the 6 stands for June, but 17 stands for 17th, 10 stands for 10am, 42 stands for 42 minutes past the hour, and 26 stands for 26 seconds past the minute, and 3 stands for Wednesday, 169 is the day of year, and 25 is a week of year.\\nRun convert_date(unix_time()) to get current time as list.\\nWhen called with a list, or with 3 or 6 arguments, returns standard POSIX time as a number of milliseconds since the start of the epoch (1 Jan 1970), using the time inputted into the function as opposed to the system time.\\nExample editing:\\ndate = convert_date(unix_time()); months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']; days = ['Mon','Tue','Wed','Thu','Fri','Sat','Sun']; print( str('Its %s, %d %s %d, %02d:%02d:%02d', days:(date:6-1), date:2, months:(date:1-1), date:0, date:3, date:4, date:5 ) ) This will give you a date:\\nIt is currently hrs:mins and secs seconds on the dayth of month, year\",\"signatures\":[{\"params\":[{\"name\":\"year\"},{\"name\":\"month\"},{\"name\":\"day\"},{\"name\":\"hours\"},{\"name\":\"minutes\"},{\"name\":\"seconds\"}]},{\"params\":[{\"name\":\"date\"}]}]},\"copy\":{\"markdown\":\"Returns the deep copy of the expression. Can be used to copy mutable objects,\\nlike maps and lists\",\"permalink\":\"https://scarpet.pages.dev/builtins/functions/copy/\",\"plain\":\"Returns the deep copy of the expression. Can be used to copy mutable objects, like maps and lists\",\"signatures\":[{\"params\":[{\"name\":\"expr\"}]}]},\"cos\":{\"markdown\":\"Returns the cosine of an angle in **degrees**.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/cos/\",\"plain\":\"Returns the cosine of an angle in degrees.\",\"signatures\":[{\"params\":[{\"name\":\"x\"}]}]},\"cosh\":{\"markdown\":\"Returns the hyperbolic cosine of a number.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/cosh/\",\"plain\":\"Returns the hyperbolic cosine of a number.\",\"signatures\":[{\"params\":[{\"name\":\"x\"}]}]},\"cot\":{\"markdown\":\"Returns the cotangent of an angle in **degrees**.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/cot/\",\"plain\":\"Returns the cotangent of an angle in degrees.\",\"signatures\":[{\"params\":[{\"name\":\"x\"}]}]},\"coth\":{\"markdown\":\"Returns the hyperbolic cotagent of a number.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/coth/\",\"plain\":\"Returns the hyperbolic cotagent of a number.\",\"signatures\":[{\"params\":[{\"name\":\"x\"}]}]},\"crafting_remaining_item\":{\"markdown\":\"Returns `null` if the item has no remaining item in the crafting window when\\nused as a crafting ingredient, or an item name that serves as a replacement\\nafter crafting is done. Currently it can only be buckets and glass bottles.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/inventory/crafting_remaining_item/\",\"plain\":\"Returns null if the item has no remaining item in the crafting window when used as a crafting ingredient, or an item name that serves as a replacement after crafting is done. Currently it can only be buckets and glass bottles.\",\"signatures\":[{\"params\":[{\"name\":\"item\"}]}]},\"create_datapack\":{\"markdown\":\"Creates and loads custom datapack. The data has to be a map representing the\\nfile structure and the content of the json files of the target pack.\\n\\nReturns `null` if the pack with this name already exists or is loaded, meaning\\nno change has been made. Returns `false` if adding of the datapack wasn't\\nsuccessful. Returns `true` if creation and loading of the datapack was\\nsuccessful. Loading of a datapack results in reloading of all other datapacks\\n(vanilla restrictions, identical to /datapack enable), however unlike with\\n`/reload` command, scarpet apps will not be reloaded by adding a datapack using\\n`create_datapack`.\\n\\nCurrently, only json/nbt/mcfunction files are supported in the packs.\\n`'pack.mcmeta'` file is added automatically.\\n\\nReloading of datapacks that define new dimensions is not implemented in vanilla.\\nVanilla game only loads dimension information on server start. `create_datapack`\\nis therefore a direct replacement of manually ploping of the specified file\\nstructure in a datapack file and calling `/datapack enable` on the new datapack\\nwith all its quirks and sideeffects (like no worldgen changes, reloading all\\nother datapacks, etc.). To enable newly added custom dimensions, call much more\\nexperimental `enable_hidden_dimensions()` after adding a datapack if needed.\\n\\n### Examples\\n\\n```scarpet\\ncreate_datapack('foo', {\\n    'foo' -> {\\n        'bar.json' -> {\\n            'c' -> true,\\n            'd' -> false,\\n            'e' -> {\\n              'foo' -> [1, 2, 3],\\n            },\\n            'a' -> 'foobar',\\n            'b' -> 5,\\n        },\\n    },\\n});\\n```\\n\\nCustom dimension example:\\n\\n```scarpet\\n// 1.17\\ncreate_datapack('funky_world',  {\\n    'data' -> { 'minecraft' -> { 'dimension' -> { 'custom_ow.json' -> {\\n        'type' -> 'minecraft:the_end',\\n        'generator' -> {\\n            'biome_source' -> {\\n                 'seed' -> 0,\\n                 'large_biomes' -> false,\\n                 'type' -> 'minecraft:vanilla_layered'\\n            },\\n            'seed' -> 0,\\n            'settings' -> 'minecraft:nether',\\n            'type' -> 'minecraft:noise'\\n    } } } } }\\n});\\n\\n// 1.18\\na() -> create_datapack('funky_world',  {\\n   'data' -> { 'minecraft' -> { 'dimension' -> { 'custom_ow.json' -> {\\n      'type' -> 'minecraft:overworld',\\n         'generator' -> {\\n            'biome_source' -> {\\n               'biomes' -> [\\n                  {\\n                     'parameters' -> {\\n                        'erosion' -> [-1.0,1.0],\\n                        'depth' -> 0.0,\\n                        'weirdness' -> [-1.0,1.0],\\n                        'offset' -> 0.0,\\n                        'temperature' -> [-1.0,1.0],\\n                        'humidity' -> [-1.0,1.0],\\n                        'continentalness' -> [ -1.2,-1.05]\\n                     },\\n                     'biome' -> 'minecraft:mushroom_fields'\\n                  }\\n               ],\\n               'type' -> 'minecraft:multi_noise'\\n            },\\n            'seed' -> 0,\\n            'settings' -> 'minecraft:overworld',\\n            'type' -> 'minecraft:noise'\\n         }\\n     } } } }\\n});\\nenable_hidden_dimensions();\\n```\\n\\nLoot table example:\\n\\n```scarpet\\nscript run create_datapack('silverfishes_drop_gravel', {\\n    'data' -> { 'minecraft' -> { 'loot_tables' -> { 'entities' -> { 'silverfish.json' -> {\\n        'type' -> 'minecraft:entity',\\n        'pools' -> [\\n            {\\n                'rolls' -> {\\n                    'min' -> 0,\\n                    'max' -> 1\\n                },\\n                'entries' -> [\\n                    {\\n                        'type' -> 'minecraft:item',\\n                        'name' -> 'minecraft:gravel'\\n                    }\\n                ]\\n            }\\n        ]\\n    } } } } }\\n});\\n```\\n\\nRecipe example:\\n\\n```scarpet\\nscript run create_datapack('craftable_cobwebs', {\\n    'data' -> { 'scarpet' -> { 'recipes' -> { 'cobweb.json' -> {\\n        'type' -> 'crafting_shaped',\\n        'pattern' -> [\\n            'SSS',\\n            'SSS',\\n            'SSS'\\n        ],\\n        'key' -> {\\n            'S' -> {\\n                'item' -> 'minecraft:string'\\n            }\\n        },\\n        'result' -> {\\n            'item' -> 'minecraft:cobweb',\\n            'count' -> 1\\n        }\\n    } } } }\\n});\\n```\\n\\nFunction example:\\n\\n```scarpet\\n script run create_datapack('example',{'data/test/functions/talk.mcfunction'->'say 1\\\\nsay 2'})\\n```\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/create_datapack/\",\"plain\":\"Creates and loads custom datapack. The data has to be a map representing the file structure and the content of the json files of the target pack.\\nReturns null if the pack with this name already exists or is loaded, meaning no change has been made. Returns false if adding of the datapack wasn’t successful. Returns true if creation and loading of the datapack was successful. Loading of a datapack results in reloading of all other datapacks (vanilla restrictions, identical to /datapack enable), however unlike with /reload command, scarpet apps will not be reloaded by adding a datapack using create_datapack.\\nCurrently, only json/nbt/mcfunction files are supported in the packs. 'pack.mcmeta' file is added automatically.\\nReloading of datapacks that define new dimensions is not implemented in vanilla. Vanilla game only loads dimension information on server start. create_datapack is therefore a direct replacement of manually ploping of the specified file structure in a datapack file and calling /datapack enable on the new datapack with all its quirks and sideeffects (like no worldgen changes, reloading all other datapacks, etc.). To enable newly added custom dimensions, call much more experimental enable_hidden_dimensions() after adding a datapack if needed.\\nExamples create_datapack('foo', { 'foo' -> { 'bar.json' -> { 'c' -> true, 'd' -> false, 'e' -> { 'foo' -> [1, 2, 3], }, 'a' -> 'foobar', 'b' -> 5, }, }, }); Custom dimension example:\\n// 1.17 create_datapack('funky_world', { 'data' -> { 'minecraft' -> { 'dimension' -> { 'custom_ow.json' -> { 'type' -> 'minecraft:the_end', 'generator' -> { 'biome_source' -> { 'seed' -> 0, 'large_biomes' -> false, 'type' -> 'minecraft:vanilla_layered' }, 'seed' -> 0, 'settings' -> 'minecraft:nether', 'type' -> 'minecraft:noise' } } } } } }); // 1.18 a() -> create_datapack('funky_world', { 'data' -> { 'minecraft' -> { 'dimension' -> { 'custom_ow.json' -> { 'type' -> 'minecraft:overworld', 'generator' -> { 'biome_source' -> { 'biomes' -> [ { 'parameters' -> { 'erosion' -> [-1.0,1.0], 'depth' -> 0.0, 'weirdness' -> [-1.0,1.0], 'offset' -> 0.0, 'temperature' -> [-1.0,1.0], 'humidity' -> [-1.0,1.0], 'continentalness' -> [ -1.2,-1.05] }, 'biome' -> 'minecraft:mushroom_fields' } ], 'type' -> 'minecraft:multi_noise' }, 'seed' -> 0, 'settings' -> 'minecraft:overworld', 'type' -> 'minecraft:noise' } } } } } }); enable_hidden_dimensions(); Loot table example:\\nscript run create_datapack('silverfishes_drop_gravel', { 'data' -> { 'minecraft' -> { 'loot_tables' -> { 'entities' -> { 'silverfish.json' -> { 'type' -> 'minecraft:entity', 'pools' -> [ { 'rolls' -> { 'min' -> 0, 'max' -> 1 }, 'entries' -> [ { 'type' -> 'minecraft:item', 'name' -> 'minecraft:gravel' } ] } ] } } } } } }); Recipe example:\\nscript run create_datapack('craftable_cobwebs', { 'data' -> { 'scarpet' -> { 'recipes' -> { 'cobweb.json' -> { 'type' -> 'crafting_shaped', 'pattern' -> [ 'SSS', 'SSS', 'SSS' ], 'key' -> { 'S' -> { 'item' -> 'minecraft:string' } }, 'result' -> { 'item' -> 'minecraft:cobweb', 'count' -> 1 } } } } } }); Function example:\\nscript run create_datapack('example',{'data/test/functions/talk.mcfunction'->'say 1\\\\nsay 2'}) \",\"signatures\":[{\"params\":[{\"name\":\"name\"},{\"name\":\"data\"}]}]},\"create_explosion\":{\"markdown\":\"Creates an explosion at the given position.\\n\\n### Parameters\\n\\n- `power` --- how strong the blast is, negative values count as 0 (default: `4`\\n  (TNT power))\\n- `mode` --- how to deal with broken blocks: `keep` keeps them, `destroy`\\n  destroys them and drops items, and `destroy_with_decay` destroys them, but\\n  doesn't always drop the items (default: `destroy_with_decay`)\\n- `fire` --- whether extra fire blocks should be created (default: `false`)\\n- `source` --- entity that is exploding. Note that it will not take explosion\\n  damage from this explosion (default: `null`)\\n- `attacker` --- entity responsible for triggering, this will be displayed in\\n  death messages, and count towards kill counts, and can be damaged by the\\n  explosion (default: `null`)\\n\\nExplosions created with this endpoint cannot be captured with `__on_explosion`\\nevent, however they will be captured by `__on_explosion_outcome`.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/create_explosion/\",\"plain\":\"Creates an explosion at the given position.\\nParameters power — how strong the blast is, negative values count as 0 (default: 4 (TNT power)) mode — how to deal with broken blocks: keep keeps them, destroy destroys them and drops items, and destroy_with_decay destroys them, but doesn’t always drop the items (default: destroy_with_decay) fire — whether extra fire blocks should be created (default: false) source — entity that is exploding. Note that it will not take explosion damage from this explosion (default: null) attacker — entity responsible for triggering, this will be displayed in death messages, and count towards kill counts, and can be damaged by the explosion (default: null) Explosions created with this endpoint cannot be captured with __on_explosion event, however they will be captured by __on_explosion_outcome.\",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]},{\"params\":[{\"name\":\"pos\"},{\"name\":\"power\"}]},{\"params\":[{\"name\":\"pos\"},{\"name\":\"power\"},{\"name\":\"mode\"}]},{\"params\":[{\"name\":\"pos\"},{\"name\":\"power\"},{\"name\":\"mode\"},{\"name\":\"fire\"}]},{\"params\":[{\"name\":\"pos\"},{\"name\":\"power\"},{\"name\":\"mode\"},{\"name\":\"fire\"},{\"name\":\"source\"}]},{\"params\":[{\"name\":\"pos\"},{\"name\":\"power\"},{\"name\":\"mode\"},{\"name\":\"fire\"},{\"name\":\"source\"},{\"name\":\"attacker\"}]}]},\"create_marker\":{\"markdown\":\"Spawns a (permanent) marker entity with text or block at position. Returns that\\nentity for further manipulations. Unloading the app that spawned them will cause\\nall the markers from the loaded portion of the world to be removed. Also, if the\\ngame loads that marker in the future and the app is not loaded, it will be\\nremoved as well.\\n\\nIf `interactive` (`true` by default) is `false`, the armorstand will be a marker\\nand would not be interactive in any gamemode. But blocks can be placed inside\\nmarkers and will not catch any interaction events.\\n\\nY Position of a marker text or block will be adjusted to make blocks or text\\nappear at the specified position. This makes so that actual armorstand position\\nmay be offset on Y axis. You would need to adjust your entity locations if you\\nplan to move the armorstand around after the fact. If both text and block are\\nspecified - one of them will be aligned (armorstand type markers text shows up\\nat their feet, while for regular armorstands - above the head, while block on\\nthe head always render in the same position regardless if its a marker or not).\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/create_marker/\",\"plain\":\"Spawns a (permanent) marker entity with text or block at position. Returns that entity for further manipulations. Unloading the app that spawned them will cause all the markers from the loaded portion of the world to be removed. Also, if the game loads that marker in the future and the app is not loaded, it will be removed as well.\\nIf interactive (true by default) is false, the armorstand will be a marker and would not be interactive in any gamemode. But blocks can be placed inside markers and will not catch any interaction events.\\nY Position of a marker text or block will be adjusted to make blocks or text appear at the specified position. This makes so that actual armorstand position may be offset on Y axis. You would need to adjust your entity locations if you plan to move the armorstand around after the fact. If both text and block are specified - one of them will be aligned (armorstand type markers text shows up at their feet, while for regular armorstands - above the head, while block on the head always render in the same position regardless if its a marker or not).\",\"signatures\":[{\"params\":[{\"name\":\"text\"},{\"name\":\"pos\"},{\"name\":\"rotation\"},{\"name\":\"block\"},{\"name\":\"interactive\"}]}]},\"create_screen\":{\"markdown\":\"Creates and opens a screen for a `player`.\\n\\nAvailable `type`s:\\n\\n- `anvil`\\n- `beacon`\\n- `blast_furnace`\\n- `brewing_stand`\\n- `cartography_table`\\n- `crafting`\\n- `enchantment`\\n- `furnace`\\n- `generic_3x3`\\n- `generic_9x1`\\n- `generic_9x2`\\n- `generic_9x3`\\n- `generic_9x4`\\n- `generic_9x5`\\n- `generic_9x6`\\n- `grindstone`\\n- `hopper`\\n- `lectern`\\n- `loom`\\n- `merchant`\\n- `shulker_box`\\n- `smithing`\\n- `smoker`\\n- `stonecutter`\\n\\nThe `name` parameter can be a formatted text and will be displayed at the top of\\nthe screen. Some screens like the lectern or beacon screen don't show it.\\n\\nOptionally, a `callback` function can be passed as the fourth argument. This\\nfunctions needs to have four parameters:\\n`_(screen, player, action, data) -> ...`\\n\\nThe `screen` parameter is the screen value of the screen itself. `player` is the\\nplayer who interacted with the screen. `action` is a string corresponding to the\\ninteraction type. Can be any of the following:\\n\\nSlot interactions:\\n\\n- `pickup`\\n- `quick_move`\\n- `swap`\\n- `clone`\\n- `throw`\\n- `quick_craft`\\n- `pickup_all`\\n\\nThe `data` for this interaction is a map, with a `slot` and `button` value.\\n`slot` is the slot index of the slot that was clicked. When holding an item in\\nthe cursor stack and clicking inside the screen, but not in a slot, this is -1.\\nIf clicked outside the screen (where it would drop held items), this value is\\nnull. The `button` is the mouse button used to click the slot.\\n\\nFor the `swap` action, the `button` is the number key 0-8 for a certain hotbar\\nslot.\\n\\nFor the `quick_craft` action, the `data` also contains the `quick_craft_stage`,\\nwhich is either 0 (beginning of quick crafting), 1 (adding item to slot) or 2\\n(end of quick crafting).\\n\\nOther interactions:\\n\\n- `button` Pressing a button in certain screens that have button elements\\n  (enchantment table, lectern, loom and stonecutter) The `data` provides a\\n  `button`, which is the index of the button that was pressed. Note that for\\n  lecterns, this index can be certain a value above 100, for jumping to a\\n  certain page. This can come from formatted text inside the book, with a\\n  `change_page` click event action.\\n\\n- `close` Triggers when the screen gets closed. No `data` provided.\\n\\n- `select_recipe` When clicking on a recipe in the recipe book. `data` contains\\n  a `recipe`, which is the identifier of the clicked recipe, as well as\\n  `craft_all`, which is a boolean specifying whether shift was pressed when\\n  selecting the recipe.\\n\\n- `slot_update` Gets called **after** a slot has changed contents. `data`\\n  provides a `slot` and `stack`.\\n\\nBy returning a string `'cancel'` in the callback function, the screen\\ninteraction can be cancelled. This doesn't work for the `close` action.\\n\\nThe `create_screen` function returns a `screen` value, which can be used in all\\ninventory related functions to access the screens' slots. The screen inventory\\ncovers all slots in the screen and the player inventory. The last slot is the\\ncursor stack of the screen, meaning that using `-1` can be used to modify the\\nstack the players' cursor is holding.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/inventory/create_screen/\",\"plain\":\"Creates and opens a screen for a player.\\nAvailable types:\\nanvil beacon blast_furnace brewing_stand cartography_table crafting enchantment furnace generic_3x3 generic_9x1 generic_9x2 generic_9x3 generic_9x4 generic_9x5 generic_9x6 grindstone hopper lectern loom merchant shulker_box smithing smoker stonecutter The name parameter can be a formatted text and will be displayed at the top of the screen. Some screens like the lectern or beacon screen don’t show it.\\nOptionally, a callback function can be passed as the fourth argument. This functions needs to have four parameters: _(screen, player, action, data) -> ...\\nThe screen parameter is the screen value of the screen itself. player is the player who interacted with the screen. action is a string corresponding to the interaction type. Can be any of the following:\\nSlot interactions:\\npickup quick_move swap clone throw quick_craft pickup_all The data for this interaction is a map, with a slot and button value. slot is the slot index of the slot that was clicked. When holding an item in the cursor stack and clicking inside the screen, but not in a slot, this is -1. If clicked outside the screen (where it would drop held items), this value is null. The button is the mouse button used to click the slot.\\nFor the swap action, the button is the number key 0-8 for a certain hotbar slot.\\nFor the quick_craft action, the data also contains the quick_craft_stage, which is either 0 (beginning of quick crafting), 1 (adding item to slot) or 2 (end of quick crafting).\\nOther interactions:\\nbutton Pressing a button in certain screens that have button elements (enchantment table, lectern, loom and stonecutter) The data provides a button, which is the index of the button that was pressed. Note that for lecterns, this index can be certain a value above 100, for jumping to a certain page. This can come from formatted text inside the book, with a change_page click event action.\\nclose Triggers when the screen gets closed. No data provided.\\nselect_recipe When clicking on a recipe in the recipe book. data contains a recipe, which is the identifier of the clicked recipe, as well as craft_all, which is a boolean specifying whether shift was pressed when selecting the recipe.\\nslot_update Gets called after a slot has changed contents. data provides a slot and stack.\\nBy returning a string 'cancel' in the callback function, the screen interaction can be cancelled. This doesn’t work for the close action.\\nThe create_screen function returns a screen value, which can be used in all inventory related functions to access the screens’ slots. The screen inventory covers all slots in the screen and the player inventory. The last slot is the cursor stack of the screen, meaning that using -1 can be used to modify the stack the players’ cursor is holding.\",\"signatures\":[{\"params\":[{\"name\":\"player\"},{\"name\":\"type\"},{\"name\":\"name\"},{\"name\":\"callback\"}]}]},\"csc\":{\"markdown\":\"Returns the cosecant of an angle in **degrees**.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/csc/\",\"plain\":\"Returns the cosecant of an angle in degrees.\",\"signatures\":[{\"params\":[{\"name\":\"x\"}]}]},\"csch\":{\"markdown\":\"Returns the hyperbolic cosecant of a number.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/csch/\",\"plain\":\"Returns the hyperbolic cosecant of a number.\",\"signatures\":[{\"params\":[{\"name\":\"x\"}]}]},\"current_dimension\":{\"markdown\":\"Returns current dimension that the script runs in.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/current_dimension/\",\"plain\":\"Returns current dimension that the script runs in.\",\"signatures\":[{\"params\":[]}]},\"day_time\":{\"markdown\":\"Returns current daytime clock value. If `new_time` is specified, sets a new\\nclock to that value. Daytime clocks are shared between all dimensions.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/day_time/\",\"plain\":\"Returns current daytime clock value. If new_time is specified, sets a new clock to that value. Daytime clocks are shared between all dimensions.\",\"signatures\":[{\"params\":[{\"name\":\"new_time\"}]}]},\"decode_b64\":{\"markdown\":\"Decode a string from base 64, throwing a `b64_error` exception if it's invalid.\",\"permalink\":\"https://scarpet.pages.dev/builtins/functions/decode_b64/\",\"plain\":\"Decode a string from base 64, throwing a b64_error exception if it’s invalid.\",\"signatures\":[{\"params\":[{\"name\":\"string\"}]}]},\"decode_json\":{\"markdown\":\"Decodes a json string as a valid value or throws a `json_error` exception if it\\ndoesn't parse properly.\",\"permalink\":\"https://scarpet.pages.dev/builtins/functions/decode_json/\",\"plain\":\"Decodes a json string as a valid value or throws a json_error exception if it doesn’t parse properly.\",\"signatures\":[{\"params\":[{\"name\":\"string\"}]}]},\"decreasing\":{\"permalink\":\"https://scarpet.pages.dev/syntax/operators/decreasing/\",\"signatures\":[{\"params\":[{\"name\":\"x\"},{\"name\":\"y\"}]}]},\"deg\":{\"markdown\":\"Returns a number converted from **radians** to **degrees**.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/deg/\",\"plain\":\"Returns a number converted from radians to degrees.\",\"signatures\":[{\"params\":[{\"name\":\"rad\"}]}]},\"delete\":{\"markdown\":\"Removes a specific entry from the container.\\n\\n## Lists\\n\\nFor lists it removes the element and shrinks it.\\n\\n## Maps\\n\\nFor maps, it removes the key from the map.\\n\\n## NBT\\n\\nFor NBT removes content from a given path.\\n\\nLike with the `get` and `has`, `delete` can accept chained addresses, as well as\\nl-value container access, removing the value from the leaf of the path provided,\\nso `delete(foo, a, b)` is the same as `delete(get(foo,a),b)` or\\n`delete(foo:a:b)`\\n\\n## Parameters\\n\\n## Returns\\n\\nReturns true, if container was changed, false, if it was left unchanged, and\\nnull if operation was invalid.\",\"permalink\":\"https://scarpet.pages.dev/builtins/containers/delete/\",\"plain\":\"Removes a specific entry from the container.\\nLists For lists it removes the element and shrinks it.\\nMaps For maps, it removes the key from the map.\\nNBT For NBT removes content from a given path.\\nLike with the get and has, delete can accept chained addresses, as well as l-value container access, removing the value from the leaf of the path provided, so delete(foo, a, b) is the same as delete(get(foo,a),b) or delete(foo:a:b)\\nParameters Returns Returns true, if container was changed, false, if it was left unchanged, and null if operation was invalid.\",\"signatures\":[{\"params\":[{\"name\":\"container\"},{\"name\":\"address\"},{\"name\":\"addresses\",\"rest\":true}]},{\"params\":[{\"name\":\"lvalue\"}]}]},\"delete_file\":{\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/delete_file/\",\"signatures\":[{\"params\":[{\"name\":\"resource\"},{\"name\":\"type\"}]}]},\"destroy\":{\"markdown\":\"Destroys the block like it was mined by a player. Add -1 for silk touch, and a\\npositive number for fortune level. If tool is specified, and optionally its nbt,\\nit will use that tool and will attempt to mine the block with this tool. If\\ncalled without item context, this function, unlike harvest, will affect all\\nkinds of blocks. If called with item in context, it will fail to break blocks\\nthat cannot be broken by a survival player.\\n\\nWithout item context it returns `false` if failed to destroy the block and\\n`true` if block breaking was successful. In item context, `true` means that\\nbreaking item has no nbt to use, `null` indicating that the tool should be\\nconsidered broken in process, and `nbt` type value, for a resulting NBT tag on a\\nhypothetical tool. Its up to the programmer to use that nbt to apply it where it\\nbelong\\n\\nThrows `unknown_item` if `tool` doesn't exist.\\n\\nHere is a sample code that can be used to mine blocks using items in player\\ninventory, without using player context for mining. Obviously, in this case the\\nuse of `harvest` would be much more applicable:\\n\\n```scarpet\\nmine(x,y,z) ->\\n(\\n  p = player();\\n  slot = p~'selected_slot';\\n  item_tuple = inventory_get(p, slot);\\n  if (!item_tuple, destroy(x,y,z,'air'); return()); // empty hand, just break with 'air'\\n  [item, count, tag] = item_tuple;\\n  tag_back = destroy(x,y,z, item, tag);\\n  if (tag_back == false, // failed to break the item\\n    return(tag_back)\\n  );\\n  if (tag_back == true, // block broke, tool has no tag\\n    return(tag_back)\\n  );\\n  if (tag_back == null, //item broke\\n    delete(tag:'Damage');\\n    inventory_set(p, slot, count-1, item, tag);\\n    return(tag_back)\\n  );\\n  if (type(tag_back) == 'nbt', // item didn't break, here is the effective nbt\\n    inventory_set(p, slot, count, item, tag_back);\\n    return(tag_back)\\n  );\\n  print('How did we get here?');\\n)\\n```\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/destroy/\",\"plain\":\"Destroys the block like it was mined by a player. Add -1 for silk touch, and a positive number for fortune level. If tool is specified, and optionally its nbt, it will use that tool and will attempt to mine the block with this tool. If called without item context, this function, unlike harvest, will affect all kinds of blocks. If called with item in context, it will fail to break blocks that cannot be broken by a survival player.\\nWithout item context it returns false if failed to destroy the block and true if block breaking was successful. In item context, true means that breaking item has no nbt to use, null indicating that the tool should be considered broken in process, and nbt type value, for a resulting NBT tag on a hypothetical tool. Its up to the programmer to use that nbt to apply it where it belong\\nThrows unknown_item if tool doesn’t exist.\\nHere is a sample code that can be used to mine blocks using items in player inventory, without using player context for mining. Obviously, in this case the use of harvest would be much more applicable:\\nmine(x,y,z) -> ( p = player(); slot = p~'selected_slot'; item_tuple = inventory_get(p, slot); if (!item_tuple, destroy(x,y,z,'air'); return()); // empty hand, just break with 'air' [item, count, tag] = item_tuple; tag_back = destroy(x,y,z, item, tag); if (tag_back == false, // failed to break the item return(tag_back) ); if (tag_back == true, // block broke, tool has no tag return(tag_back) ); if (tag_back == null, //item broke delete(tag:'Damage'); inventory_set(p, slot, count-1, item, tag); return(tag_back) ); if (type(tag_back) == 'nbt', // item didn't break, here is the effective nbt inventory_set(p, slot, count, item, tag_back); return(tag_back) ); print('How did we get here?'); ) \",\"signatures\":[{\"params\":[{\"name\":\"pos\"},{\"name\":\"destroypos\"},{\"name\":\"1\"},{\"name\":\"destroypos\"},{\"name\":\"N\"},{\"name\":\"destroypos\"},{\"name\":\"tool\"},{\"name\":\"nbt\"}]}]},\"difference\":{\"permalink\":\"https://scarpet.pages.dev/syntax/operators/difference/\",\"signatures\":[{\"params\":[{\"name\":\"args\",\"rest\":true}]}]},\"display_title\":{\"markdown\":\"Changes the header or footer of the player list for the specified targets. If\\n`text` is `null` or an empty string it will remove the header or footer for the\\nspecified targets. In case the player has Carpet loggers running, the footer\\nspecified by Scarpet will appear above the loggers.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/display_title/\",\"plain\":\"Changes the header or footer of the player list for the specified targets. If text is null or an empty string it will remove the header or footer for the specified targets. In case the player has Carpet loggers running, the footer specified by Scarpet will appear above the loggers.\",\"signatures\":[{\"params\":[{\"name\":\"players\"},{\"name\":\"player_list_footer\"},{\"name\":\"text\"}]}]},\"draw_shape\":{\"markdown\":\"Draws a shape in the world that will expire in `duration` ticks. Other\\nattributes of the shape should be provided as consecutive key - value argument\\npairs, either as next arguments, or packed in a list, or supplied as a proper\\nkey-value `map`. Arguments may include shared shape attributes, which are all\\noptional, as well as shape-specific attributes, that could be either optional or\\nrequired. Shapes will draw properly on all carpet clients. Other connected\\nplayers that don't have carpet installed will still be able to see the required\\nshapes in the form of dust particles. Replacement shapes are not required to\\nfollow all attributes precisely, but will allow vanilla clients to receive some\\nexperience of your apps. One of the attributes that will definitely not be\\nhonored is the duration - particles will be send once per shape and last\\nwhatever they typically last in the game.\\n\\nShapes can be send one by one, using either of the first three invocations, or\\nbatched as a list of shape descriptors. Batching has this benefit that they will\\nbe send possibly as one packet, limiting network overhead of sending many small\\npackets to draw several shapes at once. The drawback of sending shapes is\\nbatches is that they need to address the same list of players, i.e. if multiple\\nplayers from the list target different players, all shapes will be sent to all\\nof them.\\n\\nShapes will fail to draw and raise a runtime error if not all its required\\nparameters are specified and all available shapes have some parameters that are\\nrequired, so make sure to have them in place:\\n\\nOn the client, shapes can recognize that they are being redrawn again with the\\nsame parameters, disregarding the duration parameter. This updates the expiry on\\nthe drawn shape to the new value, instead of adding new shape in its place. This\\ncan be used for toggling the shapes on and off that has been send previously\\nwith very large durations, or simply refresh the shapes periodically in more\\ndynamic applications.\\n\\nOptional shared shape attributes:\\n\\n- `color` - integer value indicating the main color of the shape in the form of\\n  red, green, blue and alpha components in the form of `0xRRGGBBAA`, with the\\n  default of `-1`, so white opaque, or `0xFFFFFFFF`.\\n- `player` - name or player entity to send the shape to, or a list of players.\\n  If specified, the shapes will appear only for the specified players\\n  (regardless where they are), otherwise it will be send to all players in the\\n  current dimension.\\n- `line` - (Deprecated) line thickness, defaults to 2.0pt. Not supported in\\n  1.17's 3.2 core GL renderer.\\n- `fill` - color for the faces, defaults to no fill. Use `color` attribute\\n  format\\n- `follow` - entity, or player name. Shape will follow an entity instead of\\n  being static. Follow attribute requires all positional arguments to be\\n  relative to the entity and disallow of using entity or block as position\\n  markers. You must specify positions as a triple.\\n- `snap` - if `follow` is present, indicated on which axis the snapping to\\n  entity coordinates occurs, and which axis will be treated statically, i.e. the\\n  coordinate passed in a coord triple is the actual value in the world. Default\\n  value is `'xyz'`, meaning the shape will be drawn relatively to the entity in\\n  all three directions. Using `xz` for instance makes so that the shape follows\\n  the entity, but stays at the same, absolute Y coordinate. Preceeding an axis\\n  with `d`, like `dxdydz` would make so that entity position is treated\\n  discretely (rounded down).\\n- `debug` - if True, it will only be visible when F3+B entity bounding boxes is\\n  enabled.\\n- `facing` - applicable only to `'text'`, `'block'` or '`item'` shapes, where\\n  its facing. Possible options are:\\n  - `player`: Default. Element always rotates to face the player eye position,\\n  - `camera`: Element is placed on the plane orthogonal to player look vector,\\n  - `north`, `south`, `east`, `west`, `up`, `down`: obvious\\n\\nAvailable shapes:\\n\\n- `'line'` - draws a straight line between two points.\\n\\n  - Required attributes:\\n    - `from` - triple coordinates, entity, or block value indicating one end of\\n      the line\\n    - `to` - other end of the line, same format as `from`\\n\\n- `'box'` - draws a box with corners in specified points\\n\\n  - Required attributes:\\n    - `from` - triple coordinates, entity, or block value indicating one corner\\n      of the box\\n    - `to` - other corner, same format as `from`\\n\\n- `'sphere'`:\\n\\n  - Required attributes:\\n    - `center` - center of the sphere\\n    - `radius` - radius of the sphere\\n  - Optional attributes:\\n    - `level` - level of details, or grid size. The more the denser your sphere.\\n      Default level of 0, means that the level of detail will be selected\\n      automatically based on radius.\\n\\n- `'cylinder'`:\\n\\n  - Required attributes:\\n    - `center` - center of the base\\n    - `radius` - radius of the base circle\\n  - Optional attributes:\\n    - `axis` - cylinder direction, one of `'x'`, `'y'`, `'z'` defaults to `'y'`\\n    - `height` - height of the cyllinder, defaults to `0`, so flat disk. Can be\\n      negative.\\n    - `level` - level of details, see `'sphere'`.\\n\\n- `'polygon'`:\\n\\n  - Required attributes:\\n    - `points` - list of points defining vertices of the polygon\\n  - Optional attributes:\\n    - `relative` - list of bools. vertices of the polygon that affected by\\n      'follow'. Could be a single bools to affact allpoints too. Default means\\n      that every point is affacted.\\n    - `mode` - how those points are connected. may be \\\"polygon\\\"(default),\\\"strip\\\"\\n      or \\\"triangles\\\". \\\"polygon\\\" means that it will be viewed as vertices of a\\n      polygon center on the first one. \\\"strip\\\" means that it will be viewed as a\\n      triangles strip. \\\"triangles\\\" means that it will be viewed as some\\n      triangles that are not related to each other (therefor length of `points`\\n      in this mode have to be a multiple of 3).\\n    - `inner` - if `true` it will make the inner edges be drawn as well.\\n    - `doublesided` - if `true` it will make the shapes visible from the back as\\n      well. Default is `true`.\\n\\n- `'label'` - draws a text in the world. Default `line` attribute controls main\\n  font color. `fill` controls the color of the background.\\n\\n  - Required attributes:\\n    - `pos` - position\\n    - `text` - string or formatted text to display\\n  - Optional attributes\\n    - `value` - string or formatted text to display instead of the main `text`.\\n      `value` unlike `text` is not used to determine uniqueness of the drawn\\n      text so can be used to display smoothly dynamic elements where value of an\\n      element is constantly changing and updates to it are being sent from the\\n      server.\\n    - `size` - float. Default font size is 10.\\n    - `doublesided` - if `true` it will make the text visible from the back as\\n      well. Default is `false` (1.16+)\\n    - `align` - text alignment with regards to `pos`. Default is `center`\\n      (displayed text is centered with respect to `pos`), `left` (`pos`\\n      indicates beginning of text), and `right` (`pos` indicates the end of\\n      text).\\n    - `tilt`, `lean`, `turn` - additional rotations of the text on the canvas\\n      along all three axis\\n    - `indent`, `height`, `raise` - offsets for text rendering on X (`indent`),\\n      Y (`height`), and Z axis (`raise`) with regards to the plane of the text.\\n      One unit of these corresponds to 1 line spacing, which can be used to\\n      display multiple lines of text bound to the same `pos`\\n\\n- `'block'`: draws a block at the specified position:\\n\\n  - Required attributes:\\n    - `pos` - position of the object.\\n    - `block` - the object to show. It is a block value or a name of a block\\n      with optional NBT data.\\n  - Optional attributes:\\n    - `tilt`, `lean`, `turn` - additional rotations along all three axis. It\\n      uses the block center as the origin.\\n    - `scale` - scale of it in 3 axis-direction. should be a number or a list of\\n      3 numbers (x,y,z).\\n    - `skylight`, `blocklight` - light level. omit it to use local light level.\\n      should between 0~15.\\n\\n- `'item'`: draws an item at the specified position:\\n  - Required attributes:\\n    - `pos` - position of the object.\\n    - `item` - the object to show. It is an item tuple or a string identified\\n      item that may have NBT data.\\n  - Optional attributes:\\n    - `tilt`, `lean`, `turn` - additional rotations along all three axis. for\\n      `block`, it use its block center as the origin.\\n    - `scale` - scale of it in 3 axis-direction. should be a number or a list of\\n      3 numbers (x,y,z).\\n    - `skylight`, `blocklight` - light level. omit it to use local light level.\\n      should between 0~15.\\n    - `variant` - one of `'none'`, `'thirdperson_lefthand'`,\\n      `'thirdperson_righthand'`, `'firstperson_lefthand'`,\\n      `'firstperson_righthand'`, `'head'`, `'gui'`, `'ground'`, `'fixed'`. In\\n      addition to the literal meaning, it can also be used to use special models\\n      of tridents and telescopes. This attribute is experimental and use of it\\n      will change in the future.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/draw_shape/\",\"plain\":\"Draws a shape in the world that will expire in duration ticks. Other attributes of the shape should be provided as consecutive key - value argument pairs, either as next arguments, or packed in a list, or supplied as a proper key-value map. Arguments may include shared shape attributes, which are all optional, as well as shape-specific attributes, that could be either optional or required. Shapes will draw properly on all carpet clients. Other connected players that don’t have carpet installed will still be able to see the required shapes in the form of dust particles. Replacement shapes are not required to follow all attributes precisely, but will allow vanilla clients to receive some experience of your apps. One of the attributes that will definitely not be honored is the duration - particles will be send once per shape and last whatever they typically last in the game.\\nShapes can be send one by one, using either of the first three invocations, or batched as a list of shape descriptors. Batching has this benefit that they will be send possibly as one packet, limiting network overhead of sending many small packets to draw several shapes at once. The drawback of sending shapes is batches is that they need to address the same list of players, i.e. if multiple players from the list target different players, all shapes will be sent to all of them.\\nShapes will fail to draw and raise a runtime error if not all its required parameters are specified and all available shapes have some parameters that are required, so make sure to have them in place:\\nOn the client, shapes can recognize that they are being redrawn again with the same parameters, disregarding the duration parameter. This updates the expiry on the drawn shape to the new value, instead of adding new shape in its place. This can be used for toggling the shapes on and off that has been send previously with very large durations, or simply refresh the shapes periodically in more dynamic applications.\\nOptional shared shape attributes:\\ncolor - integer value indicating the main color of the shape in the form of red, green, blue and alpha components in the form of 0xRRGGBBAA, with the default of -1, so white opaque, or 0xFFFFFFFF. player - name or player entity to send the shape to, or a list of players. If specified, the shapes will appear only for the specified players (regardless where they are), otherwise it will be send to all players in the current dimension. line - (Deprecated) line thickness, defaults to 2.0pt. Not supported in 1.17’s 3.2 core GL renderer. fill - color for the faces, defaults to no fill. Use color attribute format follow - entity, or player name. Shape will follow an entity instead of being static. Follow attribute requires all positional arguments to be relative to the entity and disallow of using entity or block as position markers. You must specify positions as a triple. snap - if follow is present, indicated on which axis the snapping to entity coordinates occurs, and which axis will be treated statically, i.e. the coordinate passed in a coord triple is the actual value in the world. Default value is 'xyz', meaning the shape will be drawn relatively to the entity in all three directions. Using xz for instance makes so that the shape follows the entity, but stays at the same, absolute Y coordinate. Preceeding an axis with d, like dxdydz would make so that entity position is treated discretely (rounded down). debug - if True, it will only be visible when F3+B entity bounding boxes is enabled. facing - applicable only to 'text', 'block' or ‘item' shapes, where its facing. Possible options are: player: Default. Element always rotates to face the player eye position, camera: Element is placed on the plane orthogonal to player look vector, north, south, east, west, up, down: obvious Available shapes:\\n'line' - draws a straight line between two points.\\nRequired attributes: from - triple coordinates, entity, or block value indicating one end of the line to - other end of the line, same format as from 'box' - draws a box with corners in specified points\\nRequired attributes: from - triple coordinates, entity, or block value indicating one corner of the box to - other corner, same format as from 'sphere':\\nRequired attributes: center - center of the sphere radius - radius of the sphere Optional attributes: level - level of details, or grid size. The more the denser your sphere. Default level of 0, means that the level of detail will be selected automatically based on radius. 'cylinder':\\nRequired attributes: center - center of the base radius - radius of the base circle Optional attributes: axis - cylinder direction, one of 'x', 'y', 'z' defaults to 'y' height - height of the cyllinder, defaults to 0, so flat disk. Can be negative. level - level of details, see 'sphere'. 'polygon':\\nRequired attributes: points - list of points defining vertices of the polygon Optional attributes: relative - list of bools. vertices of the polygon that affected by ‘follow’. Could be a single bools to affact allpoints too. Default means that every point is affacted. mode - how those points are connected. may be “polygon”(default),“strip” or “triangles”. “polygon” means that it will be viewed as vertices of a polygon center on the first one. “strip” means that it will be viewed as a triangles strip. “triangles” means that it will be viewed as some triangles that are not related to each other (therefor length of points in this mode have to be a multiple of 3). inner - if true it will make the inner edges be drawn as well. doublesided - if true it will make the shapes visible from the back as well. Default is true. 'label' - draws a text in the world. Default line attribute controls main font color. fill controls the color of the background.\\nRequired attributes: pos - position text - string or formatted text to display Optional attributes value - string or formatted text to display instead of the main text. value unlike text is not used to determine uniqueness of the drawn text so can be used to display smoothly dynamic elements where value of an element is constantly changing and updates to it are being sent from the server. size - float. Default font size is 10. doublesided - if true it will make the text visible from the back as well. Default is false (1.16+) align - text alignment with regards to pos. Default is center (displayed text is centered with respect to pos), left (pos indicates beginning of text), and right (pos indicates the end of text). tilt, lean, turn - additional rotations of the text on the canvas along all three axis indent, height, raise - offsets for text rendering on X (indent), Y (height), and Z axis (raise) with regards to the plane of the text. One unit of these corresponds to 1 line spacing, which can be used to display multiple lines of text bound to the same pos 'block': draws a block at the specified position:\\nRequired attributes: pos - position of the object. block - the object to show. It is a block value or a name of a block with optional NBT data. Optional attributes: tilt, lean, turn - additional rotations along all three axis. It uses the block center as the origin. scale - scale of it in 3 axis-direction. should be a number or a list of 3 numbers (x,y,z). skylight, blocklight - light level. omit it to use local light level. should between 0~15. 'item': draws an item at the specified position:\\nRequired attributes: pos - position of the object. item - the object to show. It is an item tuple or a string identified item that may have NBT data. Optional attributes: tilt, lean, turn - additional rotations along all three axis. for block, it use its block center as the origin. scale - scale of it in 3 axis-direction. should be a number or a list of 3 numbers (x,y,z). skylight, blocklight - light level. omit it to use local light level. should between 0~15. variant - one of 'none', 'thirdperson_lefthand', 'thirdperson_righthand', 'firstperson_lefthand', 'firstperson_righthand', 'head', 'gui', 'ground', 'fixed'. In addition to the literal meaning, it can also be used to use special models of tridents and telescopes. This attribute is experimental and use of it will change in the future. \",\"signatures\":[{\"params\":[{\"name\":\"shape\"},{\"name\":\"duration\"},{\"name\":\"attributes\",\"rest\":true}]},{\"params\":[{\"name\":\"shape\"},{\"name\":\"duration\"},{\"name\":\"attributes\"}]},{\"params\":[{\"name\":\"shapes\"}]}]},\"drop_item\":{\"markdown\":\"Drops the items from indicated inventory slot, like player that Q's an item or\\nvillager, that exchanges food. You can Q items from block inventories as well.\\ndefault amount is 0 - which is all from the slot. NOTE: hoppers are quick enough\\nto pick all the queued items from their inventory anyways. Returns size of the\\nactual dropped items.\\n\\n```scarpet\\ninventory_drop(player(), 0, 1); // 1 Q's one item on the ground\\ninventory_drop(x,y,z, 0); // 64 removed and spawned in the world a full stack of items\\n```\",\"permalink\":\"https://scarpet.pages.dev/minecraft/inventory/drop_item/\",\"plain\":\"Drops the items from indicated inventory slot, like player that Q’s an item or villager, that exchanges food. You can Q items from block inventories as well. default amount is 0 - which is all from the slot. NOTE: hoppers are quick enough to pick all the queued items from their inventory anyways. Returns size of the actual dropped items.\\ninventory_drop(player(), 0, 1); // 1 Q's one item on the ground inventory_drop(x,y,z, 0); // 64 removed and spawned in the world a full stack of items \",\"signatures\":[{\"params\":[{\"name\":\"inventory\"},{\"name\":\"slot\"},{\"name\":\"amount\"}]}]},\"effective_light\":{\"markdown\":\"Numeric function, returning the \\\"real\\\" light at position, which is affected by\\ntime and weather. which also affects mobs spawning, frosted ice blocks melting.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/effective_light/\",\"plain\":\"Numeric function, returning the “real” light at position, which is affected by time and weather. which also affects mobs spawning, frosted ice blocks melting.\",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"emitted_light\":{\"markdown\":\"Numeric function, returning the light level emitted from the block.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/emitted_light/\",\"plain\":\"Numeric function, returning the light level emitted from the block.\",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"enable_hidden_dimensions\":{\"markdown\":\"(1.18.1 and lower)\\n\\nThe function reads current datapack settings detecting new dimensions defined by\\nthese datapacks that have not yet been added to the list of current dimensions\\nand adds them so that they can be used and accessed right away. It doesn't\\nmatter how the datapacks have been added to the game, either with\\n`create_datapack()` or manually by dropping a datapack file and calling\\n`/datapack enable` on it. Returns the list of valid dimension names /\\nidentifiers that has been added in the process.\\n\\nFine print: The function should be considered experimental. For example: is not\\nsupposed to work at all in vanilla, and its doing exactly that in 1.18.2+. There\\n'should not be' (famous last words) any side-effects if no worlds are added.\\nAlready connected clients will not see suggestions for commands that use\\ndimensions `/execute in <dim>` (vanilla client limitation) but all commands\\nshould work just fine with the new dimensions. Existing worlds that have gotten\\nmodified settings by the datapacks will not be reloaded or replaced. The\\nusability of the dimensions added this way has not been fully tested, but it\\nseems it works just fine. Generator settings for the new dimensions will not be\\nadded to `'level.dat'` but it will be added there automatically next time the\\ngame restarts by vanilla. One could have said to use this method with caution,\\nand the authors take no responsibility of any losses incurred due to\\nmis-handlilng of the temporary added dimensions, yet the feature itself (custom\\ndimensions) is clearly experimental for Mojang themselves, so that's about it.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/enable_hidden_dimensions/\",\"plain\":\"(1.18.1 and lower)\\nThe function reads current datapack settings detecting new dimensions defined by these datapacks that have not yet been added to the list of current dimensions and adds them so that they can be used and accessed right away. It doesn’t matter how the datapacks have been added to the game, either with create_datapack() or manually by dropping a datapack file and calling /datapack enable on it. Returns the list of valid dimension names / identifiers that has been added in the process.\\nFine print: The function should be considered experimental. For example: is not supposed to work at all in vanilla, and its doing exactly that in 1.18.2+. There ‘should not be’ (famous last words) any side-effects if no worlds are added. Already connected clients will not see suggestions for commands that use dimensions /execute in <dim> (vanilla client limitation) but all commands should work just fine with the new dimensions. Existing worlds that have gotten modified settings by the datapacks will not be reloaded or replaced. The usability of the dimensions added this way has not been fully tested, but it seems it works just fine. Generator settings for the new dimensions will not be added to 'level.dat' but it will be added there automatically next time the game restarts by vanilla. One could have said to use this method with caution, and the authors take no responsibility of any losses incurred due to mis-handlilng of the temporary added dimensions, yet the feature itself (custom dimensions) is clearly experimental for Mojang themselves, so that’s about it.\",\"signatures\":[{\"params\":[]}]},\"encode_b64\":{\"markdown\":\"Encode a string to base 64.\",\"permalink\":\"https://scarpet.pages.dev/builtins/functions/encode_b64/\",\"plain\":\"Encode a string to base 64.\",\"signatures\":[{\"params\":[{\"name\":\"string\"}]}]},\"encode_json\":{\"markdown\":\"Encodes a value as a json string.\",\"permalink\":\"https://scarpet.pages.dev/builtins/functions/encode_json/\",\"plain\":\"Encodes a value as a json string.\",\"signatures\":[{\"params\":[{\"name\":\"value\"}]}]},\"encode_nbt\":{\"markdown\":\"Encodes value of the expression as an NBT tag. By default (or when `force` is\\nfalse), it will only allow to encode values that are guaranteed to return the\\nsame value when applied the resulting tag to `parse_nbt()`. Supported types that\\ncan reliably convert back and forth to and from NBT values are:\\n\\n- Maps with string keywords\\n- Lists of items of the same type (scarpet will take care of unifying value\\n  types if possible)\\n- Numbers (encoded as Ints -> Longs -> Doubles, as needed)\\n- Strings\\n\\nOther value types will only be converted to tags (including NBT tags) if `force`\\nis true. They would require extra treatment when loading them back from NBT, but\\nusing `force` true will always produce output / never produce an exception.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/encode_nbt/\",\"plain\":\"Encodes value of the expression as an NBT tag. By default (or when force is false), it will only allow to encode values that are guaranteed to return the same value when applied the resulting tag to parse_nbt(). Supported types that can reliably convert back and forth to and from NBT values are:\\nMaps with string keywords Lists of items of the same type (scarpet will take care of unifying value types if possible) Numbers (encoded as Ints -> Longs -> Doubles, as needed) Strings Other value types will only be converted to tags (including NBT tags) if force is true. They would require extra treatment when loading them back from NBT, but using force true will always produce output / never produce an exception.\",\"signatures\":[{\"params\":[{\"name\":\"expr\"},{\"name\":\"force\"}]}]},\"entity_area\":{\"markdown\":\"Returns entities of a specified type in an area centered on `center` and at most\\n`distance` blocks away from the center point/area. Uses the same `type`\\nselectors as `entities_list`.\\n\\n`center` and `distance` can either be a triple of coordinates or three\\nconsecutive arguments for `entity_area`. `center` can also be represented as a\\nblock, in this case the search box will be centered on the middle of the block,\\nor an entity - in this case entire bounding box of the entity serves as a\\n'center' of search which is then expanded in all directions with the\\n`'distance'` vector.\\n\\nIn any case - returns all entities which bounding box collides with the bounding\\nbox defined by `'center'` and `'distance'`.\\n\\nentity_area is simpler than `entity_selector` and runs about 20% faster, but is\\nlimited to predefined selectors and cuboid search area.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/entity/entity_area/\",\"plain\":\"Returns entities of a specified type in an area centered on center and at most distance blocks away from the center point/area. Uses the same type selectors as entities_list.\\ncenter and distance can either be a triple of coordinates or three consecutive arguments for entity_area. center can also be represented as a block, in this case the search box will be centered on the middle of the block, or an entity - in this case entire bounding box of the entity serves as a ‘center’ of search which is then expanded in all directions with the 'distance' vector.\\nIn any case - returns all entities which bounding box collides with the bounding box defined by 'center' and 'distance'.\\nentity_area is simpler than entity_selector and runs about 20% faster, but is limited to predefined selectors and cuboid search area.\",\"signatures\":[{\"params\":[{\"name\":\"type\"},{\"name\":\"center\"},{\"name\":\"distance\"}]}]},\"entity_event\":{\"markdown\":\"Attaches specific function from the current package to be called upon the\\n`event`, with extra `args` carried to the original required arguments for the\\nevent handler.\\n\\n```scarpet\\nprotect_villager(entity, amount, source, source_entity, healing_player) ->\\n(\\n   if(source_entity && source_entity~'type' != 'player',\\n      modify(entity, 'health', amount + entity~'health' );\\n      particle('end_rod', pos(entity)+[0,3,0]);\\n      print(str('%s healed thanks to %s', entity, healing_player))\\n   )\\n);\\n__on_player_interacts_with_entity(player, entity, hand) ->\\n(\\n   if (entity~'type' == 'villager',\\n      entity_event(entity, 'on_damage', 'protect_villager', player~'name')\\n   )\\n)\\n```\\n\\nIn this case this will protect a villager from entity damage (zombies, etc.)\\nexcept from players by granting all the health back to the villager after being\\nharmed.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/entity/entity_event/\",\"plain\":\"Attaches specific function from the current package to be called upon the event, with extra args carried to the original required arguments for the event handler.\\nprotect_villager(entity, amount, source, source_entity, healing_player) -> ( if(source_entity && source_entity~'type' != 'player', modify(entity, 'health', amount + entity~'health' ); particle('end_rod', pos(entity)+[0,3,0]); print(str('%s healed thanks to %s', entity, healing_player)) ) ); __on_player_interacts_with_entity(player, entity, hand) -> ( if (entity~'type' == 'villager', entity_event(entity, 'on_damage', 'protect_villager', player~'name') ) ) In this case this will protect a villager from entity damage (zombies, etc.) except from players by granting all the health back to the villager after being harmed.\",\"signatures\":[{\"params\":[{\"name\":\"e\"},{\"name\":\"event\"},{\"name\":\"function\"},{\"name\":\"args\",\"rest\":true}]}]},\"entity_id\":{\"markdown\":\"Fetching entities either by their ID obtained via `entity ~ 'id'`, which is\\nunique for a dimension and current world run, or by UUID, obtained via\\n`entity ~ 'uuid'`. It returns null if no such entity is found. Safer way to\\n'store' entities between calls, as missing entities will be returning `null`.\\nBoth calls using UUID or numerical ID are `O(1)`, but obviously using UUIDs\\ntakes more memory and compute.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/entity/entity_id/\",\"plain\":\"Fetching entities either by their ID obtained via entity ~ 'id', which is unique for a dimension and current world run, or by UUID, obtained via entity ~ 'uuid'. It returns null if no such entity is found. Safer way to ‘store’ entities between calls, as missing entities will be returning null. Both calls using UUID or numerical ID are O(1), but obviously using UUIDs takes more memory and compute.\",\"signatures\":[{\"params\":[{\"name\":\"uuid\"},{\"name\":\"entity_idid\"}]}]},\"entity_list\":{\"markdown\":\"Returns global lists of entities in the current dimension matching specified\\ndescriptor. Calls to `entity_list` always fetch entities from the current world\\nthat the script executes.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/entity/entity_list/\",\"plain\":\"Returns global lists of entities in the current dimension matching specified descriptor. Calls to entity_list always fetch entities from the current world that the script executes.\",\"signatures\":[{\"params\":[{\"name\":\"descriptor\"}]}]},\"entity_load_handler\":{\"markdown\":\"Attaches a callback to trigger when any entity matching the following type /\\ntypes is loaded in the game, allowing to grab a handle to an entity right when\\nit is loaded to the world without querying them every tick. Callback expects two\\nparameters - the entity, and a boolean value indicating if the entity was newly\\ncreated(`true`) or just loaded from disk. Single argument functions accepting\\nonly entities are allowed, but deprecated and will be removed at some point.\\n\\nIf callback is `null`, then the current entity handler, if present, is removed.\\nConsecutive calls to `entity_load_handler` will add / subtract of the currently\\ntargeted entity types pool.\\n\\nLike other global events, calls to `entity_load_handler` should only be attached\\nin apps with global scope. For player scope apps, it will be called multiple\\ntimes, once for each player. That's likely not what you want to do.\\n\\n```scarpet\\n// veryfast method of getting rid of all the zombies. Callback is so early, its packets haven't reached yet the clients\\n// so to save on log errors, removal of mobs needs to be scheduled for later.\\nentity_load_handler('zombie', _(e, new) -> schedule(0, _(outer(e)) -> modify(e, 'remove')))\\n\\n// another way to do it is to remove the entity when it starts ticking\\nentity_load_handler('zombie', _(e, new) -> entity_event(e, 'on_tick', _(e) -> modify(e, 'remove')))\\n\\n// making all zombies immediately faster and less susceptible to friction of any sort\\nentity_load_handler('zombie', _(e, new) -> entity_event(e, 'on_tick', _(e) -> modify(e, 'motion', 1.2*e~'motion')))\\n```\\n\\nWord of caution: entities can be loaded with chunks in various states, for\\ninstance when a chunk is being generated, this means that accessing world blocks\\nwould cause the game to freeze due to force generating that chunk while\\ngenerating the chunk. Make sure to never assume the chunk is ready and use\\n`entity_load_handler` to schedule actions around the loaded entity, or\\nmanipulate entity directly.\\n\\nAlso, it is possible that mobs that spawn with world generation, while being\\n'added' have their metadata serialized and cached internally (vanilla\\nlimitation), so some modifications to these entities may have no effect on them.\\nThis affects mobs created with world generation.\\n\\nFor instance the following handler is safe, as it only accesses the entity\\ndirectly. It makes all spawned pigmen jump\\n\\n```scarpet\\nentity_load_handler('zombified_piglin', _(e, new) ->\\n    if(new, modify(e, 'motion', 0, 1, 0)));\\n```\\n\\nBut the following handler, attempting to despawn pigmen that spawn in portals,\\nwill cause the game to freeze due to cascading access to blocks that would cause\\nneighbouring chunks to force generate, causing also error messages for all\\npigmen caused by packets send after entity is removed by script.\\n\\n```scarpet\\nentity_load_handler('zombified_piglin', _(e, new) ->\\n    if(new && block(pos(e)) == 'nether_portal', modify(e, 'remove')));\\n```\\n\\nEasiest method to circumvent these issues is delay the check, which may or may\\nnot cause cascade load to happen, but will definitely break the infinite chain.\\n\\n```scarpet\\nentity_load_handler('zombified_piglin', _(e, new) ->\\n    if(new, schedule(0, _(outer(e)) ->\\n        if(block(pos(e)) == 'nether_portal', modify(e, 'remove'));\\n    ));\\n);\\n```\\n\\nBut the best is to perform the check first time the entity will be ticked -\\ngiving the game all the time to ensure chunk is fully loaded and entity\\nprocessing, removing the tick handler:\\n\\n```scarpet\\nentity_load_handler('zombified_piglin', _(e, new) ->\\n    if(new, entity_event(e, 'on_tick', _(e) -> (\\n        if(block(pos(e)) == 'nether_portal', modify(e, 'remove'));\\n        entity_event(e, 'on_tick', null);\\n    )));\\n);\\n```\\n\\nLooks little convoluted, but that's the safest method to ensure your app won't\\ncrash.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/entity/entity_load_handler/\",\"plain\":\"Attaches a callback to trigger when any entity matching the following type / types is loaded in the game, allowing to grab a handle to an entity right when it is loaded to the world without querying them every tick. Callback expects two parameters - the entity, and a boolean value indicating if the entity was newly created(true) or just loaded from disk. Single argument functions accepting only entities are allowed, but deprecated and will be removed at some point.\\nIf callback is null, then the current entity handler, if present, is removed. Consecutive calls to entity_load_handler will add / subtract of the currently targeted entity types pool.\\nLike other global events, calls to entity_load_handler should only be attached in apps with global scope. For player scope apps, it will be called multiple times, once for each player. That’s likely not what you want to do.\\n// veryfast method of getting rid of all the zombies. Callback is so early, its packets haven't reached yet the clients // so to save on log errors, removal of mobs needs to be scheduled for later. entity_load_handler('zombie', _(e, new) -> schedule(0, _(outer(e)) -> modify(e, 'remove'))) // another way to do it is to remove the entity when it starts ticking entity_load_handler('zombie', _(e, new) -> entity_event(e, 'on_tick', _(e) -> modify(e, 'remove'))) // making all zombies immediately faster and less susceptible to friction of any sort entity_load_handler('zombie', _(e, new) -> entity_event(e, 'on_tick', _(e) -> modify(e, 'motion', 1.2*e~'motion'))) Word of caution: entities can be loaded with chunks in various states, for instance when a chunk is being generated, this means that accessing world blocks would cause the game to freeze due to force generating that chunk while generating the chunk. Make sure to never assume the chunk is ready and use entity_load_handler to schedule actions around the loaded entity, or manipulate entity directly.\\nAlso, it is possible that mobs that spawn with world generation, while being ‘added’ have their metadata serialized and cached internally (vanilla limitation), so some modifications to these entities may have no effect on them. This affects mobs created with world generation.\\nFor instance the following handler is safe, as it only accesses the entity directly. It makes all spawned pigmen jump\\nentity_load_handler('zombified_piglin', _(e, new) -> if(new, modify(e, 'motion', 0, 1, 0))); But the following handler, attempting to despawn pigmen that spawn in portals, will cause the game to freeze due to cascading access to blocks that would cause neighbouring chunks to force generate, causing also error messages for all pigmen caused by packets send after entity is removed by script.\\nentity_load_handler('zombified_piglin', _(e, new) -> if(new && block(pos(e)) == 'nether_portal', modify(e, 'remove'))); Easiest method to circumvent these issues is delay the check, which may or may not cause cascade load to happen, but will definitely break the infinite chain.\\nentity_load_handler('zombified_piglin', _(e, new) -> if(new, schedule(0, _(outer(e)) -> if(block(pos(e)) == 'nether_portal', modify(e, 'remove')); )); ); But the best is to perform the check first time the entity will be ticked - giving the game all the time to ensure chunk is fully loaded and entity processing, removing the tick handler:\\nentity_load_handler('zombified_piglin', _(e, new) -> if(new, entity_event(e, 'on_tick', _(e) -> ( if(block(pos(e)) == 'nether_portal', modify(e, 'remove')); entity_event(e, 'on_tick', null); ))); ); Looks little convoluted, but that’s the safest method to ensure your app won’t crash.\",\"signatures\":[{\"params\":[{\"name\":\"descriptors\"},{\"name\":\"function\"},{\"name\":\"args\",\"rest\":true}]}]},\"entity_selector\":{\"markdown\":\"Returns entities satisfying given vanilla entity selector. Most complex among\\nall the methods of selecting entities, but the most capable. Selectors are\\ncached so it should be as fast as other methods of selecting entities. Unlike\\nother entities fetching / filtering method, this one doesn't guarantee to return\\nentities from current dimension, since selectors can return any loaded entity in\\nthe world.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/entity/entity_selector/\",\"plain\":\"Returns entities satisfying given vanilla entity selector. Most complex among all the methods of selecting entities, but the most capable. Selectors are cached so it should be as fast as other methods of selecting entities. Unlike other entities fetching / filtering method, this one doesn’t guarantee to return entities from current dimension, since selectors can return any loaded entity in the world.\",\"signatures\":[{\"params\":[{\"name\":\"selector\"}]}]},\"entity_types\":{\"markdown\":\"Resolves a given descriptor returning list of entity types that match it. The\\nreturned list of types is also a valid list of descriptors that can be use\\nelsewhere where entity types are required.\\n\\nCurrently, the following descriptors are available:\\n\\n- `*`: all entities, even `!valid`, matches all entity types.\\n- `valid` - all entities that are not dead (health > 0). All main categories\\n  below also return only entities in the `valid` category. matches all entity\\n  types. `!valid` matches all entites that are already dead of all types.\\n- `living` - all entities that resemble a creature of some sort\\n- `projectile` - all entities or types that are not living that can be throw or\\n  projected, `!projectile` matches all types that are not living, but cannot the\\n  thrown or projected.\\n- `minecarts` matches all minecart types. `!minecarts` matches all types that\\n  are not live, but also not minecarts. Using plural since `minecart` is a\\n  proper entity type on its own.\\n- `undead`, `arthropod`, `aquatic`, `regular`, `illager` - all entities / types\\n  that belong to any of these groups. All living entities belong to one and only\\n  one of these. Corresponding negative (e.g. `!undead`) corresponds to all mobs\\n  that are living but don't belong to that group. Entity groups are used in\\n  interaction / battle mechanics like smite for undead, or impaling for aquatic.\\n  Also certain mechanics interact with groups, like ringing a bell with\\n  illagers. All other mobs that don't have any of these traits belong to the\\n  `regular` group.\\n- `monster`, `creature`, `ambient`, `water_creature`, `water_ambient`, `misc` -\\n  another categorization of living entities based on their spawn group. Negative\\n  descriptor resolves to all living types that don't belong to that category.\\n- All entity tags including those provided with datapacks. Built-in entity tags\\n  include: `skeletons`, `raiders`, `beehive_inhabitors` (bee, duh), `arrows` and\\n  `impact_projectiles`.\\n- Any of the standard entity types, equivalent to selection from `/summon`\\n  vanilla command, which is one of the options returned by `entity_types()`,\\n  except for `'fishing_bobber'` and `'player'`.\\n\\nAll categories can be preceded with `'!'` which will fetch all entities (unless\\notherwise noted) that are valid (health > 0) but not belonging to that group.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/entity/entity_types/\",\"plain\":\"Resolves a given descriptor returning list of entity types that match it. The returned list of types is also a valid list of descriptors that can be use elsewhere where entity types are required.\\nCurrently, the following descriptors are available:\\n*: all entities, even !valid, matches all entity types. valid - all entities that are not dead (health > 0). All main categories below also return only entities in the valid category. matches all entity types. !valid matches all entites that are already dead of all types. living - all entities that resemble a creature of some sort projectile - all entities or types that are not living that can be throw or projected, !projectile matches all types that are not living, but cannot the thrown or projected. minecarts matches all minecart types. !minecarts matches all types that are not live, but also not minecarts. Using plural since minecart is a proper entity type on its own. undead, arthropod, aquatic, regular, illager - all entities / types that belong to any of these groups. All living entities belong to one and only one of these. Corresponding negative (e.g. !undead) corresponds to all mobs that are living but don’t belong to that group. Entity groups are used in interaction / battle mechanics like smite for undead, or impaling for aquatic. Also certain mechanics interact with groups, like ringing a bell with illagers. All other mobs that don’t have any of these traits belong to the regular group. monster, creature, ambient, water_creature, water_ambient, misc - another categorization of living entities based on their spawn group. Negative descriptor resolves to all living types that don’t belong to that category. All entity tags including those provided with datapacks. Built-in entity tags include: skeletons, raiders, beehive_inhabitors (bee, duh), arrows and impact_projectiles. Any of the standard entity types, equivalent to selection from /summon vanilla command, which is one of the options returned by entity_types(), except for 'fishing_bobber' and 'player'. All categories can be preceded with '!' which will fetch all entities (unless otherwise noted) that are valid (health > 0) but not belonging to that group.\",\"signatures\":[{\"params\":[{\"name\":\"descriptor\"}]}]},\"equal\":{\"permalink\":\"https://scarpet.pages.dev/syntax/operators/equal/\",\"signatures\":[{\"params\":[{\"name\":\"x\"},{\"name\":\"y\"}]}]},\"escape_nbt\":{\"markdown\":\"Excapes all the special characters in the string or nbt tag and returns a string\\nthat can be stored in nbt directly as a string value.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/escape_nbt/\",\"plain\":\"Excapes all the special characters in the string or nbt tag and returns a string that can be stored in nbt directly as a string value.\",\"signatures\":[{\"params\":[{\"name\":\"expr\"}]}]},\"exit\":{\"markdown\":\"It terminates entire program passing `expr` as the result of the program\\nexecution, or null if omitted.\",\"permalink\":\"https://scarpet.pages.dev/syntax/control_flow/exit/\",\"plain\":\"It terminates entire program passing expr as the result of the program execution, or null if omitted.\",\"signatures\":[{\"params\":[]},{\"params\":[{\"name\":\"value\"}]}]},\"fact\":{\"markdown\":\"Returns the factorial of a number. `fact(n)` is equal to `1*2*3*...n`.\\n\\nIt can easily produce huge numbers so when `n` is greater than or equal to `20`\\nit will produce a double-precision floating point approximation of the result.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/fact/\",\"plain\":\"Returns the factorial of a number. fact(n) is equal to 1*2*3*...n.\\nIt can easily produce huge numbers so when n is greater than or equal to 20 it will produce a double-precision floating point approximation of the result.\",\"signatures\":[{\"params\":[{\"name\":\"n\"}]}]},\"filter\":{\"markdown\":\"Filters `list` elements returning only these that return positive result of the\\n`expr`. With `break` and `continue` statements, the supplied value can be used\\nas a boolean check instead.\\n\\n```scarpet\\nfilter(range(100), !(_ % 5), _ * _ > 1000); // [0, 5, 10, 15, 20, 25, 30]\\nmap(filter(entity_list('*'), _ == 'Witch'), query(_, 'pos')); // [[1082.5, 57, 1243.5]]\\n```\",\"permalink\":\"https://scarpet.pages.dev/builtins/iteration/filter/\",\"plain\":\"Filters list elements returning only these that return positive result of the expr. With break and continue statements, the supplied value can be used as a boolean check instead.\\nfilter(range(100), !(_ % 5), _ * _ > 1000); // [0, 5, 10, 15, 20, 25, 30] map(filter(entity_list('*'), _ == 'Witch'), query(_, 'pos')); // [[1082.5, 57, 1243.5]] \",\"signatures\":[{\"params\":[{\"name\":\"list\"},{\"binds\":[\"_\",\"_i\"],\"name\":\"expr\"}]}]},\"first\":{\"markdown\":\"Finds and returns the first item in the list that satisfies `expr`. It sets `_`\\nfor current element value, and `_i` for index of that element. `break` can be\\ncalled inside the iteration code, using its argument value instead of the\\ncurrent item. `continue` has no sense and cannot be called inside `first` call.\\n\\n```scarpet\\n// first prime after 1000\\nfirst(range(1000, 10000), n = _; !first(range(2, sqrt(n) + 1), !(n % _))); // 1009\\n```\\n\\nNotice in the example above, that we needed to rename the outer `_` to be able\\nto use in in the inner `first` call\",\"permalink\":\"https://scarpet.pages.dev/builtins/iteration/first/\",\"plain\":\"Finds and returns the first item in the list that satisfies expr. It sets _ for current element value, and _i for index of that element. break can be called inside the iteration code, using its argument value instead of the current item. continue has no sense and cannot be called inside first call.\\n// first prime after 1000 first(range(1000, 10000), n = _; !first(range(2, sqrt(n) + 1), !(n % _))); // 1009 Notice in the example above, that we needed to rename the outer _ to be able to use in in the inner first call\",\"signatures\":[{\"params\":[{\"name\":\"list\"},{\"binds\":[\"_\",\"_i\"],\"name\":\"expr\"}]}]},\"flammable\":{\"markdown\":\"Boolean function, true if the block is flammable.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/flammable/\",\"plain\":\"Boolean function, true if the block is flammable.\",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"floor\":{\"markdown\":\"Returns the largest integer less than or equal to the given number.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/floor/\",\"plain\":\"Returns the largest integer less than or equal to the given number.\",\"signatures\":[{\"params\":[{\"name\":\"n\"}]}]},\"for\":{\"markdown\":\"Iterate over each item in an iterable value.\\n\\n`for()` takes two arguments, an iterable value such as a `list` or a `map`\\n(iterates over the keys of the map), and an expression to evaluate for every\\nitem. The expression receives two bound variables `_` (value) and `_i` (current\\niteration number) are supplied to the expression.\\n\\n```scarpet\\nfor([1, 2, 3, 4, 5], print(_));\\n```\\n\\n`for()` returns the number of times the expression evaluated to a successful\\nvalue.\\n\\nLike other looping functions `for()` supports `break()` and `continue()`. An\\noptional argument can be passed to `break()` or `continue()` to determine if the\\niteration was successful.\\n\\n```scarpet\\ni = for([42, 12, 56, 29], print(_i)); // 0, 1, 2, 3\\ni; // 4\\n```\",\"permalink\":\"https://scarpet.pages.dev/syntax/control_flow/for/\",\"plain\":\"Iterate over each item in an iterable value.\\nfor() takes two arguments, an iterable value such as a list or a map (iterates over the keys of the map), and an expression to evaluate for every item. The expression receives two bound variables _ (value) and _i (current iteration number) are supplied to the expression.\\nfor([1, 2, 3, 4, 5], print(_)); for() returns the number of times the expression evaluated to a successful value.\\nLike other looping functions for() supports break() and continue(). An optional argument can be passed to break() or continue() to determine if the iteration was successful.\\ni = for([42, 12, 56, 29], print(_i)); // 0, 1, 2, 3 i; // 4 \",\"signatures\":[{\"params\":[{\"name\":\"iterable\"},{\"binds\":[\"_\",\"_i\"],\"name\":\"body\"}],\"returns\":\"number\"}]},\"format\":{\"markdown\":\"Creates a line of formatted text. Each component is either a string indicating\\nformatting and text it corresponds to or a decorator affecting the component\\npreceding it.\\n\\nRegular formatting components is a string that have the structure of:\\n`'<format> <text>'`, like `'gi Hi'`, which in this case indicates a grey,\\nitalicised word `'Hi'`. The space to separate the format and the text is\\nmandatory. The format can be empty, but the space still needs to be there\\notherwise the first word of the text will be used as format, which nobody wants.\\n\\nFormat is a list of formatting symbols indicating the format. They can be mixed\\nand matched although color will only be applied once. Available symbols include:\\n\\n- `i` - _italic_\\n- `b` - **bold**\\n- `s` - ~~strikethrough~~\\n- `u` - <u>underline</u>\\n- `o` - obfuscated\\n\\nAnd colors:\\n\\n- `w` - White (default)\\n- `y` - Yellow\\n- `m` - Magenta (light purple)\\n- `r` - Red\\n- `c` - Cyan (aqua)\\n- `l` - Lime\\n- `t` - lighT blue\\n- `f` - dark grayF (weird Flex, but ok)\\n- `g` - Gray\\n- `d` - golD\\n- `p` - PurPle\\n- `n` - browN (dark red)\\n- `q` - turQuoise (dark aqua)\\n- `e` - grEEn\\n- `v` - naVy blue\\n- `k` - blaK\\n- `#FFAACC` - arbitrary RGB color (1.16+), hex notation. Use uppercase for A-F\\n  symbols\\n\\nDecorators (listed as extra argument after the component they would affect):\\n\\n- `'^<format> <text>'` - hover over tooltip text, appearing when hovering with\\n  your mouse over the text below.\\n- `'?<suggestion>` - command suggestion - a message that will be pasted to chat\\n  when text below it is clicked.\\n- `'!<message>'` - a chat message that will be executed when the text below it\\n  is clicked.\\n- `'@<url>'` - a URL that will be opened when the text below it is clicked.\\n- `'&<text>'` - a text that will be copied to clipboard when the text below it\\n  is clicked.\\n\\nBoth suggestions and messages can contain a command, which will be executed as a\\nplayer that clicks it.\\n\\nSo far the only usecase for formatted texts is with a `print` command. Otherwise\\nit functions like a normal string value representing what is actually displayed\\non screen.\\n\\nExample usages:\\n\\n```scarpet\\n print(format('rbu Error: ', 'r Stuff happened!'))\\n print(format('w Click ','tb [HERE]', '^di Awesome!', '!/kill', 'w \\\\ button to win $1000'))\\n  // the reason why I backslash the second space is that otherwise command parser may contract consecutive spaces\\n  // not a problem in apps\\n```\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/format/\",\"plain\":\"Creates a line of formatted text. Each component is either a string indicating formatting and text it corresponds to or a decorator affecting the component preceding it.\\nRegular formatting components is a string that have the structure of: '<format> <text>', like 'gi Hi', which in this case indicates a grey, italicised word 'Hi'. The space to separate the format and the text is mandatory. The format can be empty, but the space still needs to be there otherwise the first word of the text will be used as format, which nobody wants.\\nFormat is a list of formatting symbols indicating the format. They can be mixed and matched although color will only be applied once. Available symbols include:\\ni - italic b - bold s - strikethrough u - underline o - obfuscated And colors:\\nw - White (default) y - Yellow m - Magenta (light purple) r - Red c - Cyan (aqua) l - Lime t - lighT blue f - dark grayF (weird Flex, but ok) g - Gray d - golD p - PurPle n - browN (dark red) q - turQuoise (dark aqua) e - grEEn v - naVy blue k - blaK #FFAACC - arbitrary RGB color (1.16+), hex notation. Use uppercase for A-F symbols Decorators (listed as extra argument after the component they would affect):\\n'^<format> <text>' - hover over tooltip text, appearing when hovering with your mouse over the text below. '?<suggestion> - command suggestion - a message that will be pasted to chat when text below it is clicked. '!<message>' - a chat message that will be executed when the text below it is clicked. '@<url>' - a URL that will be opened when the text below it is clicked. '&<text>' - a text that will be copied to clipboard when the text below it is clicked. Both suggestions and messages can contain a command, which will be executed as a player that clicks it.\\nSo far the only usecase for formatted texts is with a print command. Otherwise it functions like a normal string value representing what is actually displayed on screen.\\nExample usages:\\nprint(format('rbu Error: ', 'r Stuff happened!')) print(format('w Click ','tb [HERE]', '^di Awesome!', '!/kill', 'w \\\\ button to win $1000')) // the reason why I backslash the second space is that otherwise command parser may contract consecutive spaces // not a problem in apps \",\"signatures\":[{\"params\":[{\"name\":\"components\",\"rest\":true}]}]},\"game_tick\":{\"markdown\":\"Causes game to run for one tick. By default, it runs it and returns control to\\nthe program, but can optionally accept expected tick length, in milliseconds,\\nwaits that extra remaining time and then returns the control to the program. You\\ncan't use it to permanently change the game speed, but setting longer commands\\nwith custom tick speeds can be interrupted via `/script stop` command - if you\\ncan get access to the command terminal.\\n\\nRunning `game_tick()` as part of the code that runs within the game tick itself\\nis generally a bad idea, unless you know what this entails. Triggering the\\n`game_tick()` will cause the current (shoulder) tick to pause, then run the\\ninternal tick, then run the rest of the shoulder tick, which may lead to\\nartifacts in between regular code execution and your game simulation code. If\\nyou need to break up your execution into chunks, you could queue the rest of the\\nwork into the next task using `schedule`, or perform your actions defining\\n`__on_tick()` event handler, but in case you need to take a full control over\\nthe game loop and run some simulations using `game_tick()` as the way to advance\\nthe game progress, that might be the simplest way to do it, and triggering the\\nscript in a 'proper' way (there is not 'proper' way, but via command line, or\\nserver chat is the most 'proper'), would be the safest way to do it. For\\ninstance, running `game_tick()` from a command block triggered with a button, or\\nin an entity event triggered in an entity tick, may technically cause the game\\nto run and encounter that call again, causing stack to overflow. Thankfully it\\ndoesn't happen in vanilla running carpet, but may happen with other modified\\n(modded) versions of the game.\\n\\n```scarpet\\nloop(1000,game_tick())  // runs the game as fast as it can for 1000 ticks\\nloop(1000,game_tick(100)) // runs the game twice as slow for 1000 ticks\\n```\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/game_tick/\",\"plain\":\"Causes game to run for one tick. By default, it runs it and returns control to the program, but can optionally accept expected tick length, in milliseconds, waits that extra remaining time and then returns the control to the program. You can’t use it to permanently change the game speed, but setting longer commands with custom tick speeds can be interrupted via /script stop command - if you can get access to the command terminal.\\nRunning game_tick() as part of the code that runs within the game tick itself is generally a bad idea, unless you know what this entails. Triggering the game_tick() will cause the current (shoulder) tick to pause, then run the internal tick, then run the rest of the shoulder tick, which may lead to artifacts in between regular code execution and your game simulation code. If you need to break up your execution into chunks, you could queue the rest of the work into the next task using schedule, or perform your actions defining __on_tick() event handler, but in case you need to take a full control over the game loop and run some simulations using game_tick() as the way to advance the game progress, that might be the simplest way to do it, and triggering the script in a ‘proper’ way (there is not ‘proper’ way, but via command line, or server chat is the most ‘proper’), would be the safest way to do it. For instance, running game_tick() from a command block triggered with a button, or in an entity event triggered in an entity tick, may technically cause the game to run and encounter that call again, causing stack to overflow. Thankfully it doesn’t happen in vanilla running carpet, but may happen with other modified (modded) versions of the game.\\nloop(1000,game_tick()) // runs the game as fast as it can for 1000 ticks loop(1000,game_tick(100)) // runs the game twice as slow for 1000 ticks \",\"signatures\":[{\"params\":[{\"name\":\"mstime\"}]}]},\"generation_status\":{\"markdown\":\"Returns generation status as per the ticket system. Can return any value from\\nseveral available but chunks can only be stable in a few states: `full`,\\n`features`, `liquid_carvers`, and `structure_starts`. Returns `null` if the\\nchunk is not in memory unless called with optional `true`.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/generation_status/\",\"plain\":\"Returns generation status as per the ticket system. Can return any value from several available but chunks can only be stable in a few states: full, features, liquid_carvers, and structure_starts. Returns null if the chunk is not in memory unless called with optional true.\",\"signatures\":[{\"params\":[{\"name\":\"pos\"},{\"name\":\"generation_statuspos\"},{\"name\":\"true\"}]}]},\"get\":{\"markdown\":\"Returns the value at `address` element from the `value`. For lists it indicates\\nan index, use negative numbers to reach elements from the end of the list. `get`\\ncall will always be able to find the index. In case there is few items, it will\\nloop over\\n\\nfor maps, retrieves the value under the key specified in the `address` or null\\notherwise\\n\\n[Minecraft specific usecase]: In case `value` is of `nbt` type, uses address as\\nthe nbt path to query, returning null, if path is not found, one value if there\\nwas one match, or list of values if result is a list. Returned elements can be\\nof numerical type, string texts, or another compound nbt tags\\n\\nIn case to simplify the access with nested objects, you can add chain of\\naddresses to the arguments of `get` rather than calling it multiple times.\\n`get(get(foo,a),b)` is equivalent to `get(foo, a, b)`, or `foo:a:b`.\\n\\n```scarpet\\nget([range(10)], 5)  => 5\\nget([range(10)], -1)  => 9\\nget([range(10)], 10)  => 0\\n[range(10)]:93  => 3\\nget(player() ~ 'nbt', 'Health') => 20 // inefficient way to get player health, use player() ~ 'health' instead\\nget({ 'foo' -> 2, 'bar' -> 3, 'baz' -> 4 }, 'bar')  => 3\\n```\",\"permalink\":\"https://scarpet.pages.dev/builtins/containers/get/\",\"plain\":\"Returns the value at address element from the value. For lists it indicates an index, use negative numbers to reach elements from the end of the list. get call will always be able to find the index. In case there is few items, it will loop over\\nfor maps, retrieves the value under the key specified in the address or null otherwise\\n[Minecraft specific usecase]: In case value is of nbt type, uses address as the nbt path to query, returning null, if path is not found, one value if there was one match, or list of values if result is a list. Returned elements can be of numerical type, string texts, or another compound nbt tags\\nIn case to simplify the access with nested objects, you can add chain of addresses to the arguments of get rather than calling it multiple times. get(get(foo,a),b) is equivalent to get(foo, a, b), or foo:a:b.\\nget([range(10)], 5) => 5 get([range(10)], -1) => 9 get([range(10)], 10) => 0 [range(10)]:93 => 3 get(player() ~ 'nbt', 'Health') => 20 // inefficient way to get player health, use player() ~ 'health' instead get({ 'foo' -> 2, 'bar' -> 3, 'baz' -> 4 }, 'bar') => 3 \",\"signatures\":[{\"params\":[{\"name\":\"container\"},{\"name\":\"address\"},{\"name\":\"addresses\",\"rest\":true}]},{\"params\":[{\"name\":\"lvalue\"}]}]},\"get_mob_counts\":{\"markdown\":\"Returns either a map of mob categories with its respective counts and capacities\\n(a.k.a. mobcaps) or just a tuple of count and limit for a specific category. If\\na category was not spawning for whatever reason it may not be returned from\\n`get_mob_counts()`, but could be retrieved for `get_mob_counts(category)`.\\nReturned counts is what spawning algorithm has taken in to account last time\\nmobs spawned.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/get_mob_counts/\",\"plain\":\"Returns either a map of mob categories with its respective counts and capacities (a.k.a. mobcaps) or just a tuple of count and limit for a specific category. If a category was not spawning for whatever reason it may not be returned from get_mob_counts(), but could be retrieved for get_mob_counts(category). Returned counts is what spawning algorithm has taken in to account last time mobs spawned.\",\"signatures\":[{\"params\":[]},{\"params\":[{\"name\":\"category\"}]}]},\"handle_event\":{\"markdown\":\"Provides a handler for an event identified by the '`event`' argument. If the\\nevent doesn't exist yet, it will be created. All loaded apps globally can\\ntrigger that event, when they call corresponding `signal_event(event, ...)`.\\nCallback can be defined as a function name, function value (or a lambda\\nfunction), along with optional extra arguments that will be passed to it when\\nthe event is triggered. All custom events expect a function that takes one free\\nargument, passed by the event trigger. If extra arguments are provided, they\\nwill be appended to the argument list of the callback function.\\n\\nReturns `true` if subscription to the event was successful, or `false` if it\\nfailed (for instance wrong scope for built-in event, or incorrect number of\\nparameters for the event).\\n\\nIf a callback is specified as `null`, the given app (or player app instance\\n)stops handling that event.\\n\\n```scarpet\\nfoo(a) -> print(a);\\nhandle_event('boohoo', 'foo');\\n\\nbar(a, b, c) -> print([a, b, c]);\\nhandle_event('boohoo', 'bar', 2, 3) // using b = 2, c = 3, a - passed by the caller\\n\\nhandle_event('tick', _() -> foo('tick happened')); // built-in event\\n\\nhandle_event('tick', null);  // nah, ima good, kthxbai\\n```\\n\\nIn case you want to pass an event handler that is not defined in your module,\\nplease read the tips on \\\"Passing function references to other modules of your\\napplication\\\" section in the `call(...)` section.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/handle_event/\",\"plain\":\"Provides a handler for an event identified by the ‘event’ argument. If the event doesn’t exist yet, it will be created. All loaded apps globally can trigger that event, when they call corresponding signal_event(event, ...). Callback can be defined as a function name, function value (or a lambda function), along with optional extra arguments that will be passed to it when the event is triggered. All custom events expect a function that takes one free argument, passed by the event trigger. If extra arguments are provided, they will be appended to the argument list of the callback function.\\nReturns true if subscription to the event was successful, or false if it failed (for instance wrong scope for built-in event, or incorrect number of parameters for the event).\\nIf a callback is specified as null, the given app (or player app instance )stops handling that event.\\nfoo(a) -> print(a); handle_event('boohoo', 'foo'); bar(a, b, c) -> print([a, b, c]); handle_event('boohoo', 'bar', 2, 3) // using b = 2, c = 3, a - passed by the caller handle_event('tick', _() -> foo('tick happened')); // built-in event handle_event('tick', null); // nah, ima good, kthxbai In case you want to pass an event handler that is not defined in your module, please read the tips on “Passing function references to other modules of your application” section in the call(...) section.\",\"signatures\":[{\"params\":[{\"name\":\"event\"},{\"name\":\"function\"},{\"name\":\"args\",\"rest\":true}]}]},\"hardness\":{\"markdown\":\"Numeric function, indicating hardness of a block.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/hardness/\",\"plain\":\"Numeric function, indicating hardness of a block.\",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"harvest\":{\"markdown\":\"Causes a block to be harvested by a specified player entity. Honors player item\\nenchantments, as well as damages the tool if applicable. If the entity is not a\\nvalid player, no block gets destroyed. If a player is not allowed to break that\\nblock, a block doesn't get destroyed either.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/harvest/\",\"plain\":\"Causes a block to be harvested by a specified player entity. Honors player item enchantments, as well as damages the tool if applicable. If the entity is not a valid player, no block gets destroyed. If a player is not allowed to break that block, a block doesn’t get destroyed either.\",\"signatures\":[{\"params\":[{\"name\":\"player\"},{\"name\":\"pos\"}]}]},\"has\":{\"markdown\":\"Similar to `get`, but returns boolean value indicating if the given index / key\\n/ path is in the container. Can be used to determine if `get(...)==null` means\\nthe element doesn't exist, or the stored value for this address is `null`, and\\nis cheaper to run than `get`.\\n\\nLike get, it can accept multiple addresses for chains in nested containers. In\\nthis case `has(foo:a:b)` is equivalent to `has(get(foo,a), b)` or\\n`has(foo, a, b)`\",\"permalink\":\"https://scarpet.pages.dev/builtins/containers/has/\",\"plain\":\"Similar to get, but returns boolean value indicating if the given index / key / path is in the container. Can be used to determine if get(...)==null means the element doesn’t exist, or the stored value for this address is null, and is cheaper to run than get.\\nLike get, it can accept multiple addresses for chains in nested containers. In this case has(foo:a:b) is equivalent to has(get(foo,a), b) or has(foo, a, b)\",\"signatures\":[{\"params\":[{\"name\":\"container\"},{\"name\":\"address\"},{\"name\":\"addresses\",\"rest\":true}]},{\"params\":[{\"name\":\"lvalue\"}]}]},\"if\":{\"markdown\":\"Evaluate an expression if a condition holds.\\n\\n```scarpet\\nif(1 == 2, print('oops, maths broke'));\\n```\\n\\n`if()` can also be used as an expression. An extra argument can be specified to\\nact as an `else` block.\\n\\n```scarpet\\nmessage = if(player()~'gamemode' == 'creative',\\n    'Hi cheater',\\n    'Hello friend',\\n);\\n```\\n\\nUnlike most programming languages there is no `else if`. More conditions and\\nexpression can be added as arguments to the `if()` call.\\n\\n```scarpet\\nif(gamemode == 'creative',\\n    'player is in creative',\\n    gamemode == 'survival',\\n    'player is in survival',\\n    'player is not in creative or survival',\\n);\\n```\",\"permalink\":\"https://scarpet.pages.dev/syntax/control_flow/if/\",\"plain\":\"Evaluate an expression if a condition holds.\\nif(1 == 2, print('oops, maths broke')); if() can also be used as an expression. An extra argument can be specified to act as an else block.\\nmessage = if(player()~'gamemode' == 'creative', 'Hi cheater', 'Hello friend', ); Unlike most programming languages there is no else if. More conditions and expression can be added as arguments to the if() call.\\nif(gamemode == 'creative', 'player is in creative', gamemode == 'survival', 'player is in survival', 'player is not in creative or survival', ); \",\"signatures\":[{\"params\":[{\"name\":\"condition\"},{\"name\":\"if_true\"}]},{\"params\":[{\"name\":\"condition\"},{\"name\":\"if_true\"},{\"name\":\"if_false\"}]},{\"params\":[{\"name\":\"condition\"},{\"name\":\"if_true\"},{\"rest\":true}]}]},\"import\":{\"markdown\":\"Imports symbols from other apps and libraries into the current one: global\\nvariables or functions, allowing to use them in the current app. This includes\\nother symbols imported by these modules. Scarpet supports circular dependencies,\\nbut if symbols are used directly in the module body rather than functions, it\\nmay not be able to retrieve them.\\n\\nReturns full list of available symbols that could be imported from this module,\\nwhich can be used to debug import issues, and list contents of libraries.\\n\\nYou can load and import functions from dependencies in a remote app store's\\nsource specified in your config's `libraries` block, but make sure to place your\\nconfig _before_ the import in order to allow the remote dependency to be\\ndownloaded (currently, app resources are only downloaded when using the\\n`/carpet download` command).\",\"permalink\":\"https://scarpet.pages.dev/syntax/control_flow/import/\",\"plain\":\"Imports symbols from other apps and libraries into the current one: global variables or functions, allowing to use them in the current app. This includes other symbols imported by these modules. Scarpet supports circular dependencies, but if symbols are used directly in the module body rather than functions, it may not be able to retrieve them.\\nReturns full list of available symbols that could be imported from this module, which can be used to debug import issues, and list contents of libraries.\\nYou can load and import functions from dependencies in a remote app store’s source specified in your config’s libraries block, but make sure to place your config before the import in order to allow the remote dependency to be downloaded (currently, app resources are only downloaded when using the /carpet download command).\",\"signatures\":[{\"params\":[{\"name\":\"module\"},{\"name\":\"symbols\",\"rest\":true}]}]},\"in_dimension\":{\"markdown\":\"Evaluates the expression `expr` with different dimension execution context.\\n`smth` can be an entity, world-localized block, so not `block('stone')`, or a\\nstring representing a dimension like: `'nether'`, `'the_nether'`, `'end'` or\\n`'overworld'`, etc.\\n\\nThrows `unknown_dimension` if provided dimension can't be found.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/in_dimension/\",\"plain\":\"Evaluates the expression expr with different dimension execution context. smth can be an entity, world-localized block, so not block('stone'), or a string representing a dimension like: 'nether', 'the_nether', 'end' or 'overworld', etc.\\nThrows unknown_dimension if provided dimension can’t be found.\",\"signatures\":[{\"params\":[{\"name\":\"smth\"},{\"name\":\"expr\"}]}]},\"in_slime_chunk\":{\"markdown\":\"Boolean indicating if the given block position is in a slime chunk.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/in_slime_chunk/\",\"plain\":\"Boolean indicating if the given block position is in a slime chunk.\",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"increasing\":{\"permalink\":\"https://scarpet.pages.dev/syntax/operators/increasing/\",\"signatures\":[{\"params\":[{\"name\":\"x\"},{\"name\":\"y\"}]}]},\"inhabited_time\":{\"markdown\":\"Returns inhabited time for a chunk.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/inhabited_time/\",\"plain\":\"Returns inhabited time for a chunk.\",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"inventory_find\":{\"markdown\":\"Finds the first slot with a corresponding item in the inventory, or if queried\\nwith null: the first empty slot. Returns slot number if found, or null\\notherwise. Optional start_slot argument allows to skip all preceeding slots\\nallowing for efficient (so not slot-by-slot) inventory search for items.\\n\\n```scarpet\\ninventory_find(player(), 'stone') => 0 // player has stone in first hotbar slot\\ninventory_find(player(), null) => null // player's inventory has no empty spot\\nwhile( (slot = inventory_find(p, 'diamond', slot)) != null, 41, drop_item(p, slot) )\\n    // spits all diamonds from player inventory wherever they are\\ninventory_drop(x,y,z, 0) => 64 // removed and spawned in the world a full stack of items\\n```\\n\\nThrows `unknown_item` if item doesn't exist.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/inventory/inventory_find/\",\"plain\":\"Finds the first slot with a corresponding item in the inventory, or if queried with null: the first empty slot. Returns slot number if found, or null otherwise. Optional start_slot argument allows to skip all preceeding slots allowing for efficient (so not slot-by-slot) inventory search for items.\\ninventory_find(player(), 'stone') => 0 // player has stone in first hotbar slot inventory_find(player(), null) => null // player's inventory has no empty spot while( (slot = inventory_find(p, 'diamond', slot)) != null, 41, drop_item(p, slot) ) // spits all diamonds from player inventory wherever they are inventory_drop(x,y,z, 0) => 64 // removed and spawned in the world a full stack of items Throws unknown_item if item doesn’t exist.\",\"signatures\":[{\"params\":[{\"name\":\"inventory\"},{\"name\":\"item\"},{\"name\":\"start_slot\"}]}]},\"inventory_get\":{\"markdown\":\"Returns the item in the corresponding inventory slot, or null if slot empty or\\ninventory is invalid. You can use negative numbers to indicate slots counted\\nfrom 'the back'.\\n\\n```scarpet\\ninventory_get(player(), 0) => null // nothing in first hotbar slot\\ninventory_get(x,y,z, 5) => ['stone', 1, {}]\\ninventory_get(player(), -1) => ['diamond_pickaxe', 1, {Damage:4}] // slightly damaged diamond pick in the offhand\\n```\",\"permalink\":\"https://scarpet.pages.dev/minecraft/inventory/inventory_get/\",\"plain\":\"Returns the item in the corresponding inventory slot, or null if slot empty or inventory is invalid. You can use negative numbers to indicate slots counted from ’the back'.\\ninventory_get(player(), 0) => null // nothing in first hotbar slot inventory_get(x,y,z, 5) => ['stone', 1, {}] inventory_get(player(), -1) => ['diamond_pickaxe', 1, {Damage:4}] // slightly damaged diamond pick in the offhand \",\"signatures\":[{\"params\":[{\"name\":\"inventory\"},{\"name\":\"slot\"}]}]},\"inventory_has_items\":{\"markdown\":\"Returns true, if the inventory is not empty, false if it is empty, and null, if\\nits not an inventory.\\n\\n```scarpet\\ninventory_has_items(player()); // => true\\ninventory_has_items(x, y, z); // => false empty chest\\ninventory_has_items(block(pos)); // => null stone\\n```\",\"permalink\":\"https://scarpet.pages.dev/minecraft/inventory/inventory_has_items/\",\"plain\":\"Returns true, if the inventory is not empty, false if it is empty, and null, if its not an inventory.\\ninventory_has_items(player()); // => true inventory_has_items(x, y, z); // => false empty chest inventory_has_items(block(pos)); // => null stone \",\"signatures\":[{\"params\":[{\"name\":\"inventory\"}]}]},\"inventory_remove\":{\"markdown\":\"Removes amount (defaults to 1) of item from inventory. If the inventory doesn't\\nhave the defined amount, nothing happens, otherwise the given amount of items is\\nremoved wherever they are in the inventory. Returns boolean whether the removal\\noperation was successful. Easiest way to remove a specific item from player\\ninventory without specifying the slot.\\n\\n### Returns\\n\\nReturns `true` on success.\\n\\n### Examples\\n\\n```scarpet\\ninventory_remove(player(), 'diamond'); // true: removed diamond from player inventory\\ninventory_remove(player(), 'diamond', 100); // false: player doesn't have 100 diamonds, nothing happened\\n```\",\"permalink\":\"https://scarpet.pages.dev/minecraft/inventory/inventory_remove/\",\"plain\":\"Removes amount (defaults to 1) of item from inventory. If the inventory doesn’t have the defined amount, nothing happens, otherwise the given amount of items is removed wherever they are in the inventory. Returns boolean whether the removal operation was successful. Easiest way to remove a specific item from player inventory without specifying the slot.\\nReturns Returns true on success.\\nExamples inventory_remove(player(), 'diamond'); // true: removed diamond from player inventory inventory_remove(player(), 'diamond', 100); // false: player doesn't have 100 diamonds, nothing happened \",\"signatures\":[{\"params\":[{\"name\":\"inventory\"},{\"name\":\"item\"},{\"name\":\"amount\"}]}]},\"inventory_set\":{\"markdown\":\"Modifies or sets a stack in inventory. specify count 0 to empty the slot. If\\nitem is not specified, keeps existing item, just modifies the count. If item is\\nprovided - replaces current item. If nbt is provided - adds a tag to the stack\\nat slot. Returns previous stack in that slot.\\n\\n```scarpet\\ninventory_set(player(), 0, 0) => ['stone', 64, {}] // player had a stack of stone in first hotbar slot\\ninventory_set(player(), 0, 6) => ['diamond', 64, {}] // changed stack of diamonds in player slot to 6\\ninventory_set(player(), 0, 1, 'diamond_axe','{Damage:5}') => null //added slightly damaged diamond axe to first player slot\\n```\",\"permalink\":\"https://scarpet.pages.dev/minecraft/inventory/inventory_set/\",\"plain\":\"Modifies or sets a stack in inventory. specify count 0 to empty the slot. If item is not specified, keeps existing item, just modifies the count. If item is provided - replaces current item. If nbt is provided - adds a tag to the stack at slot. Returns previous stack in that slot.\\ninventory_set(player(), 0, 0) => ['stone', 64, {}] // player had a stack of stone in first hotbar slot inventory_set(player(), 0, 6) => ['diamond', 64, {}] // changed stack of diamonds in player slot to 6 inventory_set(player(), 0, 1, 'diamond_axe','{Damage:5}') => null //added slightly damaged diamond axe to first player slot \",\"signatures\":[{\"params\":[{\"name\":\"inventory\"},{\"name\":\"slot\"},{\"name\":\"count\"},{\"name\":\"item\"},{\"name\":\"nbt\"}]}]},\"inventory_size\":{\"markdown\":\"Returns the size of the inventory for the entity or block in question. Returns\\nnull if the block or entity don't have an inventory.\\n\\n```scarpet\\ninventory_size(player()) => 41\\ninventory_size('enderchest', player()) => 27 // enderchest\\ninventory_size('equipment', player()) => 6 // equipment\\ninventory_size(null, player()) => 41  // default inventory for players\\n\\ninventory_size(x,y,z) => 27 // chest\\ninventory_size(block(pos)) => 5 // hopper\\n\\nhorse = spawn('horse', x, y, z);\\ninventory_size(horse); => 2 // default horse inventory\\ninventory_size('equipment', horse); => 6 // unused horse equipment inventory\\ninventory_size(null, horse); => 2 // default horse\\n\\ncreeper = spawn('creeper', x, y, z);\\ninventory_size(creeper); => 6 // default creeper inventory is equipment since it has no other\\ninventory_size('equipment', creeper); => 6 // unused horse equipment inventory\\ninventory_size(null, creeper); => 6 // creeper default is its equipment\\n```\",\"permalink\":\"https://scarpet.pages.dev/minecraft/inventory/inventory_size/\",\"plain\":\"Returns the size of the inventory for the entity or block in question. Returns null if the block or entity don’t have an inventory.\\ninventory_size(player()) => 41 inventory_size('enderchest', player()) => 27 // enderchest inventory_size('equipment', player()) => 6 // equipment inventory_size(null, player()) => 41 // default inventory for players inventory_size(x,y,z) => 27 // chest inventory_size(block(pos)) => 5 // hopper horse = spawn('horse', x, y, z); inventory_size(horse); => 2 // default horse inventory inventory_size('equipment', horse); => 6 // unused horse equipment inventory inventory_size(null, horse); => 2 // default horse creeper = spawn('creeper', x, y, z); inventory_size(creeper); => 6 // default creeper inventory is equipment since it has no other inventory_size('equipment', creeper); => 6 // unused horse equipment inventory inventory_size(null, creeper); => 6 // creeper default is its equipment \",\"signatures\":[{\"params\":[{\"name\":\"inventory\"}]}]},\"is_chunk_generated\":{\"markdown\":\"Returns `true` if the region file for the chunk exists, `false` otherwise. If\\noptional force is `true` it will also check if the chunk has a non-empty entry\\nin its region file Can be used to assess if the chunk has been touched by the\\ngame or not.\\n\\n`generation_status(pos, false)` only works on currently loaded chunks, and\\n`generation_status(pos, true)` will create an empty loaded chunk, even if it is\\nnot needed, so `is_chunk_generated` can be used as a efficient proxy to\\ndetermine if the chunk physically exists.\\n\\nRunning `is_chunk_generated` is has no effects on the world, but since it is an\\nexternal file operation, it is considerably more expensive (unless area is\\nloaded) than other generation and loaded checks.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/is_chunk_generated/\",\"plain\":\"Returns true if the region file for the chunk exists, false otherwise. If optional force is true it will also check if the chunk has a non-empty entry in its region file Can be used to assess if the chunk has been touched by the game or not.\\ngeneration_status(pos, false) only works on currently loaded chunks, and generation_status(pos, true) will create an empty loaded chunk, even if it is not needed, so is_chunk_generated can be used as a efficient proxy to determine if the chunk physically exists.\\nRunning is_chunk_generated is has no effects on the world, but since it is an external file operation, it is considerably more expensive (unless area is loaded) than other generation and loaded checks.\",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]},{\"params\":[{\"name\":\"pos\"},{\"name\":\"force\"}]}]},\"item_display_name\":{\"markdown\":\"Returns the name of the item as a Text Value. `item` should be a list of\\n`[item_name, count, nbt]`, or just an item name.\\n\\nPlease note that it is a translated value. treating it like a string\\n(eg.slicing, breaking, changing its case) will turn it back into a normal string\\nwithout translatable properties. just like a colorful formatted text loose its\\ncolor. And the result of it converting to a string will use en-us (in a server)\\nor your single player's language, but when you use print() or others functions\\nthat accept a text value to broadcast it to players, it will use each player's\\nown language.\\n\\nIf the item is renamed, it will also be reflected in the results.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/item_display_name/\",\"plain\":\"Returns the name of the item as a Text Value. item should be a list of [item_name, count, nbt], or just an item name.\\nPlease note that it is a translated value. treating it like a string (eg.slicing, breaking, changing its case) will turn it back into a normal string without translatable properties. just like a colorful formatted text loose its color. And the result of it converting to a string will use en-us (in a server) or your single player’s language, but when you use print() or others functions that accept a text value to broadcast it to players, it will use each player’s own language.\\nIf the item is renamed, it will also be reflected in the results.\",\"signatures\":[{\"params\":[{\"name\":\"item\"}]}]},\"item_list\":{\"markdown\":\"With no arguments, returns a list of all items in the game. With an item tag\\nprovided, list items matching the tag, or `null` if tag is not valid.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/inventory/item_list/\",\"plain\":\"With no arguments, returns a list of all items in the game. With an item tag provided, list items matching the tag, or null if tag is not valid.\",\"signatures\":[{\"params\":[{\"name\":\"tag\"}]}]},\"item_tags\":{\"markdown\":\"Returns list of tags the item belongs to, or, if tag is provided, `true` if an\\nitem matches the tag, `false` if it doesn't and `null` if that's not a valid tag\\n\\nThrows `unknown_item` if item doesn't exist.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/inventory/item_tags/\",\"plain\":\"Returns list of tags the item belongs to, or, if tag is provided, true if an item matches the tag, false if it doesn’t and null if that’s not a valid tag\\nThrows unknown_item if item doesn’t exist.\",\"signatures\":[{\"params\":[{\"name\":\"item\"},{\"name\":\"tag\"}]}]},\"join\":{\"markdown\":\"Returns a string that contains joined elements of the list, iterator, or all\\nvalues, concatenated with `delim` delimiter\\n\\n```scarpet\\njoin('-',range(10))  => 0-1-2-3-4-5-6-7-8-9\\njoin('-','foo')  => foo\\njoin('-', 'foo', 'bar')  => foo-bar\\n```\",\"permalink\":\"https://scarpet.pages.dev/builtins/functions/join/\",\"plain\":\"Returns a string that contains joined elements of the list, iterator, or all values, concatenated with delim delimiter\\njoin('-',range(10)) => 0-1-2-3-4-5-6-7-8-9 join('-','foo') => foo join('-', 'foo', 'bar') => foo-bar \",\"signatures\":[{\"params\":[{\"name\":\"delim\"},{\"name\":\"list\"}]},{\"params\":[{\"name\":\"delim\"},{\"name\":\"values\",\"rest\":true}]}]},\"keys\":{\"permalink\":\"https://scarpet.pages.dev/builtins/functions/keys/\"},\"last_tick_times\":{\"deprecated\":\"Deprecated — use [`system_info('server_last_tick_times')`](/minecraft/auxillary/system_info/#server_last_tick_times)\",\"markdown\":\"Returns a 100-long array of recent tick times, in milliseconds. First item on\\nthe list is the most recent tick If called outside of the main tick (either\\nthrough scheduled tasks, or async execution), then the first item on the list\\nmay refer to the previous tick performance. In this case the last entry\\n(tick 100) would refer to the most current tick. For all intent and purpose,\\n`last_tick_times():0` should be used as last tick execution time, but individual\\ntick times may vary greatly, and these need to be taken with the little grain of\\naveraging.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/last_tick_times/\",\"plain\":\"Returns a 100-long array of recent tick times, in milliseconds. First item on the list is the most recent tick If called outside of the main tick (either through scheduled tasks, or async execution), then the first item on the list may refer to the previous tick performance. In this case the last entry (tick 100) would refer to the most current tick. For all intent and purpose, last_tick_times():0 should be used as last tick execution time, but individual tick times may vary greatly, and these need to be taken with the little grain of averaging.\",\"signatures\":[{\"params\":[]}]},\"length\":{\"markdown\":\"Returns length of the expression, the length of the string, the length of the\\ninteger part of the number, or length of the list\\n\\n```scarpet\\nlength(pi) => 1\\nlength(pi*pi) => 1\\nlength(pi^pi) => 2\\nlength([]) => 0\\nlength([1,2,3]) => 3\\nlength('') => 0\\nlength('foo') => 3\\n```\",\"permalink\":\"https://scarpet.pages.dev/builtins/functions/length/\",\"plain\":\"Returns length of the expression, the length of the string, the length of the integer part of the number, or length of the list\\nlength(pi) => 1 length(pi*pi) => 1 length(pi^pi) => 2 length([]) => 0 length([1,2,3]) => 3 length('') => 0 length('foo') => 3 \",\"signatures\":[{\"params\":[{\"name\":\"expr\"}]}]},\"light\":{\"markdown\":\"Numeric function, returning the total light level at position.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/light/\",\"plain\":\"Numeric function, returning the total light level at position.\",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"liquid\":{\"markdown\":\"Boolean function, true if the block is liquid, or waterlogged (with any liquid).\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/liquid/\",\"plain\":\"Boolean function, true if the block is liquid, or waterlogged (with any liquid).\",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"list_files\":{\"markdown\":\"With the specified `resource` in the scripts folder, of a specific `type`,\\nwrites/appends `data` to it, reads its content, deletes the resource, or lists\\nother files under this resource.\\n\\nResource is identified by a path to the file. A path can contain letters,\\nnumbers, characters `-`, `+`, or `_`, and a folder separator: `'/'`. Any other\\ncharacters are stripped from the name. Empty descriptors are invalid, except for\\n`list_files` where it means the root folder. Do not add file extensions to the\\ndescriptor - extensions are inferred based on the `type` of the file. A path can\\nhave one `'.zip'` component indicating a zip folder allowing to read / write to\\nand from zip files, although you cannot nest zip files in other zip files.\\n\\nResources can be located in the app specific space, or a shared space for all\\nthe apps. Accessing of app-specific resources is guaranteed to be isolated from\\nother apps. Shared resources are... well, shared across all apes, meaning they\\ncan eat of each others file, however all access to files is synchronized, and\\nfiles are never left open, so this should not lead to any access problems.\\n\\nIf the app's name is `'foo'`, the script location would be\\n`world/scripts/foo.sc`, app specific data directory is under\\n`world/scripts/foo.data/...`, and shared data space is under\\n`world/scripts/shared/...`.\\n\\nThe default no-name app, via `/script run` command can only save/load/read files\\nfrom the shared space.\\n\\nFunctions return `null` if no file is present (for read, list and delete\\noperations). Returns `true` for success writes and deletes, and requested data,\\nbased on the file type, for read operations. It returns list of files for folder\\nlisting.\\n\\nSupported values for resource `type` are:\\n\\n- `nbt` - NBT tag\\n- `json` - JSON file\\n- `text` - text resource with automatic newlines added\\n- `raw` - text resource without implied newlines\\n- `folder` - for `list_files` only - indicating folder listing instead of files\\n- `shared_nbt`, `shared_text`, `shared_raw`, `shared_folder`, `shared_json` -\\n  shared versions of the above\\n\\nNBT files have extension `.nbt`, store one NBT tag, and return a NBT type value.\\nJSON files have `.json` extension, store Scarpet numbers, strings, lists, maps\\nand `null` values. Anything else will be saved as a string (including NBT). Text\\nfiles have `.txt` extension, stores multiple lines of text and returns lists of\\nall lines from the file. With `write_file`, multiple lines can be sent to the\\nfile at once. The only difference between `raw` and `text` types are automatic\\nnewlines added after each record to the file. Since files are closed after each\\nwrite, sending multiple lines of data to write is beneficial for writing speed.\\nTo send multiple packs of data, either provide them flat or as a list in the\\nthird argument.\\n\\nThrows:\\n\\n- `nbt_read_error`: When failed to read NBT file.\\n- `json_read_error`: When failed to read JSON file. The exception data will\\n  contain details about the problem.\\n- `io_exception`: For all other errors when handling data on disk not related to\\n  encoding issues\\n\\nAll other errors resulting of improper use of input arguments should result in\\n`null` returned from the function, rather than exception thrown.\\n\\n```scarpet\\nwrite_file('foo', 'shared_text, ['one', 'two']);\\nwrite_file('foo', 'shared_text', 'three\\\\n', 'four\\\\n');\\nwrite_file('foo', 'shared_raw', 'five\\\\n', 'six\\\\n');\\n\\nread_file('foo', 'shared_text')     => ['one', 'two', 'three', '', 'four', '', 'five', 'six']\\n```\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/list_files/\",\"plain\":\"With the specified resource in the scripts folder, of a specific type, writes/appends data to it, reads its content, deletes the resource, or lists other files under this resource.\\nResource is identified by a path to the file. A path can contain letters, numbers, characters -, +, or _, and a folder separator: '/'. Any other characters are stripped from the name. Empty descriptors are invalid, except for list_files where it means the root folder. Do not add file extensions to the descriptor - extensions are inferred based on the type of the file. A path can have one '.zip' component indicating a zip folder allowing to read / write to and from zip files, although you cannot nest zip files in other zip files.\\nResources can be located in the app specific space, or a shared space for all the apps. Accessing of app-specific resources is guaranteed to be isolated from other apps. Shared resources are… well, shared across all apes, meaning they can eat of each others file, however all access to files is synchronized, and files are never left open, so this should not lead to any access problems.\\nIf the app’s name is 'foo', the script location would be world/scripts/foo.sc, app specific data directory is under world/scripts/foo.data/..., and shared data space is under world/scripts/shared/....\\nThe default no-name app, via /script run command can only save/load/read files from the shared space.\\nFunctions return null if no file is present (for read, list and delete operations). Returns true for success writes and deletes, and requested data, based on the file type, for read operations. It returns list of files for folder listing.\\nSupported values for resource type are:\\nnbt - NBT tag json - JSON file text - text resource with automatic newlines added raw - text resource without implied newlines folder - for list_files only - indicating folder listing instead of files shared_nbt, shared_text, shared_raw, shared_folder, shared_json - shared versions of the above NBT files have extension .nbt, store one NBT tag, and return a NBT type value. JSON files have .json extension, store Scarpet numbers, strings, lists, maps and null values. Anything else will be saved as a string (including NBT). Text files have .txt extension, stores multiple lines of text and returns lists of all lines from the file. With write_file, multiple lines can be sent to the file at once. The only difference between raw and text types are automatic newlines added after each record to the file. Since files are closed after each write, sending multiple lines of data to write is beneficial for writing speed. To send multiple packs of data, either provide them flat or as a list in the third argument.\\nThrows:\\nnbt_read_error: When failed to read NBT file. json_read_error: When failed to read JSON file. The exception data will contain details about the problem. io_exception: For all other errors when handling data on disk not related to encoding issues All other errors resulting of improper use of input arguments should result in null returned from the function, rather than exception thrown.\\nwrite_file('foo', 'shared_text, ['one', 'two']); write_file('foo', 'shared_text', 'three\\\\n', 'four\\\\n'); write_file('foo', 'shared_raw', 'five\\\\n', 'six\\\\n'); read_file('foo', 'shared_text') => ['one', 'two', 'three', '', 'four', '', 'five', 'six'] \",\"signatures\":[{\"params\":[{\"name\":\"resource\"},{\"name\":\"type\"}]}]},\"ln\":{\"markdown\":\"Returns the natural logarithm of a number.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/ln/\",\"plain\":\"Returns the natural logarithm of a number.\",\"signatures\":[{\"params\":[{\"name\":\"n\"}]}]},\"ln1p\":{\"markdown\":\"Returns an approximation of the natural logarithm of `1 + n`, so\\n`ln1p(n) ≈ ln(1 + n)`.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/ln1p/\",\"plain\":\"Returns an approximation of the natural logarithm of 1 + n, so ln1p(n) ≈ ln(1 + n).\",\"signatures\":[{\"params\":[{\"name\":\"n\"}]}]},\"load_app_data\":{\"markdown\":\"NOTE: usages with arguments, so `load_app_data(file)` and\\n`load_app_data(file, shared?)` are deprecated. Use `read_file` instead.\\n\\nLoads the app data associated with the app from the world /scripts folder.\\nWithout argument returns the memory managed and buffered / throttled NBT tag.\\nWith a file name, reads explicitly a file with that name from the scripts folder\\nthat belongs exclusively to the app. if `shared` is true, the file location is\\nnot exclusive to the app anymore, but located in a shared app space.\\n\\nFile descriptor can contain letters, numbers and folder separator: `'/'`. Any\\nother characters are stripped from the name before saving/loading. Empty\\ndescriptors are invalid. Do not add file extensions to the descriptor\\n\\nFunction returns nbt value with the file content, or `null` if the file is\\nmissing or there were problems with retrieving the data.\\n\\nThe default no-name app, via `/script run` command can only save/load file from\\nthe shared data location.\\n\\nIf the app's name is `'foo'`, the script location would be\\n`world/scripts/foo.sc`, system-managed default app data storage is in\\n`world/scripts/foo.data.nbt`, app specific data directory is under\\n`world/scripts/foo.data/bar/../baz.nbt`, and shared data space is under\\n`world/scripts/shared/bar/../baz.nbt`.\\n\\nYou can use app data to save non-vanilla information separately from the world\\nand other scripts.\\n\\nThrows `nbt_read_error` if failed to read app data.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/load_app_data/\",\"plain\":\"NOTE: usages with arguments, so load_app_data(file) and load_app_data(file, shared?) are deprecated. Use read_file instead.\\nLoads the app data associated with the app from the world /scripts folder. Without argument returns the memory managed and buffered / throttled NBT tag. With a file name, reads explicitly a file with that name from the scripts folder that belongs exclusively to the app. if shared is true, the file location is not exclusive to the app anymore, but located in a shared app space.\\nFile descriptor can contain letters, numbers and folder separator: '/'. Any other characters are stripped from the name before saving/loading. Empty descriptors are invalid. Do not add file extensions to the descriptor\\nFunction returns nbt value with the file content, or null if the file is missing or there were problems with retrieving the data.\\nThe default no-name app, via /script run command can only save/load file from the shared data location.\\nIf the app’s name is 'foo', the script location would be world/scripts/foo.sc, system-managed default app data storage is in world/scripts/foo.data.nbt, app specific data directory is under world/scripts/foo.data/bar/../baz.nbt, and shared data space is under world/scripts/shared/bar/../baz.nbt.\\nYou can use app data to save non-vanilla information separately from the world and other scripts.\\nThrows nbt_read_error if failed to read app data.\",\"signatures\":[{\"params\":[]}]},\"loaded\":{\"markdown\":\"Boolean function, true if the block is accessible for the game mechanics.\\nNormally `scarpet` doesn't check if operates on loaded area - the game will\\nautomatically load missing blocks. We see this as an advantage. Vanilla\\n`fill/clone` commands only check the specified corners for loadness.\\n\\nTo check if a block is truly loaded, I mean in memory, use\\n`generation_status(x) != null`, as chunks can still be loaded outside of the\\nplayable area, just are not used by any of the game mechanic processes.\\n\\n```scarpet\\nloaded(pos(player()))  => 1\\nloaded(100000,100,1000000)  => 0\\n```\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/loaded/\",\"plain\":\"Boolean function, true if the block is accessible for the game mechanics. Normally scarpet doesn’t check if operates on loaded area - the game will automatically load missing blocks. We see this as an advantage. Vanilla fill/clone commands only check the specified corners for loadness.\\nTo check if a block is truly loaded, I mean in memory, use generation_status(x) != null, as chunks can still be loaded outside of the playable area, just are not used by any of the game mechanic processes.\\nloaded(pos(player())) => 1 loaded(100000,100,1000000) => 0 \",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"loaded_ep\":{\"deprecated\":\"Deprecated — use [`loaded_status()`](/minecraft/world/loaded_status/)\",\"markdown\":\"Boolean function, true if the block is loaded and entity processing, as per\\n1.13.2\\n\\nDeprecated as of scarpet 1.6, use `loaded_status(x) > 0`, or just `loaded(x)`\\nwith the same effect\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/loaded_ep/\",\"plain\":\"Boolean function, true if the block is loaded and entity processing, as per 1.13.2\\nDeprecated as of scarpet 1.6, use loaded_status(x) > 0, or just loaded(x) with the same effect\",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"loaded_status\":{\"markdown\":\"Returns loaded status as per new 1.14 chunk ticket system, 0 for inaccessible, 1\\nfor border chunk, 2 for redstone ticking, 3 for entity ticking\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/loaded_status/\",\"plain\":\"Returns loaded status as per new 1.14 chunk ticket system, 0 for inaccessible, 1 for border chunk, 2 for redstone ticking, 3 for entity ticking\",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"log\":{\"markdown\":\"Returns the binary logarithm of a number.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/log/\",\"plain\":\"Returns the binary logarithm of a number.\",\"signatures\":[{\"params\":[{\"name\":\"n\"}]}]},\"log10\":{\"markdown\":\"Returns the decimal logarithm of a number.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/log10/\",\"plain\":\"Returns the decimal logarithm of a number.\",\"signatures\":[{\"params\":[{\"name\":\"n\"}]}]},\"log1p\":{\"markdown\":\"Returns an approximation of the binary logarithm of `1 + n`, so\\n`log1p(n) ≈ log(1 + n)`.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/log1p/\",\"plain\":\"Returns an approximation of the binary logarithm of 1 + n, so log1p(n) ≈ log(1 + n).\",\"signatures\":[{\"params\":[{\"name\":\"n\"}]}]},\"logger\":{\"markdown\":\"Prints the message to system logs, and not to chat. By default prints an info,\\nunless you specify otherwise in the `type` parameter.\\n\\nAvailable output types:\\n\\n`'debug'`, `'warn'`, `'fatal'`, `'info'` and `'error'`\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/logger/\",\"plain\":\"Prints the message to system logs, and not to chat. By default prints an info, unless you specify otherwise in the type parameter.\\nAvailable output types:\\n'debug', 'warn', 'fatal', 'info' and 'error'\",\"signatures\":[{\"params\":[{\"name\":\"message\"}]},{\"params\":[{\"name\":\"level\"},{\"name\":\"message\"}]}]},\"lower\":{\"markdown\":\"Returns a new string representing the value of string converted to lower case.\\n\\n### Examples\\n\\n```scarpet\\nprint(lower('ABc')); // 'abc'\\n```\",\"permalink\":\"https://scarpet.pages.dev/builtins/string/lower/\",\"plain\":\"Returns a new string representing the value of string converted to lower case.\\nExamples print(lower('ABc')); // 'abc' \",\"signatures\":[{\"params\":[{\"name\":\"string\"}]}]},\"mandelbrot\":{\"markdown\":\"Computes the value of the mandelbrot set, for set `a` and `b` spot. Spot the\\nbeetle. Why not.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/mandelbrot/\",\"plain\":\"Computes the value of the mandelbrot set, for set a and b spot. Spot the beetle. Why not.\",\"signatures\":[{\"params\":[{\"name\":\"a\"},{\"name\":\"b\"},{\"name\":\"limit\"}]}]},\"map\":{\"markdown\":\"Converts a `list` of values, to another list where each value is result of an\\nexpression `v = expr(_, _i)` where `_` is passed as each element of the list,\\nand `_i` is the index of such element. If `break` is called the map returns\\nwhatever collected thus far. If `continue` and `break` are used with supplied\\nargument, it is used in place of the resulting map element, otherwise current\\nelement is skipped.\\n\\n```scarpet\\nmap(range(10), _*_); // [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\\nmap(player('*'), _+' is stoopid'); // ['gnembon is stoopid', 'herobrine is stoopid']\\n```\",\"permalink\":\"https://scarpet.pages.dev/builtins/iteration/map/\",\"plain\":\"Converts a list of values, to another list where each value is result of an expression v = expr(_, _i) where _ is passed as each element of the list, and _i is the index of such element. If break is called the map returns whatever collected thus far. If continue and break are used with supplied argument, it is used in place of the resulting map element, otherwise current element is skipped.\\nmap(range(10), _*_); // [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] map(player('*'), _+' is stoopid'); // ['gnembon is stoopid', 'herobrine is stoopid'] \",\"signatures\":[{\"params\":[{\"name\":\"list\"},{\"binds\":[\"_\",\"_i\"],\"name\":\"expr\"}]}]},\"map_colour\":{\"markdown\":\"Returns the map colour of a block at position. One of:\\n\\n`'air'`, `'grass'`, `'sand'`, `'wool'`, `'tnt'`, `'ice'`, `'iron'`, `'foliage'`,\\n`'snow'`, `'clay'`, `'dirt'`, `'stone'`, `'water'`, `'wood'`, `'quartz'`,\\n`'adobe'`, `'magenta'`, `'light_blue'`, `'yellow'`, `'lime'`, `'pink'`,\\n`'gray'`, `'light_gray'`, `'cyan'`, `'purple'`, `'blue'`, `'brown'`, `'green'`,\\n`'red'`, `'black'`, `'gold'`, `'diamond'`, `'lapis'`, `'emerald'`, `'obsidian'`,\\n`'netherrack'`, `'white_terracotta'`, `'orange_terracotta'`,\\n`'magenta_terracotta'`, `'light_blue_terracotta'`, `'yellow_terracotta'`,\\n`'lime_terracotta'`, `'pink_terracotta'`, `'gray_terracotta'`,\\n`'light_gray_terracotta'`, `'cyan_terracotta'`, `'purple_terracotta'`,\\n`'blue_terracotta'`, `'brown_terracotta'`, `'green_terracotta'`,\\n`'red_terracotta'`, `'black_terracotta'`, `'crimson_nylium'`, `'crimson_stem'`,\\n`'crimson_hyphae'`, `'warped_nylium'`, `'warped_stem'`, `'warped_hyphae'`,\\n`'warped_wart'`\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/map_colour/\",\"plain\":\"Returns the map colour of a block at position. One of:\\n'air', 'grass', 'sand', 'wool', 'tnt', 'ice', 'iron', 'foliage', 'snow', 'clay', 'dirt', 'stone', 'water', 'wood', 'quartz', 'adobe', 'magenta', 'light_blue', 'yellow', 'lime', 'pink', 'gray', 'light_gray', 'cyan', 'purple', 'blue', 'brown', 'green', 'red', 'black', 'gold', 'diamond', 'lapis', 'emerald', 'obsidian', 'netherrack', 'white_terracotta', 'orange_terracotta', 'magenta_terracotta', 'light_blue_terracotta', 'yellow_terracotta', 'lime_terracotta', 'pink_terracotta', 'gray_terracotta', 'light_gray_terracotta', 'cyan_terracotta', 'purple_terracotta', 'blue_terracotta', 'brown_terracotta', 'green_terracotta', 'red_terracotta', 'black_terracotta', 'crimson_nylium', 'crimson_stem', 'crimson_hyphae', 'warped_nylium', 'warped_stem', 'warped_hyphae', 'warped_wart'\",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"material\":{\"deprecated\":\"Deprecated — block material is removed\",\"markdown\":\"Returns `'unknown'`. The concept of material for blocks is removed. On previous\\nversions it returned the name of the material the block was made of.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/material/\",\"plain\":\"Returns 'unknown'. The concept of material for blocks is removed. On previous versions it returned the name of the material the block was made of.\",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"max\":{\"markdown\":\"Returns the largest of the input arguments.\\n\\nCompute minimum or maximum of supplied arguments assuming default sorthoraphical\\norder. In case you are missing `argmax`, just use `a ~ max(a)`, little less\\nefficient, but still fun.\\n\\nInteresting bit - `min` and `max` don't remove variable associations from\\narguments, which means can be used as LHS of assignments (obvious case), or\\nargument spec in function definitions (far less obvious).\\n\\n```scarpet\\na = 1; b = 2; min(a,b) = 3; [a,b]  => [3, 2]\\na = 1; b = 2; fun(x, min(a,b)) -> [a,b]; fun(3,5)  => [5, 0]\\n```\\n\\nAbsolutely no idea, how the latter might be useful in practice. But since it\\ncompiles, can ship it.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/max/\",\"plain\":\"Returns the largest of the input arguments.\\nCompute minimum or maximum of supplied arguments assuming default sorthoraphical order. In case you are missing argmax, just use a ~ max(a), little less efficient, but still fun.\\nInteresting bit - min and max don’t remove variable associations from arguments, which means can be used as LHS of assignments (obvious case), or argument spec in function definitions (far less obvious).\\na = 1; b = 2; min(a,b) = 3; [a,b] => [3, 2] a = 1; b = 2; fun(x, min(a,b)) -> [a,b]; fun(3,5) => [5, 0] Absolutely no idea, how the latter might be useful in practice. But since it compiles, can ship it.\",\"signatures\":[{\"params\":[{\"name\":\"arg\"},{\"name\":\"args\",\"rest\":true}]},{\"params\":[{\"name\":\"args\"}]}]},\"min\":{\"markdown\":\"Returns the smallest of the input arguments.\\n\\nCompute minimum or maximum of supplied arguments assuming default sorthoraphical\\norder. In case you are missing `argmax`, just use `a ~ max(a)`, little less\\nefficient, but still fun.\\n\\nInteresting bit - `min` and `max` don't remove variable associations from\\narguments, which means can be used as LHS of assignments (obvious case), or\\nargument spec in function definitions (far less obvious).\\n\\n```scarpet\\na = 1; b = 2; min(a,b) = 3; [a,b]  => [3, 2]\\na = 1; b = 2; fun(x, min(a,b)) -> [a,b]; fun(3,5)  => [5, 0]\\n```\\n\\nAbsolutely no idea, how the latter might be useful in practice. But since it\\ncompiles, can ship it.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/min/\",\"plain\":\"Returns the smallest of the input arguments.\\nCompute minimum or maximum of supplied arguments assuming default sorthoraphical order. In case you are missing argmax, just use a ~ max(a), little less efficient, but still fun.\\nInteresting bit - min and max don’t remove variable associations from arguments, which means can be used as LHS of assignments (obvious case), or argument spec in function definitions (far less obvious).\\na = 1; b = 2; min(a,b) = 3; [a,b] => [3, 2] a = 1; b = 2; fun(x, min(a,b)) -> [a,b]; fun(3,5) => [5, 0] Absolutely no idea, how the latter might be useful in practice. But since it compiles, can ship it.\",\"signatures\":[{\"params\":[{\"name\":\"arg\"},{\"name\":\"args\",\"rest\":true}]},{\"params\":[{\"name\":\"args\",\"type\":\"number[]\"}]}]},\"modify\":{\"markdown\":\"Manipulates player xp values - `'add_xp'` the method you probably want to use to\\nmanipulate how much 'xp' an action should give. `'xp_score'` only affects the\\nnumber you see when you die, and `'xp_progress'` controls the xp progressbar\\nabove the hotbar, should take values from 0 to 1, but you can set it to any\\nvalue, maybe you will get a double, who knows.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/entity/modify_xp_score/\",\"plain\":\"Manipulates player xp values - 'add_xp' the method you probably want to use to manipulate how much ‘xp’ an action should give. 'xp_score' only affects the number you see when you die, and 'xp_progress' controls the xp progressbar above the hotbar, should take values from 0 to 1, but you can set it to any value, maybe you will get a double, who knows.\",\"signatures\":[{\"params\":[{\"name\":\"entity\"},{\"name\":\"'xp_score'\"},{\"name\":\"value\"}]}]},\"nbt\":{\"markdown\":\"Treats the argument as a nbt serializable string and returns its nbt value. In\\ncase nbt is not in a correct nbt compound tag format, it will return `null`\\nvalue.\\n\\nConsult section about container operations in `Expression` to learn about\\npossible operations on nbt values.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/nbt/\",\"plain\":\"Treats the argument as a nbt serializable string and returns its nbt value. In case nbt is not in a correct nbt compound tag format, it will return null value.\\nConsult section about container operations in Expression to learn about possible operations on nbt values.\",\"signatures\":[{\"params\":[{\"name\":\"expr\"}]}]},\"nbt_storage\":{\"markdown\":\"Displays or modifies individual storage NBT tags. With no arguments, returns the\\nlist of current NBT storages. With specified `key`, returns the `nbt` associated\\nwith current `key`, or `null` if storage does not exist. With specified `key`\\nand `nbt`, sets a new `nbt` value, returning previous value associated with the\\n`key`. NOTE: This NBT storage is shared with all vanilla datapacks and scripts\\nof the entire server and is persistent between restarts and reloads. You can\\nalso access this NBT storage with vanilla\\n`/data <get|modify|merge> storage <key> ...` command.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/nbt_storage/\",\"plain\":\"Displays or modifies individual storage NBT tags. With no arguments, returns the list of current NBT storages. With specified key, returns the nbt associated with current key, or null if storage does not exist. With specified key and nbt, sets a new nbt value, returning previous value associated with the key. NOTE: This NBT storage is shared with all vanilla datapacks and scripts of the entire server and is persistent between restarts and reloads. You can also access this NBT storage with vanilla /data <get|modify|merge> storage <key> ... command.\",\"signatures\":[{\"params\":[]},{\"params\":[{\"name\":\"key\"}]},{\"params\":[{\"name\":\"key\"},{\"name\":\"value\"}]}]},\"nondecreasing\":{\"permalink\":\"https://scarpet.pages.dev/syntax/operators/nondecreasing/\",\"signatures\":[{\"params\":[{\"name\":\"x\"},{\"name\":\"y\"}]}]},\"number\":{\"markdown\":\"Returns a numeric context of the expression. Can be used to read numbers from\\nstrings, or other types\\n\\n```scarpet\\nnumber(null) => 0\\nnumber(false) => 0\\nnumber(true) => 1\\nnumber('') => null\\nnumber('3.14') => 3.14\\nnumber([]) => 0\\nnumber(['']) => 1\\nnumber('foo') => null\\nnumber('3bar') => null\\nnumber('2')+number('2') => 4\\n```\",\"permalink\":\"https://scarpet.pages.dev/builtins/functions/number/\",\"plain\":\"Returns a numeric context of the expression. Can be used to read numbers from strings, or other types\\nnumber(null) => 0 number(false) => 0 number(true) => 1 number('') => null number('3.14') => 3.14 number([]) => 0 number(['']) => 1 number('foo') => null number('3bar') => null number('2')+number('2') => 4 \",\"signatures\":[{\"params\":[{\"name\":\"expr\"}]}]},\"opacity\":{\"markdown\":\"Numeric function, returning the opacity level of a block.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/opacity/\",\"plain\":\"Numeric function, returning the opacity level of a block.\",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"outer\":{\"markdown\":\"Captures a variable from the outer scope.\\n\\n```scarpet\\nx = 2;\\nf(outer(x)) -> x += 1;\\nf();\\nx == 3\\n```\\n\\n`outer()` can only exist inside a function signature and only takes a single\\nvariable name as a parameter.\",\"permalink\":\"https://scarpet.pages.dev/syntax/control_flow/outer/\",\"plain\":\"Captures a variable from the outer scope.\\nx = 2; f(outer(x)) -> x += 1; f(); x == 3 outer() can only exist inside a function signature and only takes a single variable name as a parameter.\",\"signatures\":[{\"params\":[{\"name\":\"variable\",\"type\":\"variable\"}]}]},\"pairs\":{\"permalink\":\"https://scarpet.pages.dev/builtins/functions/pairs/\"},\"parse_nbt\":{\"markdown\":\"Converts NBT tag to a scarpet value, which you can navigate through much better.\\n\\nConverts:\\n\\n- Compound tags into maps with string keys\\n- List tags into list values\\n- Numbers (Ints, Floats, Doubles, Longs) into a number\\n- Rest is converted to strings.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/parse_nbt/\",\"plain\":\"Converts NBT tag to a scarpet value, which you can navigate through much better.\\nConverts:\\nCompound tags into maps with string keys List tags into list values Numbers (Ints, Floats, Doubles, Longs) into a number Rest is converted to strings. \",\"signatures\":[{\"params\":[{\"name\":\"tag\"}]}]},\"particle\":{\"markdown\":\"Renders a cloud of particles `name` centered around `pos` position, by default\\n`count` 10 of them, default `speed` of 0, and to all players nearby, but these\\noptions can be changed via optional arguments. Follow vanilla `/particle`\\ncommand on details on those options. Valid particle names are for example\\n`'angry_villager', 'item diamond', 'block stone', 'dust 0.8 0.1 0.1 4'`.\\n\\nUsed with no arguments, return the list of available particle names. Note that\\nsome of the names do not correspond to a valid particle that can be fed to\\n`particle(...)` function due to a fact that some particles need more\\nconfiguration to be valid, like `dust`, `block` etc. Should be used as a\\nreference only.\\n\\nThrows `unknown_particle` if particle doesn't exist.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/particle/\",\"plain\":\"Renders a cloud of particles name centered around pos position, by default count 10 of them, default speed of 0, and to all players nearby, but these options can be changed via optional arguments. Follow vanilla /particle command on details on those options. Valid particle names are for example 'angry_villager', 'item diamond', 'block stone', 'dust 0.8 0.1 0.1 4'.\\nUsed with no arguments, return the list of available particle names. Note that some of the names do not correspond to a valid particle that can be fed to particle(...) function due to a fact that some particles need more configuration to be valid, like dust, block etc. Should be used as a reference only.\\nThrows unknown_particle if particle doesn’t exist.\",\"signatures\":[{\"params\":[]},{\"params\":[{\"name\":\"name\"},{\"name\":\"pos\"}]},{\"params\":[{\"name\":\"name\"},{\"name\":\"pos\"},{\"name\":\"count\"}]},{\"params\":[{\"name\":\"name\"},{\"name\":\"pos\"},{\"name\":\"count\"},{\"name\":\"spread\"}]},{\"params\":[{\"name\":\"name\"},{\"name\":\"pos\"},{\"name\":\"count\"},{\"name\":\"spread\"},{\"name\":\"speed\"}]},{\"params\":[{\"name\":\"name\"},{\"name\":\"pos\"},{\"name\":\"count\"},{\"name\":\"spread\"},{\"name\":\"speed\"},{\"name\":\"player\"}]}]},\"particle_box\":{\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/particle_box/\",\"signatures\":[{\"params\":[{\"name\":\"name\"},{\"name\":\"pos\"},{\"name\":\"pos2\"},{\"name\":\"density\"},{\"name\":\"player\"}]}]},\"particle_line\":{\"markdown\":\"Renders a line of particles from point `pos` to `pos2` with supplied density\\n(defaults to 1), which indicates how far apart you would want particles to\\nappear, so `0.1` means one every 10cm. If a player (or player name) is supplied,\\nonly that player will receive particles.\\n\\nThrows `unknown_particle` if particle doesn't exist.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/particle_line/\",\"plain\":\"Renders a line of particles from point pos to pos2 with supplied density (defaults to 1), which indicates how far apart you would want particles to appear, so 0.1 means one every 10cm. If a player (or player name) is supplied, only that player will receive particles.\\nThrows unknown_particle if particle doesn’t exist.\",\"signatures\":[{\"params\":[{\"name\":\"name\"},{\"name\":\"pos\"},{\"name\":\"pos2\"},{\"name\":\"density\"},{\"name\":\"player\"}]}]},\"perlin\":{\"markdown\":\"returns a noise value from `0.0` to `1.0` (roughly) for 1, 2 or 3 dimensional\\ncoordinate. The default seed it samples from is `0`, but seed can be specified\\nas a 4th argument as well. In case you need 1D or 2D noise values with custom\\nseed, use `null` for `y` and `z`, or `z` arguments respectively.\\n\\nPerlin noise is based on a square grid and generates rougher maps comparing to\\nSimplex, which is creamier. Querying for lower-dimensional result, rather than\\naffixing unused dimensions to constants has a speed benefit,\\n\\nThou shall not sample from noise changing seed frequently. Scarpet will keep\\ntrack of the last 256 perlin seeds used for sampling providing similar speed\\ncomparing to the default seed of `0`. In case the app engine uses more than 256\\nseeds at the same time, switching between them can get much more expensive.\",\"permalink\":\"https://scarpet.pages.dev/builtins/functions/perlin/\",\"plain\":\"returns a noise value from 0.0 to 1.0 (roughly) for 1, 2 or 3 dimensional coordinate. The default seed it samples from is 0, but seed can be specified as a 4th argument as well. In case you need 1D or 2D noise values with custom seed, use null for y and z, or z arguments respectively.\\nPerlin noise is based on a square grid and generates rougher maps comparing to Simplex, which is creamier. Querying for lower-dimensional result, rather than affixing unused dimensions to constants has a speed benefit,\\nThou shall not sample from noise changing seed frequently. Scarpet will keep track of the last 256 perlin seeds used for sampling providing similar speed comparing to the default seed of 0. In case the app engine uses more than 256 seeds at the same time, switching between them can get much more expensive.\",\"signatures\":[{\"params\":[{\"name\":\"x\"},{\"name\":\"perlinx\"},{\"name\":\"y\"},{\"name\":\"perlinx\"},{\"name\":\"y\"},{\"name\":\"z\"},{\"name\":\"perlinx\"},{\"name\":\"y\"},{\"name\":\"z\"},{\"name\":\"seed\"}]}]},\"place_item\":{\"markdown\":\"Uses a given item in the world like it was used by a player. Item names are\\ndefault minecraft item name, less the minecraft prefix. Default facing is 'up',\\nbut there are other options: 'down', 'north', 'east', 'south', 'west', but also\\nthere are other secondary directions important for placement of blocks like\\nstairs, doors, etc. Try experiment with options like 'north-up' which is placed\\nfacing north with cursor pointing to the upper part of the block, or 'up-north',\\nwhich means a block placed facing up (player looking down) and placed smidge\\naway of the block center towards north. Optional sneak is a boolean indicating\\nif a player would be sneaking while placing the block - this option only affects\\nplacement of chests and scaffolding at the moment.\\n\\nWorks with items that have the right-click effect on the block placed, like\\n`bone_meal` on grass or axes on logs, but doesn't open chests / containers, so\\nhave no effect on interactive blocks, like TNT, comparators, etc.\\n\\nReturns true if placement/use was successful, false otherwise.\\n\\nThrows `unknown_item` if `item` doesn't exist\\n\\n```scarpet\\nplace_item('stone',x,y,z) // places a stone block on x,y,z block\\nplace_item('piston,x,y,z,'down') // places a piston facing down\\nplace_item('carrot',x,y,z) // attempts to plant a carrot plant. Returns true if could place carrots at that position.\\nplace_item('bone_meal',x,y,z) // attempts to bonemeal the ground.\\nplace_item('wooden_axe',x,y,z) // attempts to strip the log.\\n```\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/place_item/\",\"plain\":\"Uses a given item in the world like it was used by a player. Item names are default minecraft item name, less the minecraft prefix. Default facing is ‘up’, but there are other options: ‘down’, ’north’, ’east’, ‘south’, ‘west’, but also there are other secondary directions important for placement of blocks like stairs, doors, etc. Try experiment with options like ’north-up’ which is placed facing north with cursor pointing to the upper part of the block, or ‘up-north’, which means a block placed facing up (player looking down) and placed smidge away of the block center towards north. Optional sneak is a boolean indicating if a player would be sneaking while placing the block - this option only affects placement of chests and scaffolding at the moment.\\nWorks with items that have the right-click effect on the block placed, like bone_meal on grass or axes on logs, but doesn’t open chests / containers, so have no effect on interactive blocks, like TNT, comparators, etc.\\nReturns true if placement/use was successful, false otherwise.\\nThrows unknown_item if item doesn’t exist\\nplace_item('stone',x,y,z) // places a stone block on x,y,z block place_item('piston,x,y,z,'down') // places a piston facing down place_item('carrot',x,y,z) // attempts to plant a carrot plant. Returns true if could place carrots at that position. place_item('bone_meal',x,y,z) // attempts to bonemeal the ground. place_item('wooden_axe',x,y,z) // attempts to strip the log. \",\"signatures\":[{\"params\":[{\"name\":\"item\"},{\"name\":\"pos\"},{\"name\":\"facing\"},{\"name\":\"sneak\"}]}]},\"player\":{\"markdown\":\"With no arguments, it returns the calling player or the player closest to the\\ncaller. For player-scoped apps (which is a default) its always the owning player\\nor `null` if it not present even if some code still runs in their name. Note\\nthat the main context will receive `p` variable pointing to this player. With\\n`type` or `name` specified, it will try first to match a type, returning a list\\nof players matching a type, and if this fails, will assume its player name query\\nretuning player with that name, or `null` if no player was found. With `'all'`,\\nlist of all players in the game, in all dimensions, so end user needs to be\\ncautious, that you might be referring to wrong blocks and entities around the\\nplayer in question. With `type = '*'` it returns all players in caller\\ndimension, `'survival'` returns all survival and adventure players, `'creative'`\\nreturns all creative players, `'spectating'` returns all spectating players, and\\n`'!spectating'`, all not-spectating players. If all fails, with `name`, the\\nplayer in question, if he/she is logged in.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/entity/player/\",\"plain\":\"With no arguments, it returns the calling player or the player closest to the caller. For player-scoped apps (which is a default) its always the owning player or null if it not present even if some code still runs in their name. Note that the main context will receive p variable pointing to this player. With type or name specified, it will try first to match a type, returning a list of players matching a type, and if this fails, will assume its player name query retuning player with that name, or null if no player was found. With 'all', list of all players in the game, in all dimensions, so end user needs to be cautious, that you might be referring to wrong blocks and entities around the player in question. With type = '*' it returns all players in caller dimension, 'survival' returns all survival and adventure players, 'creative' returns all creative players, 'spectating' returns all spectating players, and '!spectating', all not-spectating players. If all fails, with name, the player in question, if he/she is logged in.\",\"signatures\":[{\"params\":[]},{\"params\":[{\"name\":\"name\"}]}]},\"plop\":{\"markdown\":\"Plops a structure or a feature at a given `pos`, so block, triple position\\ncoordinates or a list of coordinates. To `what` gets plopped and exactly where\\nit often depends on the feature or structure itself.\\n\\nRequires a `Structure Type`, `Structure`, `World Generation Feature` or\\n`Custom Scarpet Feature` name (see above). If standard name is used, the variant\\nof the structure may depend on the biome, otherwise the default structure for\\nthis type will be generated.\\n\\nAll structures are chunk aligned, and often span multiple chunks. Repeated calls\\nto plop a structure in the same chunk would result either in the same structure\\ngenerated on top of each other, or with different state, but same position. Most\\nstructures generate at specific altitudes, which are hardcoded, or with certain\\nblocks around them. API will cancel all extra position / biome / random\\nrequirements for structure / feature placement, but some hardcoded limitations\\nmay still cause some of structures/features not to place. Some features require\\nspecial blocks to be present, like coral -> water or ice spikes -> snow block,\\nand for some features, like fossils, placement is all sorts of messed up. This\\ncan be partially avoided for structures by setting their structure information\\nvia `set_structure`, which sets it without looking into world blocks, and then\\nuse `plop` to fill it with blocks. This may, or may not work.\\n\\nAll generated structures will retain their properties, like mob spawning,\\nhowever in many cases the world / dimension itself has certain rules to spawn\\nmobs, like plopping a nether fortress in the overworld will not spawn nether\\nmobs, because nether mobs can spawn only in the nether, but plopped in the\\nnether - will behave like a valid nether fortress.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/plop/\",\"plain\":\"Plops a structure or a feature at a given pos, so block, triple position coordinates or a list of coordinates. To what gets plopped and exactly where it often depends on the feature or structure itself.\\nRequires a Structure Type, Structure, World Generation Feature or Custom Scarpet Feature name (see above). If standard name is used, the variant of the structure may depend on the biome, otherwise the default structure for this type will be generated.\\nAll structures are chunk aligned, and often span multiple chunks. Repeated calls to plop a structure in the same chunk would result either in the same structure generated on top of each other, or with different state, but same position. Most structures generate at specific altitudes, which are hardcoded, or with certain blocks around them. API will cancel all extra position / biome / random requirements for structure / feature placement, but some hardcoded limitations may still cause some of structures/features not to place. Some features require special blocks to be present, like coral -> water or ice spikes -> snow block, and for some features, like fossils, placement is all sorts of messed up. This can be partially avoided for structures by setting their structure information via set_structure, which sets it without looking into world blocks, and then use plop to fill it with blocks. This may, or may not work.\\nAll generated structures will retain their properties, like mob spawning, however in many cases the world / dimension itself has certain rules to spawn mobs, like plopping a nether fortress in the overworld will not spawn nether mobs, because nether mobs can spawn only in the nether, but plopped in the nether - will behave like a valid nether fortress.\",\"signatures\":[{\"params\":[{\"name\":\"pos\"},{\"name\":\"what\"}]}]},\"poi\":{\"markdown\":\"Queries a POI (Point of Interest) at a given position, returning `null` if none\\nis found, or tuple of poi type and its occupancy load. With optional `type`,\\n`radius` and `status`, returns a list of POIs around `pos` within a given\\n`radius`. If the `type` is specified, returns only poi types of that types, or\\neverything if omitted or `'any'`. If `status` is specified (either `'any'`,\\n`'available'`, or `'occupied'`) returns only POIs with that status. With\\n`column_search` set to `true`, it will return all POIs in a cuboid with `radius`\\nblocks away on x and z, in the entire block column from 0 to 255. Default\\n(`false`) returns POIs within a spherical area centered on `pos` and with\\n`radius` radius.\\n\\nAll results of `poi` calls are returned in sorted order with respect to the\\neuclidean distance to the requested center of `pos`.\\n\\nThe return format of the results is a list of poi type, occupancy load, and\\nextra triple of coordinates.\\n\\nQuerying for POIs using the radius is the intended use of POI mechanics, and the\\nability of accessing individual POIs via `poi(pos)` in only provided for\\ncompleteness.\\n\\n```scarpet\\npoi(x,y,z) => null  // nothing set at position\\npoi(x,y,z) => ['meeting',3]  // its a bell-type meeting point occupied by 3 villagers\\npoi(x,y,z,5) => []  // nothing around\\npoi(x,y,z,5) => [['nether_portal',0,[7,8,9]],['nether_portal',0,[7,9,9]]] // two portal blocks in the range\\n```\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/poi/\",\"plain\":\"Queries a POI (Point of Interest) at a given position, returning null if none is found, or tuple of poi type and its occupancy load. With optional type, radius and status, returns a list of POIs around pos within a given radius. If the type is specified, returns only poi types of that types, or everything if omitted or 'any'. If status is specified (either 'any', 'available', or 'occupied') returns only POIs with that status. With column_search set to true, it will return all POIs in a cuboid with radius blocks away on x and z, in the entire block column from 0 to 255. Default (false) returns POIs within a spherical area centered on pos and with radius radius.\\nAll results of poi calls are returned in sorted order with respect to the euclidean distance to the requested center of pos.\\nThe return format of the results is a list of poi type, occupancy load, and extra triple of coordinates.\\nQuerying for POIs using the radius is the intended use of POI mechanics, and the ability of accessing individual POIs via poi(pos) in only provided for completeness.\\npoi(x,y,z) => null // nothing set at position poi(x,y,z) => ['meeting',3] // its a bell-type meeting point occupied by 3 villagers poi(x,y,z,5) => [] // nothing around poi(x,y,z,5) => [['nether_portal',0,[7,8,9]],['nether_portal',0,[7,9,9]]] // two portal blocks in the range \",\"signatures\":[{\"params\":[{\"name\":\"pos\"},{\"name\":\"poipos\"},{\"name\":\"radius\"},{\"name\":\"type\"},{\"name\":\"status\"},{\"name\":\"column_search\"}]}]},\"pos\":{\"markdown\":\"Returns a triple of coordinates of a specified block or entity. Technically\\nentities are queried with `query` function and the same can be achieved with\\n`query(entity,'pos')`, but for simplicity `pos` allows to pass all positional\\nobjects.\\n\\n```scarpet\\npos(block(0,5,0)) => [0,5,0]\\npos(player()) => [12.3, 45.6, 32.05]\\npos(block('stone')) => Error: Cannot fetch position of an unrealized block\\n```\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/pos/\",\"plain\":\"Returns a triple of coordinates of a specified block or entity. Technically entities are queried with query function and the same can be achieved with query(entity,'pos'), but for simplicity pos allows to pass all positional objects.\\npos(block(0,5,0)) => [0,5,0] pos(player()) => [12.3, 45.6, 32.05] pos(block('stone')) => Error: Cannot fetch position of an unrealized block \",\"signatures\":[{\"params\":[{\"name\":\"block\"},{\"name\":\"posentity\"}]}]},\"pos_offset\":{\"markdown\":\"Returns a coords triple that is offset in a specified `direction` by `amount` of\\nblocks. The default offset amount is 1 block. To offset into opposite facing,\\nuse negative numbers for the `amount`.\\n\\n```scarpet\\npos_offset(block(0,5,0), 'up', 2)  => [0,7,0]\\npos_offset([0,5,0], 'up', -2 ) => [0,3,0]\\n```\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/pos_offset/\",\"plain\":\"Returns a coords triple that is offset in a specified direction by amount of blocks. The default offset amount is 1 block. To offset into opposite facing, use negative numbers for the amount.\\npos_offset(block(0,5,0), 'up', 2) => [0,7,0] pos_offset([0,5,0], 'up', -2 ) => [0,3,0] \",\"signatures\":[{\"params\":[{\"name\":\"pos\"},{\"name\":\"direction\"},{\"name\":\"amount\"}]}]},\"power\":{\"markdown\":\"Numeric function, returning redstone power level at position.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/power/\",\"plain\":\"Numeric function, returning redstone power level at position.\",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"print\":{\"markdown\":\"Displays the result of the expression to the chat. Overrides default `scarpet`\\nbehaviour of sending everything to stderr. For player scoped apps it always by\\ndefault targets the player for whom the app runs on behalf. Can optionally\\ndefine player or list of players to send the message to.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/print/\",\"plain\":\"Displays the result of the expression to the chat. Overrides default scarpet behaviour of sending everything to stderr. For player scoped apps it always by default targets the player for whom the app runs on behalf. Can optionally define player or list of players to send the message to.\",\"signatures\":[{\"params\":[{\"name\":\"text\"}]},{\"params\":[{\"name\":\"player\"},{\"name\":\"text\"}]}]},\"product\":{\"permalink\":\"https://scarpet.pages.dev/syntax/operators/product/\",\"signatures\":[{\"params\":[{\"name\":\"args\",\"rest\":true}]}]},\"profile_expr\":{\"markdown\":\"Returns number of times given expression can be run in 50ms time. Useful to\\nprofile and optimize your code. Note that, even if its only a number, it WILL\\nrun these commands, so if they are destructive, you need to be careful.\",\"permalink\":\"https://scarpet.pages.dev/builtins/functions/profile_expr/\",\"plain\":\"Returns number of times given expression can be run in 50ms time. Useful to profile and optimize your code. Note that, even if its only a number, it WILL run these commands, so if they are destructive, you need to be careful.\",\"signatures\":[{\"params\":[{\"name\":\"expr\"}]}]},\"property\":{\"deprecated\":\"Deprecated — use [`block_state()`](/minecraft/world/block_state/)\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/property/\",\"signatures\":[{\"params\":[{\"name\":\"pos\"},{\"name\":\"name\"}]}]},\"put\":{\"markdown\":\"## Lists\\n\\nModifies the container by replacing the value under the address with the\\nsupplied `value`. For lists, a valid index is required, but can be negative as\\nwell to indicate positions from the end of the list. If `null` is supplied as\\nthe address, it always means - add to the end of the list.\\n\\nThere are three modes that lists can have items added to them:\\n\\n- `replace`(default): Replaces item under given index(address). Doesn't change\\n  the size of the array unless `null` address is used, which is an exception and\\n  then it appends to the end\\n- `insert`: Inserts given element at a specified index, shifting the rest of the\\n  array to make space for the item. Note that index of -1 points to the last\\n  element of the list, thus inserting at that position and moving the previous\\n  last element to the new last element position. To insert at the end, use `+=`\\n  operator, or `null` address in put\\n- `extend`: treats the supplied value as an iterable set of values to insert at\\n  a given index, extending the list by this amount of items. Again use `null`\\n  address/index to point to the end of the list\\n\\nDue to the extra mode parameter, there is no chaining for `put`, but you can\\nstill use l-value container access to indicate container and address, so\\n`put(foo, key, value)` is the same as `put(foo:key, value)` or `foo:key=value`\\n\\n## Maps\\n\\nFor maps there are no modes available (yet, seems there is no reason to). It\\nreplaces the value under the supplied key (address), or sets it if not currently\\npresent.\\n\\n## NBT Tags\\n\\nThe address for nbt values is a valid nbt path that you would use with `/data`\\ncommand, and tag is any tag that would be applicable for a given insert\\noperation. Note that to distinguish between proper types (like integer types,\\nyou need to use command notation, i.e. regular ints is `123`, while byte size\\nint would be `123b` and an explicit string would be `\\\"5\\\"`, so it helps that\\nscarpet uses single quotes in his strings. Unlike for lists and maps, it returns\\nthe number of affected nodes, or 0 if none were affected.\\n\\nThere are three modes that NBT tags can have items added to them:\\n\\n- `replace`(default): Replaces item under given path(address). Removes them\\n  first if possible, and then adds given element to the supplied position. The\\n  target path can indicate compound tag keys, lists, or individual elements of\\n  the lists.\\n- `<N>`: Index for list insertions. Inserts given element at a specified index,\\n  inside a list specified with the path address. Fails if list is not specified.\\n  It behaves like `insert` mode for lists, i.e. it is not removing any of the\\n  existing elements. Use `replace` to remove and replace existing element.\\n- `merge`: assumes that both path and replacement target are of compound type\\n  (dictionaries, maps, `{}` types), and merges keys from `value` with the\\n  compound tag under the path\\n\\n## Returns\\n\\nReturns true, if container got modified, false otherwise, and null if operation\\nwas invalid.\\n\\n## Examples\\n\\n```scarpet\\na = [1, 2, 3]; put(a, 1, 4); a  => [1, 4, 3]\\na = [1, 2, 3]; put(a, null, 4); a  => [1, 2, 3, 4]\\na = [1, 2, 3]; put(a, 1, 4, 'insert'); a  => [1, 4, 2, 3]\\na = [1, 2, 3]; put(a, null, [4, 5, 6], 'extend'); a  => [1, 2, 3, 4, 5, 6]\\na = [1, 2, 3]; put(a, 1, [4, 5, 6], 'extend'); a  => [1, 4, 5, 6, 2, 3]\\na = [[0,0,0],[0,0,0],[0,0,0]]; put(a:1, 1, 1); a  => [[0, 0, 0], [0, 1, 0], [0, 0, 0]]\\na = {1,2,3,4}; put(a, 5, null); a  => {1: null, 2: null, 3: null, 4: null, 5: null}\\ntag = nbt('{}'); put(tag, 'BlockData.Properties', '[1,2,3,4]'); tag  => {BlockData:{Properties:[1,2,3,4]}}\\ntag = nbt('{a:[{lvl:3},{lvl:5},{lvl:2}]}'); put(tag, 'a[].lvl', 1); tag  => {a:[{lvl:1},{lvl:1},{lvl:1}]}\\ntag = nbt('{a:[{lvl:[1,2,3]},{lvl:[3,2,1]},{lvl:[4,5,6]}]}'); put(tag, 'a[].lvl', 1, 2); tag\\n     => {a:[{lvl:[1,2,1,3]},{lvl:[3,2,1,1]},{lvl:[4,5,1,6]}]}\\ntag = nbt('{a:[{lvl:[1,2,3]},{lvl:[3,2,1]},{lvl:[4,5,6]}]}'); put(tag, 'a[].lvl[1]', 1); tag\\n     => {a:[{lvl:[1,1,3]},{lvl:[3,1,1]},{lvl:[4,1,6]}]}\\n```\",\"permalink\":\"https://scarpet.pages.dev/builtins/containers/put/\",\"plain\":\"Lists Modifies the container by replacing the value under the address with the supplied value. For lists, a valid index is required, but can be negative as well to indicate positions from the end of the list. If null is supplied as the address, it always means - add to the end of the list.\\nThere are three modes that lists can have items added to them:\\nreplace(default): Replaces item under given index(address). Doesn’t change the size of the array unless null address is used, which is an exception and then it appends to the end insert: Inserts given element at a specified index, shifting the rest of the array to make space for the item. Note that index of -1 points to the last element of the list, thus inserting at that position and moving the previous last element to the new last element position. To insert at the end, use += operator, or null address in put extend: treats the supplied value as an iterable set of values to insert at a given index, extending the list by this amount of items. Again use null address/index to point to the end of the list Due to the extra mode parameter, there is no chaining for put, but you can still use l-value container access to indicate container and address, so put(foo, key, value) is the same as put(foo:key, value) or foo:key=value\\nMaps For maps there are no modes available (yet, seems there is no reason to). It replaces the value under the supplied key (address), or sets it if not currently present.\\nNBT Tags The address for nbt values is a valid nbt path that you would use with /data command, and tag is any tag that would be applicable for a given insert operation. Note that to distinguish between proper types (like integer types, you need to use command notation, i.e. regular ints is 123, while byte size int would be 123b and an explicit string would be \\\"5\\\", so it helps that scarpet uses single quotes in his strings. Unlike for lists and maps, it returns the number of affected nodes, or 0 if none were affected.\\nThere are three modes that NBT tags can have items added to them:\\nreplace(default): Replaces item under given path(address). Removes them first if possible, and then adds given element to the supplied position. The target path can indicate compound tag keys, lists, or individual elements of the lists. <N>: Index for list insertions. Inserts given element at a specified index, inside a list specified with the path address. Fails if list is not specified. It behaves like insert mode for lists, i.e. it is not removing any of the existing elements. Use replace to remove and replace existing element. merge: assumes that both path and replacement target are of compound type (dictionaries, maps, {} types), and merges keys from value with the compound tag under the path Returns Returns true, if container got modified, false otherwise, and null if operation was invalid.\\nExamples a = [1, 2, 3]; put(a, 1, 4); a => [1, 4, 3] a = [1, 2, 3]; put(a, null, 4); a => [1, 2, 3, 4] a = [1, 2, 3]; put(a, 1, 4, 'insert'); a => [1, 4, 2, 3] a = [1, 2, 3]; put(a, null, [4, 5, 6], 'extend'); a => [1, 2, 3, 4, 5, 6] a = [1, 2, 3]; put(a, 1, [4, 5, 6], 'extend'); a => [1, 4, 5, 6, 2, 3] a = [[0,0,0],[0,0,0],[0,0,0]]; put(a:1, 1, 1); a => [[0, 0, 0], [0, 1, 0], [0, 0, 0]] a = {1,2,3,4}; put(a, 5, null); a => {1: null, 2: null, 3: null, 4: null, 5: null} tag = nbt('{}'); put(tag, 'BlockData.Properties', '[1,2,3,4]'); tag => {BlockData:{Properties:[1,2,3,4]}} tag = nbt('{a:[{lvl:3},{lvl:5},{lvl:2}]}'); put(tag, 'a[].lvl', 1); tag => {a:[{lvl:1},{lvl:1},{lvl:1}]} tag = nbt('{a:[{lvl:[1,2,3]},{lvl:[3,2,1]},{lvl:[4,5,6]}]}'); put(tag, 'a[].lvl', 1, 2); tag => {a:[{lvl:[1,2,1,3]},{lvl:[3,2,1,1]},{lvl:[4,5,1,6]}]} tag = nbt('{a:[{lvl:[1,2,3]},{lvl:[3,2,1]},{lvl:[4,5,6]}]}'); put(tag, 'a[].lvl[1]', 1); tag => {a:[{lvl:[1,1,3]},{lvl:[3,1,1]},{lvl:[4,1,6]}]} \",\"signatures\":[{\"params\":[{\"name\":\"container\"},{\"name\":\"address\"},{\"name\":\"value\"}]},{\"params\":[{\"name\":\"container\"},{\"name\":\"address\"},{\"name\":\"value\"},{\"name\":\"mode\"}]},{\"params\":[{\"name\":\"lvalue\"},{\"name\":\"value\"}]}]},\"query\":{\"permalink\":\"https://scarpet.pages.dev/minecraft/entity/query_xp/\",\"signatures\":[{\"params\":[{\"name\":\"entity\"},{\"name\":\"'xp'\"}]}]},\"quotient\":{\"permalink\":\"https://scarpet.pages.dev/syntax/operators/quotient/\",\"signatures\":[{\"params\":[{\"name\":\"args\",\"rest\":true}]}]},\"rad\":{\"markdown\":\"Returns a number converted from **degrees** to **radians**.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/rad/\",\"plain\":\"Returns a number converted from degrees to radians.\",\"signatures\":[{\"params\":[{\"name\":\"deg\"}]}]},\"rand\":{\"markdown\":\"`rand()` returns a floating-point random number that is greater than or equal to\\n0 and less than `max`.\\n\\nIn boolean context (in conditions, boolean functions, or `bool`), returns false\\nif the randomly selected value is less than 1. This means that `bool(rand(2))`\\nreturns true half of the time and `!rand(5)` returns true for 20% (1/5) of the\\ntime. If seed is not provided, uses a random seed that's shared across all\\nscarpet apps. If seed is provided, each consecutive call to rand() will act like\\n'next' call to the same random object. Scarpet keeps track of up to 65536 custom\\nrandom number generators (custom seeds, per app), so if you exceed this number,\\nyour random sequences will revert to the beginning and start over.\\n\\n## Parameters\\n\\n- `max`\\n\\n- `seed`\\n\\n## Returns\\n\\nA floating-point, pseudo-random number between 0 (inclusive) and `max`\\n(exclusive).\\n\\n## Examples\\n\\n```scarpet\\nmap(range(10), floor(rand(10))) => [5, 8, 0, 6, 9, 3, 9, 9, 1, 8]\\nmap(range(10), bool(rand(2))) => [false, false, true, false, false, false, true, false, true, false]\\nmap(range(10), str('%.1f',rand(_))) => [0.0, 0.4, 0.6, 1.9, 2.8, 3.8, 5.3, 2.2, 1.6, 5.6]\\n```\",\"permalink\":\"https://scarpet.pages.dev/builtins/functions/rand/\",\"plain\":\"rand() returns a floating-point random number that is greater than or equal to 0 and less than max.\\nIn boolean context (in conditions, boolean functions, or bool), returns false if the randomly selected value is less than 1. This means that bool(rand(2)) returns true half of the time and !rand(5) returns true for 20% (1/5) of the time. If seed is not provided, uses a random seed that’s shared across all scarpet apps. If seed is provided, each consecutive call to rand() will act like ’next’ call to the same random object. Scarpet keeps track of up to 65536 custom random number generators (custom seeds, per app), so if you exceed this number, your random sequences will revert to the beginning and start over.\\nParameters max\\nseed\\nReturns A floating-point, pseudo-random number between 0 (inclusive) and max (exclusive).\\nExamples map(range(10), floor(rand(10))) => [5, 8, 0, 6, 9, 3, 9, 9, 1, 8] map(range(10), bool(rand(2))) => [false, false, true, false, false, false, true, false, true, false] map(range(10), str('%.1f',rand(_))) => [0.0, 0.4, 0.6, 1.9, 2.8, 3.8, 5.3, 2.2, 1.6, 5.6] \",\"signatures\":[{\"params\":[{\"name\":\"max\"}]},{\"params\":[{\"name\":\"max\"},{\"name\":\"seed\"}]}]},\"random_tick\":{\"markdown\":\"Causes a random tick at position.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/random_tick/\",\"plain\":\"Causes a random tick at position.\",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"range\":{\"markdown\":\"Creates a range of numbers from `from`, no greater/larger than `to`. The `step`\\nparameter dictates not only the increment size, but also direction (can be\\nnegative). The returned value is not a proper list, just the iterator but if for\\nwhatever reason you need a proper list with all items evaluated, use\\n`[range(to)]`. Primarily to be used in higher order functions\\n\\n```scarpet\\nrange(10)  => [...]\\n[range(10)]  => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\\nmap(range(10),_*_)  => [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\\nreduce(range(10),_a+_, 0)  => 45\\nrange(5,10)  => [5, 6, 7, 8, 9]\\nrange(20, 10, -2)  => [20, 18, 16, 14, 12]\\nrange(-0.3, 0.3, 0.1)  => [-0.3, -0.2, -0.1, 0, 0.1, 0.2]\\nrange(0.3, -0.3, -0.1) => [0.3, 0.2, 0.1, -0, -0.1, -0.2]\\n```\",\"permalink\":\"https://scarpet.pages.dev/builtins/functions/range/\",\"plain\":\"Creates a range of numbers from from, no greater/larger than to. The step parameter dictates not only the increment size, but also direction (can be negative). The returned value is not a proper list, just the iterator but if for whatever reason you need a proper list with all items evaluated, use [range(to)]. Primarily to be used in higher order functions\\nrange(10) => [...] [range(10)] => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] map(range(10),_*_) => [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] reduce(range(10),_a+_, 0) => 45 range(5,10) => [5, 6, 7, 8, 9] range(20, 10, -2) => [20, 18, 16, 14, 12] range(-0.3, 0.3, 0.1) => [-0.3, -0.2, -0.1, 0, 0.1, 0.2] range(0.3, -0.3, -0.1) => [0.3, 0.2, 0.1, -0, -0.1, -0.2] \",\"signatures\":[{\"params\":[{\"name\":\"to\"}]},{\"params\":[{\"name\":\"from\"},{\"name\":\"to\"}]},{\"params\":[{\"name\":\"from\"},{\"name\":\"to\"},{\"name\":\"step\"}]}]},\"read_file\":{\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/read_file/\",\"signatures\":[{\"params\":[{\"name\":\"resource\"},{\"name\":\"type\"}]}]},\"recipe_data\":{\"markdown\":\"Returns all recipes matching either an `item`, or represent actual `recipe`\\nname. In vanilla datapack, for all items that have one recipe available, the\\nrecipe name is the same as the item name but if an item has multiple recipes,\\nits direct name can be different.\\n\\nRecipe type can take one of the following options:\\n\\n- `'crafting'` - default, crafting table recipe\\n- `'smelting'` - furnace recipe\\n- `'blasting'` - blast furnace recipe\\n- `'smoking'` - smoker recipe\\n- `'campfire_cooking'` - campfire recipe\\n- `'stonecutting'` - stonecutter recipe\\n- `'smithing'` - smithing table (1.16+)\\n\\nThe return value is a list of available recipes (even if there is only one\\nrecipe available). Each recipe contains of an item triple of the crafting\\nresult, list of ingredients, each containing a list of possible variants of the\\ningredients in this slot, as item triples, or `null` if its a shaped recipe and\\na given slot in the patterns is left empty, and recipe specification as another\\nlist. Possible recipe specs is:\\n\\n- `['shaped', width, height]` - shaped crafting. `width` and `height` can be 1,\\n  2 or 3.\\n- `['shapeless']` - shapeless crafting\\n- `['smelting', duration, xp]` - smelting/cooking recipes\\n- `['cutting']` - stonecutter recipe\\n- `['special']` - special crafting recipe, typically not present in the crafting\\n  menu\\n- `['custom']` - other recipe types\\n\\nNote that ingredients are specified as tripes, with count and nbt information.\\nCurrently all recipes require always one of the ingredients, and for some\\nrecipes, even if the nbt data for the ingredient is specified (e.g.\\n`dispenser`), it can accept items of any tags.\\n\\nAlso note that some recipes leave some products in the crafting window, and\\nthese can be determined using `crafting_remaining_item()` function\\n\\nExamples:\\n\\n```scarpet\\nrecipe_data('iron_ingot_from_nuggets')\\nrecipe_data('iron_ingot')\\nrecipe_data('glass', 'smelting')\\n```\",\"permalink\":\"https://scarpet.pages.dev/minecraft/inventory/recipe_data/\",\"plain\":\"Returns all recipes matching either an item, or represent actual recipe name. In vanilla datapack, for all items that have one recipe available, the recipe name is the same as the item name but if an item has multiple recipes, its direct name can be different.\\nRecipe type can take one of the following options:\\n'crafting' - default, crafting table recipe 'smelting' - furnace recipe 'blasting' - blast furnace recipe 'smoking' - smoker recipe 'campfire_cooking' - campfire recipe 'stonecutting' - stonecutter recipe 'smithing' - smithing table (1.16+) The return value is a list of available recipes (even if there is only one recipe available). Each recipe contains of an item triple of the crafting result, list of ingredients, each containing a list of possible variants of the ingredients in this slot, as item triples, or null if its a shaped recipe and a given slot in the patterns is left empty, and recipe specification as another list. Possible recipe specs is:\\n['shaped', width, height] - shaped crafting. width and height can be 1, 2 or 3. ['shapeless'] - shapeless crafting ['smelting', duration, xp] - smelting/cooking recipes ['cutting'] - stonecutter recipe ['special'] - special crafting recipe, typically not present in the crafting menu ['custom'] - other recipe types Note that ingredients are specified as tripes, with count and nbt information. Currently all recipes require always one of the ingredients, and for some recipes, even if the nbt data for the ingredient is specified (e.g. dispenser), it can accept items of any tags.\\nAlso note that some recipes leave some products in the crafting window, and these can be determined using crafting_remaining_item() function\\nExamples:\\nrecipe_data('iron_ingot_from_nuggets') recipe_data('iron_ingot') recipe_data('glass', 'smelting') \",\"signatures\":[{\"params\":[{\"name\":\"recipe/item\"}]},{\"params\":[{\"name\":\"recipe/item\"},{\"name\":\"type\"}]}]},\"reduce\":{\"markdown\":\"Applies `expr` for each element of the list and saves the result in `_a`\\naccumulator. Consecutive calls to `expr` can access that value to apply more\\nvalues. You also need to specify the initial value to apply for the accumulator.\\n`break` can be used to terminate reduction prematurely. If a value is provided\\nto `break` or `continue`, it will be used from now on as a new value for the\\naccumulator.\\n\\n```scarpet\\nreduce([1, 2, 3, 4], _a + _, 0); // 10\\nreduce([1, 2, 3, 4], _a * _, 1); // 24\\n```\",\"permalink\":\"https://scarpet.pages.dev/builtins/iteration/reduce/\",\"plain\":\"Applies expr for each element of the list and saves the result in _a accumulator. Consecutive calls to expr can access that value to apply more values. You also need to specify the initial value to apply for the accumulator. break can be used to terminate reduction prematurely. If a value is provided to break or continue, it will be used from now on as a new value for the accumulator.\\nreduce([1, 2, 3, 4], _a + _, 0); // 10 reduce([1, 2, 3, 4], _a * _, 1); // 24 \",\"signatures\":[{\"params\":[{\"name\":\"list\"},{\"binds\":[\"_a\",\"_\",\"_i\"],\"name\":\"expr\"},{\"name\":\"initial\"}]}]},\"reload_chunk\":{\"markdown\":\"Sends full chunk data to clients. Useful when lots stuff happened and you want\\nto refresh it on the clients.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/reload_chunk/\",\"plain\":\"Sends full chunk data to clients. Useful when lots stuff happened and you want to refresh it on the clients.\",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"relu\":{\"markdown\":\"Returns the rectified linear unit of a number. Returns 0 if `n < 0` or `n`, same\\nas `max(0, n)`.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/relu/\",\"plain\":\"Returns the rectified linear unit of a number. Returns 0 if n < 0 or n, same as max(0, n).\",\"signatures\":[{\"params\":[{\"name\":\"n\"}]}]},\"remove_all_markers\":{\"markdown\":\"Removes all scarpet markers from the loaded portion of the world created by this\\napp, in case you didn't want to do the proper cleanup.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/remove_all_markers/\",\"plain\":\"Removes all scarpet markers from the loaded portion of the world created by this app, in case you didn’t want to do the proper cleanup.\",\"signatures\":[{\"params\":[]}]},\"replace\":{\"markdown\":\"Returns a new string with all matches of `regex` replaced by `replacement`, or\\nremoved if `replacement` is not specified.\\n\\n### Regex\\n\\nRegular expressions are based on [Java `Pattern`].\\n\\n### Escaping\\n\\nBackslashes (`\\\\`) inside Scarpet strings are interpreted as character escapes.\\nIt is necessary to use double backslashes in the regular expression literal to\\nprevent Scarpet from interpreting them. For example `'\\\\w'` produces an error so\\n`'\\\\\\\\w'` must be used instead.\\n\\n### Examples\\n\\n```scarpet\\nstring = 'John\\\\'s dog is cuter than Jane\\\\'s dog';\\nprint(replace(string, 'dog', 'cat')); // John's cat is cuter than Jane's cat\\n```\\n\\n[Java `Pattern`]:\\n  https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/regex/Pattern.html\",\"permalink\":\"https://scarpet.pages.dev/builtins/string/replace/\",\"plain\":\"Returns a new string with all matches of regex replaced by replacement, or removed if replacement is not specified.\\nRegex Regular expressions are based on Java Pattern.\\nEscaping Backslashes (\\\\) inside Scarpet strings are interpreted as character escapes. It is necessary to use double backslashes in the regular expression literal to prevent Scarpet from interpreting them. For example '\\\\w' produces an error so '\\\\\\\\w' must be used instead.\\nExamples string = 'John\\\\'s dog is cuter than Jane\\\\'s dog'; print(replace(string, 'dog', 'cat')); // John's cat is cuter than Jane's cat \",\"signatures\":[{\"params\":[{\"name\":\"string\"},{\"name\":\"regex\"}]},{\"params\":[{\"name\":\"string\"},{\"name\":\"regex\"},{\"name\":\"replacement\"}]}]},\"replace_first\":{\"markdown\":\"Returns a new string with the first match of `regex` replaced by `replacement`,\\nor removed if `replacement` is not specified.\\n\\n### Regex\\n\\nRegular expressions are based on [Java `Pattern`].\\n\\n### Escaping\\n\\nBackslashes (`\\\\`) inside Scarpet strings are interpreted as character escapes.\\nIt is necessary to use double backslashes in the regular expression literal to\\nprevent Scarpet from interpreting them. For example `'\\\\w'` produces an error so\\n`'\\\\\\\\w'` must be used instead.\\n\\n### Examples\\n\\n```scarpet\\nstring = 'John\\\\'s dog is cuter than Jane\\\\'s dog';\\nprint(replace_first(string, 'dog', 'cat')); // John's cat is cuter than Jane's dog\\n```\\n\\n[Java `Pattern`]:\\n  https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/regex/Pattern.html\",\"permalink\":\"https://scarpet.pages.dev/builtins/string/replace_first/\",\"plain\":\"Returns a new string with the first match of regex replaced by replacement, or removed if replacement is not specified.\\nRegex Regular expressions are based on Java Pattern.\\nEscaping Backslashes (\\\\) inside Scarpet strings are interpreted as character escapes. It is necessary to use double backslashes in the regular expression literal to prevent Scarpet from interpreting them. For example '\\\\w' produces an error so '\\\\\\\\w' must be used instead.\\nExamples string = 'John\\\\'s dog is cuter than Jane\\\\'s dog'; print(replace_first(string, 'dog', 'cat')); // John's cat is cuter than Jane's dog \",\"signatures\":[{\"params\":[{\"name\":\"string\"},{\"name\":\"regex\"}]},{\"params\":[{\"name\":\"string\"},{\"name\":\"regex\"},{\"name\":\"replacement\"}]}]},\"reset_chunk\":{\"markdown\":\"Removes and resets the chunk, all chunks in the specified area or all chunks in\\na list at once, removing all previous blocks and entities, and replacing it with\\na new generation. For all currently loaded chunks, they will be brought to their\\ncurrent generation status, and updated to the player. All chunks that are not in\\nthe loaded area, will only be generated to the `'structure_starts'` status,\\nallowing to generate them fully as players are visiting them. Chunks in the area\\nthat has not been touched yet by the game will not be generated / regenerated.\\n\\nIt returns a `map` with a report indicating how many chunks were affected, and\\nhow long each step took:\\n\\n- `requested_chunks`: total number of chunks in the requested area or list\\n- `affected_chunks`: number of chunks that will be removed / regenerated\\n- `loaded_chunks`: number of currently loaded chunks in the requested area /\\n  list\\n- `relight_count`: number of relit chunks\\n- `relight_time`: time took to relit chunks\\n- `layer_count_<status>`: number of chunks for which a `<status>` generation\\n  step has been performed\\n- `layer_time_<status>`: cumulative time for all chunks spent on generating\\n  `<status>` step\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/reset_chunk/\",\"plain\":\"Removes and resets the chunk, all chunks in the specified area or all chunks in a list at once, removing all previous blocks and entities, and replacing it with a new generation. For all currently loaded chunks, they will be brought to their current generation status, and updated to the player. All chunks that are not in the loaded area, will only be generated to the 'structure_starts' status, allowing to generate them fully as players are visiting them. Chunks in the area that has not been touched yet by the game will not be generated / regenerated.\\nIt returns a map with a report indicating how many chunks were affected, and how long each step took:\\nrequested_chunks: total number of chunks in the requested area or list affected_chunks: number of chunks that will be removed / regenerated loaded_chunks: number of currently loaded chunks in the requested area / list relight_count: number of relit chunks relight_time: time took to relit chunks layer_count_<status>: number of chunks for which a <status> generation step has been performed layer_time_<status>: cumulative time for all chunks spent on generating <status> step \",\"signatures\":[{\"params\":[{\"name\":\"positions\"}]},{\"params\":[{\"name\":\"from\"},{\"name\":\"to\"}]}]},\"reset_seed\":{\"markdown\":\"Resets the sequence of the randomizer used by `rand` for this seed to its\\ninitial state. Returns a boolean value indicating if the given seed has been\\nused or not.\",\"permalink\":\"https://scarpet.pages.dev/builtins/functions/reset_seed/\",\"plain\":\"Resets the sequence of the randomizer used by rand for this seed to its initial state. Returns a boolean value indicating if the given seed has been used or not.\",\"signatures\":[{\"params\":[{\"name\":\"seed\"}]}]},\"return\":{\"markdown\":\"Return a value from a function.\\n\\nA `return()` marks the end of an execution path in a function:\\n\\n```scarpet\\nfoo() -> (\\n    return(2);\\n    print('x'); // not reachable\\n);\\n```\\n\\n`return()` is not needed when the returned value is the last expression in the\\nfunction:\\n\\n```scarpet\\nfoo() -> (\\n    3\\n);\\n```\\n\\nA `return()` with no arguments returns [`null`](/constants/null/).\",\"permalink\":\"https://scarpet.pages.dev/syntax/control_flow/return/\",\"plain\":\"Return a value from a function.\\nA return() marks the end of an execution path in a function:\\nfoo() -> ( return(2); print('x'); // not reachable ); return() is not needed when the returned value is the last expression in the function:\\nfoo() -> ( 3 ); A return() with no arguments returns null.\",\"signatures\":[{\"params\":[]},{\"params\":[{\"name\":\"value\"}]}]},\"round\":{\"markdown\":\"Returns the value of a number rounded to the nearest integer.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/round/\",\"plain\":\"Returns the value of a number rounded to the nearest integer.\",\"signatures\":[{\"params\":[{\"name\":\"n\"}]}]},\"run\":{\"markdown\":\"Runs a vanilla command from the string result of the `expr` and returns a triple\\nof 0 (unused after success count removal), intercepted list of output messages,\\nand error message if the command resulted in a failure. Successful commands\\nreturn `null` as their error.\\n\\n```scarpet\\nrun('fill 1 1 1 10 10 10 air') -> [0, [\\\"Successfully filled 123 blocks\\\"], null]\\nrun('give @s stone 4') -> [0, [\\\"Gave 4 [Stone] to gnembon\\\"], null]\\nrun('seed') -> [0, [\\\"Seed: [4031384495743822299]\\\"], null]\\nrun('sed') -> [0, [], \\\"sed<--[HERE]\\\"] // wrong command\\n```\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/run/\",\"plain\":\"Runs a vanilla command from the string result of the expr and returns a triple of 0 (unused after success count removal), intercepted list of output messages, and error message if the command resulted in a failure. Successful commands return null as their error.\\nrun('fill 1 1 1 10 10 10 air') -> [0, [\\\"Successfully filled 123 blocks\\\"], null] run('give @s stone 4') -> [0, [\\\"Gave 4 [Stone] to gnembon\\\"], null] run('seed') -> [0, [\\\"Seed: [4031384495743822299]\\\"], null] run('sed') -> [0, [], \\\"sed<--[HERE]\\\"] // wrong command \",\"signatures\":[{\"params\":[{\"name\":\"command\"}]}]},\"sample_noise\":{\"markdown\":\"Samples the world generation noise values / data driven density function(s) at a\\ngiven position.\\n\\nIf no types are passed in, or no arguments are given, it returns a list of all\\nthe available registry defined density functions.\\n\\nWith a single function name passed in, it returns a scalar. With multiple\\nfunction names passed in, it returns a list of results.\\n\\nFunction accepts any registry defined density functions, both built in, as well\\nas namespaced defined in datapacks. On top of that, scarpet provides the\\nfollowing list of noises sampled directly from the current level (and not\\nreturned with no-argument call):\\n\\n`'barrier_noise'`, `'fluid_level_floodedness_noise'`,\\n`'fluid_level_spread_noise'`, `'lava_noise'`, `'temperature'`, `'vegetation'`,\\n`'continents'`, `'erosion'`, `'depth'`, `'ridges'`,\\n`'initial_density_without_jaggedness'`, `'final_density'`, `'vein_toggle'`,\\n`'vein_ridged'` and `'vein_gap'`\\n\\n```scarpet\\n// requesting single value\\nsample_density(pos, 'continents') => 0.211626790923\\n// passing type as multiple arguments\\nsample_density(pos, 'continents', 'depth', 'overworld/caves/pillars', 'mydatapack:foo/my_function') => [-0.205013844481, 1.04772473438, 0.211626790923, 0.123]\\n```\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/sample_noise/\",\"plain\":\"Samples the world generation noise values / data driven density function(s) at a given position.\\nIf no types are passed in, or no arguments are given, it returns a list of all the available registry defined density functions.\\nWith a single function name passed in, it returns a scalar. With multiple function names passed in, it returns a list of results.\\nFunction accepts any registry defined density functions, both built in, as well as namespaced defined in datapacks. On top of that, scarpet provides the following list of noises sampled directly from the current level (and not returned with no-argument call):\\n'barrier_noise', 'fluid_level_floodedness_noise', 'fluid_level_spread_noise', 'lava_noise', 'temperature', 'vegetation', 'continents', 'erosion', 'depth', 'ridges', 'initial_density_without_jaggedness', 'final_density', 'vein_toggle', 'vein_ridged' and 'vein_gap'\\n// requesting single value sample_density(pos, 'continents') => 0.211626790923 // passing type as multiple arguments sample_density(pos, 'continents', 'depth', 'overworld/caves/pillars', 'mydatapack:foo/my_function') => [-0.205013844481, 1.04772473438, 0.211626790923, 0.123] \",\"signatures\":[{\"params\":[]},{\"params\":[{\"name\":\"pos\"},{\"name\":\"types\",\"rest\":true}]}]},\"save\":{\"markdown\":\"Performs autosave, saves all chunks, player data, etc. Useful for programs where\\nautosave is disabled due to performance reasons and saves the world only on\\ndemand.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/save/\",\"plain\":\"Performs autosave, saves all chunks, player data, etc. Useful for programs where autosave is disabled due to performance reasons and saves the world only on demand.\",\"signatures\":[{\"params\":[]}]},\"schedule\":{\"markdown\":\"Schedules a user defined function to run with a specified `delay` ticks of\\ndelay. Scheduled functions run at the end of the tick, and they will run in\\norder they were scheduled.\\n\\nIn case you want to schedule a function that is not defined in your module,\\nplease read the tips on \\\"Passing function references to other modules of your\\napplication\\\" section in the `call(...)` section.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/schedule/\",\"plain\":\"Schedules a user defined function to run with a specified delay ticks of delay. Scheduled functions run at the end of the tick, and they will run in order they were scheduled.\\nIn case you want to schedule a function that is not defined in your module, please read the tips on “Passing function references to other modules of your application” section in the call(...) section.\",\"signatures\":[{\"params\":[{\"name\":\"delay\"},{\"name\":\"function\"},{\"name\":\"args\"}]}]},\"screen_property\":{\"markdown\":\"Queries or modifies a certain `property` of a `screen`. The `property` is a\\nstring with the name of the property. When called with `screen` and `property`\\nparameter, returns the current value of the property. When specifying a `value`,\\nthe property will be assigned the new `value` and synced with the client.\\n\\n**Options for `property` string:**\\n\\n| `property`            | Required screen type         | Type    | Description                                                                                                                                        |\\n| --------------------- | ---------------------------- | ------- | -------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| `name`                | **All**                      | text    | The name of the screen, as specified in the `create_screen()` function. Can only be queried.                                                       |\\n| `open`                | **All**                      | boolean | Returns `true` if the screen is open, `false` otherwise. Can only be queried.                                                                      |\\n| `fuel_progress`       | furnace/smoker/blast_furnace | number  | Current value of the fuel indicator.                                                                                                               |\\n| `max_fuel_progress`   | furnace/smoker/blast_furnace | number  | Maximum value for the full fuel indicator.                                                                                                         |\\n| `cook_progress`       | furnace/smoker/blast_furnace | number  | Cooking progress indicator value.                                                                                                                  |\\n| `max_cook_progress`   | furnace/smoker/blast_furnace | number  | Maximum value for the cooking progress indicator.                                                                                                  |\\n| `level_cost`          | anvil                        | number  | Displayed level cost for the anvil.                                                                                                                |\\n| `page`                | lectern                      | number  | Opened page in the lectern screen.                                                                                                                 |\\n| `beacon_level`        | beacon                       | number  | The power level of the beacon screen. This affects how many effects under primary power are grayed out. Should be a value between 0-5.             |\\n| `primary_effect`      | beacon                       | number  | The effect id of the primary effect. This changes the effect icon on the button on the secondary power side next to the regeneration effect.       |\\n| `secondary_effect`    | beacon                       | number  | The effect id of the secondary effect. This seems to change nothing, but it exists.                                                                |\\n| `brew_time`           | brewing_stand                | number  | The brewing time indicator value. This goes from 0 to 400.                                                                                         |\\n| `brewing_fuel`        | brewing_stand                | number  | The fuel indicator progress. Values range between 0 to 20.                                                                                         |\\n| `enchantment_power_x` | enchantment                  | number  | The level cost of the shown enchantment. Replace `x` with 1, 2 or 3 (e.g. `enchantment_power_2`) to target the first, second or third enchantment. |\\n| `enchantment_id_x`    | enchantment                  | number  | The id of the enchantment shown (replace `x` with the enchantment slot 1/2/3).                                                                     |\\n| `enchantment_level_x` | enchantment                  | number  | The enchantment level of the enchantment.                                                                                                          |\\n| `enchantment_seed`    | enchantment                  | number  | The seed of the enchanting screen. This affects the text shown in the standard Galactic alphabet.                                                  |\\n| `banner_pattern`      | loom                         | number  | The selected banner pattern inside the loom.                                                                                                       |\\n| `stonecutter_recipe`  | stonecutter                  | number  | The selected recipe in the stonecutter.                                                                                                            |\",\"permalink\":\"https://scarpet.pages.dev/minecraft/inventory/screen_property/\",\"plain\":\"Queries or modifies a certain property of a screen. The property is a string with the name of the property. When called with screen and property parameter, returns the current value of the property. When specifying a value, the property will be assigned the new value and synced with the client.\\nOptions for property string:\\nproperty Required screen type Type Description name All text The name of the screen, as specified in the create_screen() function. Can only be queried. open All boolean Returns true if the screen is open, false otherwise. Can only be queried. fuel_progress furnace/smoker/blast_furnace number Current value of the fuel indicator. max_fuel_progress furnace/smoker/blast_furnace number Maximum value for the full fuel indicator. cook_progress furnace/smoker/blast_furnace number Cooking progress indicator value. max_cook_progress furnace/smoker/blast_furnace number Maximum value for the cooking progress indicator. level_cost anvil number Displayed level cost for the anvil. page lectern number Opened page in the lectern screen. beacon_level beacon number The power level of the beacon screen. This affects how many effects under primary power are grayed out. Should be a value between 0-5. primary_effect beacon number The effect id of the primary effect. This changes the effect icon on the button on the secondary power side next to the regeneration effect. secondary_effect beacon number The effect id of the secondary effect. This seems to change nothing, but it exists. brew_time brewing_stand number The brewing time indicator value. This goes from 0 to 400. brewing_fuel brewing_stand number The fuel indicator progress. Values range between 0 to 20. enchantment_power_x enchantment number The level cost of the shown enchantment. Replace x with 1, 2 or 3 (e.g. enchantment_power_2) to target the first, second or third enchantment. enchantment_id_x enchantment number The id of the enchantment shown (replace x with the enchantment slot 1/2/3). enchantment_level_x enchantment number The enchantment level of the enchantment. enchantment_seed enchantment number The seed of the enchanting screen. This affects the text shown in the standard Galactic alphabet. banner_pattern loom number The selected banner pattern inside the loom. stonecutter_recipe stonecutter number The selected recipe in the stonecutter. \",\"signatures\":[{\"params\":[{\"name\":\"screen\"},{\"name\":\"property\"},{\"name\":\"value\"}]}]},\"sec\":{\"markdown\":\"Returns the secant of an angle in **degrees**.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/sec/\",\"plain\":\"Returns the secant of an angle in degrees.\",\"signatures\":[{\"params\":[{\"name\":\"x\"}]}]},\"sech\":{\"markdown\":\"Returns the hyperbolic secant of a number.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/sech/\",\"plain\":\"Returns the hyperbolic secant of a number.\",\"signatures\":[{\"params\":[{\"name\":\"x\"}]}]},\"see_sky\":{\"markdown\":\"Boolean function, returning true if the block can see sky.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/see_sky/\",\"plain\":\"Boolean function, returning true if the block can see sky.\",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"seed\":{\"deprecated\":\"Deprecated — use [`system_info('world_seed')`](/minecraft/auxillary/system_info/#world_seed)\",\"markdown\":\"Returns current world seed.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/seed/\",\"plain\":\"Returns current world seed.\",\"signatures\":[{\"params\":[]}]},\"set\":{\"markdown\":\"First argument for the `set` function is either a coord triple, list of three\\nnumbers, or a world localized block value. Second argument, `block`, is either\\nan existing block value, a result of `block()` function, or a string value\\nindicating the block name with optional state and block data. It is then\\nfollowed by an optional `property - value` pairs for extra block state (which\\ncan also be provided in a list or a map). Optional `block_data` include the\\nblock data to be set for the target block.\\n\\nIf `block` is specified only by name, then if a destination block is the same\\nthe `set` operation is skipped, otherwise is executed, for other potential extra\\nproperties that the original source block may have contained.\\n\\nThe returned value is either the block state that has been set, or `false` if\\nblock setting was skipped, or failed\\n\\nThrows `unknown_block` if provided block to set is not valid\\n\\n```scarpet\\nset(0,5,0,'bedrock')  => bedrock\\nset([0,5,0], 'bedrock')  => bedrock\\nset(block(0,5,0), 'bedrock')  => bedrock\\nscan(0,5,0,0,0,0,set(_,'bedrock'))  => 1\\nset(pos(player()), 'bedrock')  => bedrock\\nset(0,0,0,'bedrock')  => 0   // or 1 in overworlds generated in 1.8 and before\\nscan(0,100,0,20,20,20,set(_,'glass'))\\n    // filling the area with glass\\nscan(0,100,0,20,20,20,set(_,block('glass')))\\n    // little bit faster due to internal caching of block state selectors\\nb = block('glass'); scan(0,100,0,20,20,20,set(_,b))\\n    // yet another option, skips all parsing\\nset(x,y,z,'iron_trapdoor')  // sets bottom iron trapdoor\\n\\nset(x,y,z,'iron_trapdoor[half=top]')  // sets the top trapdoor\\nset(x,y,z,'iron_trapdoor','half','top') // also correct - top trapdoor\\nset(x,y,z,'iron_trapdoor', ['half','top']) // same\\nset(x,y,z,'iron_trapdoor', {'half' -> 'top'}) // same\\nset(x,y,z, block('iron_trapdoor[half=top]')) // also correct, block() provides extra parsing of block state\\n\\nset(x,y,z,'hopper[facing=north]{Items:[{Slot:1b,id:\\\"minecraft:slime_ball\\\",Count:16b}]}') // extra block data\\nset(x,y,z,'hopper', {'facing' -> 'north'}, nbt('{Items:[{Slot:1b,id:\\\"minecraft:slime_ball\\\",Count:16b}]}') ) // same\\n```\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/set/\",\"plain\":\"First argument for the set function is either a coord triple, list of three numbers, or a world localized block value. Second argument, block, is either an existing block value, a result of block() function, or a string value indicating the block name with optional state and block data. It is then followed by an optional property - value pairs for extra block state (which can also be provided in a list or a map). Optional block_data include the block data to be set for the target block.\\nIf block is specified only by name, then if a destination block is the same the set operation is skipped, otherwise is executed, for other potential extra properties that the original source block may have contained.\\nThe returned value is either the block state that has been set, or false if block setting was skipped, or failed\\nThrows unknown_block if provided block to set is not valid\\nset(0,5,0,'bedrock') => bedrock set([0,5,0], 'bedrock') => bedrock set(block(0,5,0), 'bedrock') => bedrock scan(0,5,0,0,0,0,set(_,'bedrock')) => 1 set(pos(player()), 'bedrock') => bedrock set(0,0,0,'bedrock') => 0 // or 1 in overworlds generated in 1.8 and before scan(0,100,0,20,20,20,set(_,'glass')) // filling the area with glass scan(0,100,0,20,20,20,set(_,block('glass'))) // little bit faster due to internal caching of block state selectors b = block('glass'); scan(0,100,0,20,20,20,set(_,b)) // yet another option, skips all parsing set(x,y,z,'iron_trapdoor') // sets bottom iron trapdoor set(x,y,z,'iron_trapdoor[half=top]') // sets the top trapdoor set(x,y,z,'iron_trapdoor','half','top') // also correct - top trapdoor set(x,y,z,'iron_trapdoor', ['half','top']) // same set(x,y,z,'iron_trapdoor', {'half' -> 'top'}) // same set(x,y,z, block('iron_trapdoor[half=top]')) // also correct, block() provides extra parsing of block state set(x,y,z,'hopper[facing=north]{Items:[{Slot:1b,id:\\\"minecraft:slime_ball\\\",Count:16b}]}') // extra block data set(x,y,z,'hopper', {'facing' -> 'north'}, nbt('{Items:[{Slot:1b,id:\\\"minecraft:slime_ball\\\",Count:16b}]}') ) // same \",\"signatures\":[{\"params\":[{\"name\":\"pos\"},{\"name\":\"block\"},{\"name\":\"properties\",\"rest\":true}]},{\"params\":[{\"name\":\"pos\"},{\"name\":\"block\"},{\"name\":\"properties\"}]},{\"params\":[{\"name\":\"pos\"},{\"name\":\"block\"},{\"name\":\"properties\"},{\"name\":\"block_data\"}]}]},\"set_biome\":{\"markdown\":\"Changes the biome at that block position. if update is specified and false, then\\nchunk will not be refreshed on the clients. Biome changes can only be sent to\\nclients with the entire data from the chunk.\\n\\nBe aware that depending on the MC version and dimension settings biome can be\\nset either in a 1x1x256 column or 4x4x4 hyperblock, so for some versions Y will\\nbe ignored and for some precision of biome setting is less than 1x1x1 block.\\n\\nThrows `unknown_biome` if the `biome_name` doesn't exist.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/set_biome/\",\"plain\":\"Changes the biome at that block position. if update is specified and false, then chunk will not be refreshed on the clients. Biome changes can only be sent to clients with the entire data from the chunk.\\nBe aware that depending on the MC version and dimension settings biome can be set either in a 1x1x256 column or 4x4x4 hyperblock, so for some versions Y will be ignored and for some precision of biome setting is less than 1x1x1 block.\\nThrows unknown_biome if the biome_name doesn’t exist.\",\"signatures\":[{\"params\":[{\"name\":\"pos\"},{\"name\":\"biome_name\"},{\"name\":\"updatetrue\"}]}]},\"set_poi\":{\"markdown\":\"Sets a Point of Interest (POI) of a specified type with optional custom\\noccupancy. By default new POIs are not occupied. If type is `null`, POI at\\nposition is removed. In any case, previous POI is also removed. Available POI\\ntypes are:\\n\\n- `'unemployed', 'armorer', 'butcher', 'cartographer', 'cleric', 'farmer', 'fisherman', 'fletcher', 'leatherworker', 'librarian', 'mason', 'nitwit', 'shepherd', 'toolsmith', 'weaponsmith', 'home', 'meeting', 'beehive', 'bee_nest', 'nether_portal'`\\n\\nInterestingly, `unemployed`, and `nitwit` are not used in the game, meaning,\\nthey could be used as permanent spatial markers for scarpet apps. `meeting` is\\nthe only one with increased max occupancy of 32.\\n\\nThrows `unknown_poi` if the provided point of interest doesn't exist\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/set_poi/\",\"plain\":\"Sets a Point of Interest (POI) of a specified type with optional custom occupancy. By default new POIs are not occupied. If type is null, POI at position is removed. In any case, previous POI is also removed. Available POI types are:\\n'unemployed', 'armorer', 'butcher', 'cartographer', 'cleric', 'farmer', 'fisherman', 'fletcher', 'leatherworker', 'librarian', 'mason', 'nitwit', 'shepherd', 'toolsmith', 'weaponsmith', 'home', 'meeting', 'beehive', 'bee_nest', 'nether_portal' Interestingly, unemployed, and nitwit are not used in the game, meaning, they could be used as permanent spatial markers for scarpet apps. meeting is the only one with increased max occupancy of 32.\\nThrows unknown_poi if the provided point of interest doesn’t exist\",\"signatures\":[{\"params\":[{\"name\":\"pos\"},{\"name\":\"type\"},{\"name\":\"occupancy\"}]}]},\"set_structure\":{\"markdown\":\"Creates or removes structure information of a structure associated with a chunk\\nof `pos`. Unlike `plop`, blocks are not placed in the world, only structure\\ninformation is set. For the game this is a fully functional structure even if\\nblocks are not set. To remove the structure a given point is in, use\\n`structure_references` to find where current structure starts.\\n\\nRequires a `Structure Variant` or `Standard Structure` name (see above). If\\nstandard name is used, the variant of the structure may depend on the biome,\\notherwise the default structure for this type will be generated.\\n\\nThrows `unknown_structure` if structure doesn't exist.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/set_structure/\",\"plain\":\"Creates or removes structure information of a structure associated with a chunk of pos. Unlike plop, blocks are not placed in the world, only structure information is set. For the game this is a fully functional structure even if blocks are not set. To remove the structure a given point is in, use structure_references to find where current structure starts.\\nRequires a Structure Variant or Standard Structure name (see above). If standard name is used, the variant of the structure may depend on the biome, otherwise the default structure for this type will be generated.\\nThrows unknown_structure if structure doesn’t exist.\",\"signatures\":[{\"params\":[{\"name\":\"pos\"},{\"name\":\"structure_name\"},{\"name\":\"set_structurepos\"},{\"name\":\"structure_name\"},{\"name\":\"null\"}]}]},\"signal_event\":{\"markdown\":\"Fires a specific event. If the event does not exist (only `handle_event` creates\\nmissing new events), or provided argument list was not matching the callee\\nexpected arguments, returns `null`, otherwise returns number of apps notified.\\nIf `target_player` is specified and not `null` triggers a player specific event,\\ntargeting only `player` scoped apps for that player. Apps with globals scope\\nwill not be notified even if they handle this event. If the `target_player` is\\nomitted or `null`, it will target `global` scoped apps and all instances of\\n`player` scoped apps. Note that all built-in player events have a player as a\\nfirst argument, so to trigger these events, you need to provide them twice -\\nonce to specify the target player scope and second - to provide as an argument\\nto the handler function.\\n\\n```scarpet\\nsignal_event('player_breaks_block', player, player, block); // to target all player scoped apps\\nsignal_event('player_breaks_block', null  , player, block); // to target all global scoped apps and all player instances\\nsignal_event('tick'); // trigger all apps with a tick event\\n```\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/signal_event/\",\"plain\":\"Fires a specific event. If the event does not exist (only handle_event creates missing new events), or provided argument list was not matching the callee expected arguments, returns null, otherwise returns number of apps notified. If target_player is specified and not null triggers a player specific event, targeting only player scoped apps for that player. Apps with globals scope will not be notified even if they handle this event. If the target_player is omitted or null, it will target global scoped apps and all instances of player scoped apps. Note that all built-in player events have a player as a first argument, so to trigger these events, you need to provide them twice - once to specify the target player scope and second - to provide as an argument to the handler function.\\nsignal_event('player_breaks_block', player, player, block); // to target all player scoped apps signal_event('player_breaks_block', null , player, block); // to target all global scoped apps and all player instances signal_event('tick'); // trigger all apps with a tick event \",\"signatures\":[{\"params\":[{\"name\":\"event\"},{\"name\":\"args\",\"rest\":true}]}]},\"simplex\":{\"markdown\":\"Returns a noise value from `0.0` to `1.0` (roughly) for 2 or 3 dimensional\\ncoordinate. The default seed it samples from is `0`, but seed can be specified\\nas a 4th argument as well. In case you need 2D noise values with custom seed,\\nuse `null` for `z` argument.\\n\\nSimplex noise is based on a triangular grid and generates smoother maps\\ncomparing to Perlin. To sample 1D simplex noise, affix other coordinate to a\\nconstant.\\n\\nThou shall not sample from noise changing seed frequently. Scarpet will keep\\ntrack of the last 256 simplex seeds used for sampling providing similar speed\\ncomparing to the default seed of `0`. In case the app engine uses more than 256\\nseeds at the same time, switching between them can get much more expensive.\",\"permalink\":\"https://scarpet.pages.dev/builtins/functions/simplex/\",\"plain\":\"Returns a noise value from 0.0 to 1.0 (roughly) for 2 or 3 dimensional coordinate. The default seed it samples from is 0, but seed can be specified as a 4th argument as well. In case you need 2D noise values with custom seed, use null for z argument.\\nSimplex noise is based on a triangular grid and generates smoother maps comparing to Perlin. To sample 1D simplex noise, affix other coordinate to a constant.\\nThou shall not sample from noise changing seed frequently. Scarpet will keep track of the last 256 simplex seeds used for sampling providing similar speed comparing to the default seed of 0. In case the app engine uses more than 256 seeds at the same time, switching between them can get much more expensive.\",\"signatures\":[{\"params\":[{\"name\":\"x\"},{\"name\":\"y\"}]},{\"params\":[{\"name\":\"x\"},{\"name\":\"y\"},{\"name\":\"z\"}]},{\"params\":[{\"name\":\"x\"},{\"name\":\"y\"},{\"name\":\"z\"},{\"name\":\"seed\"}]}]},\"sin\":{\"markdown\":\"Returns the sine of an angle in **degrees**.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/sin/\",\"plain\":\"Returns the sine of an angle in degrees.\",\"signatures\":[{\"params\":[{\"name\":\"x\"}]}]},\"sinh\":{\"markdown\":\"Returns the hyperbolic sine of a number.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/sinh/\",\"plain\":\"Returns the hyperbolic sine of a number.\",\"signatures\":[{\"params\":[{\"name\":\"x\"}]}]},\"sky_light\":{\"markdown\":\"Numeric function, returning the sky light at position (from sky access).\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/sky_light/\",\"plain\":\"Numeric function, returning the sky light at position (from sky access).\",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"sleep\":{\"markdown\":\"Puts the current thread to sleep for the specified timeout in milliseconds. If\\nthe thread is interrupted, `on_close` is invoked if present and the thread\\nexits.\\n\\n**Note**: sleeping on the main thread freezes the game until the specified\\ntimeout is reached.\\n\\nSince `on_close` is executed after app shutdown is initiated, you won't be able\\nto create new tasks in that block. Threads should periodically call `sleep` to\\nensure all app tasks will finish when the app is closing or right after, but the\\napp engine will not forcefully remove your running tasks, so the tasks\\nthemselves need to properly react to the closing request.\\n\\n```scarpet\\n// Wait for 50 milliseconds\\nsleep(50);\\n// Waits for 1 second, outputs a message when thread is shut down.\\nsleep(1000, print('Interrupted'));\\n```\",\"permalink\":\"https://scarpet.pages.dev/builtins/threading/sleep/\",\"plain\":\"Puts the current thread to sleep for the specified timeout in milliseconds. If the thread is interrupted, on_close is invoked if present and the thread exits.\\nNote: sleeping on the main thread freezes the game until the specified timeout is reached.\\nSince on_close is executed after app shutdown is initiated, you won’t be able to create new tasks in that block. Threads should periodically call sleep to ensure all app tasks will finish when the app is closing or right after, but the app engine will not forcefully remove your running tasks, so the tasks themselves need to properly react to the closing request.\\n// Wait for 50 milliseconds sleep(50); // Waits for 1 second, outputs a message when thread is shut down. sleep(1000, print('Interrupted')); \",\"signatures\":[{\"params\":[{\"name\":\"timeout\"}]},{\"params\":[{\"name\":\"timeout\"},{\"name\":\"on_close\"}]}]},\"slice\":{\"markdown\":\"Extracts a substring, or sublist (based on the type of the result of the\\nexpression under expr with starting index of `from`, and ending at `to` if\\nprovided, or the end, if omitted. Can use negative indices to indicate counting\\nform the back of the list, so `-1 <=> length(_)`.\\n\\nSpecial case is made for iterators (`range`, `rect` etc), which does require\\nnon-negative indices (negative `from` is treated as `0`, and negative `to` as\\n`inf`), but allows retrieving parts of the sequence and ignore other parts. In\\nthat case consecutive calls to `slice` will refer to index `0` the current\\niteration position since iterators cannot go back nor track where they are in\\nthe sequence (see examples).\\n\\n```scarpet\\nslice([0,1,2,3,4,5], 1, 3)  => [1, 2]\\nslice('foobar', 0, 1)  => 'f'\\nslice('foobar', 3)  => 'bar'\\nslice(range(10), 3, 5)  => [3, 4]\\nslice(range(10), 5)  => [5, 6, 7, 8, 9]\\nr = range(100); [slice(r, 5, 7), slice(r, 1, 3)]  => [[5, 6], [8, 9]]\\n```\",\"permalink\":\"https://scarpet.pages.dev/builtins/functions/slice/\",\"plain\":\"Extracts a substring, or sublist (based on the type of the result of the expression under expr with starting index of from, and ending at to if provided, or the end, if omitted. Can use negative indices to indicate counting form the back of the list, so -1 <=> length(_).\\nSpecial case is made for iterators (range, rect etc), which does require non-negative indices (negative from is treated as 0, and negative to as inf), but allows retrieving parts of the sequence and ignore other parts. In that case consecutive calls to slice will refer to index 0 the current iteration position since iterators cannot go back nor track where they are in the sequence (see examples).\\nslice([0,1,2,3,4,5], 1, 3) => [1, 2] slice('foobar', 0, 1) => 'f' slice('foobar', 3) => 'bar' slice(range(10), 3, 5) => [3, 4] slice(range(10), 5) => [5, 6, 7, 8, 9] r = range(100); [slice(r, 5, 7), slice(r, 1, 3)] => [[5, 6], [8, 9]] \",\"signatures\":[{\"params\":[{\"name\":\"expr\"},{\"name\":\"from\"},{\"name\":\"to\"}]}]},\"solid\":{\"markdown\":\"Boolean function, true if the block is solid.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/solid/\",\"plain\":\"Boolean function, true if the block is solid.\",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"sort\":{\"markdown\":\"Sorts in the default sortographical order either all arguments, or a list if its\\nthe only argument. It returns a new sorted list, not affecting the list passed\\nto the argument\\n\\n```scarpetsort(3,2,1) => [1, 2, 3]\\nsort('a',3,11,1)  => [1, 3, 11, 'a']\\nlist = [4,3,2,1]; sort(list)  => [1, 2, 3, 4]\\n```\",\"permalink\":\"https://scarpet.pages.dev/builtins/functions/sort/\",\"plain\":\"Sorts in the default sortographical order either all arguments, or a list if its the only argument. It returns a new sorted list, not affecting the list passed to the argument\\nsort('a',3,11,1) => [1, 3, 11, 'a'] list = [4,3,2,1]; sort(list) => [1, 2, 3, 4] \",\"signatures\":[{\"params\":[{\"name\":\"list\"},{\"name\":\"sortvalues\"}]}]},\"sort_key\":{\"markdown\":\"Sorts a copy of the list in the order or keys as defined by the `key_expr` for\\neach element\\n\\n```scarpet\\nsort_key([1,3,2],_)  => [1, 2, 3]\\nsort_key([1,3,2],-_)  => [3, 2, 1]\\nsort_key([range(10)],rand(1))  => [1, 0, 9, 6, 8, 2, 4, 5, 7, 3]\\nsort_key([range(20)],str(_))  => [0, 1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 2, 3, 4, 5, 6, 7, 8, 9]\\n```\",\"permalink\":\"https://scarpet.pages.dev/builtins/functions/sort_key/\",\"plain\":\"Sorts a copy of the list in the order or keys as defined by the key_expr for each element\\nsort_key([1,3,2],_) => [1, 2, 3] sort_key([1,3,2],-_) => [3, 2, 1] sort_key([range(10)],rand(1)) => [1, 0, 9, 6, 8, 2, 4, 5, 7, 3] sort_key([range(20)],str(_)) => [0, 1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 2, 3, 4, 5, 6, 7, 8, 9] \",\"signatures\":[{\"params\":[{\"name\":\"list\"},{\"name\":\"key_expr\"}]}]},\"sound\":{\"markdown\":\"Plays a specific sound `name`, at block or position `pos`, with optional\\n`volume` and modified `pitch`, and under optional `mixer`. Default values for\\n`volume`, `pitch` and `mixer` are `1.0`, `1.0`, and `master`. Valid mixer\\noptions are `master`, `music`, `record`, `weather`, `block`,\\n`hostile`,`neutral`, `player`, `ambient` and `voice`. `pos` can be either a\\nblock, triple of coords, or a list of three numbers. Uses the same options as a\\ncorresponding `playsound` command.\\n\\nUsed with no arguments, returns a list of available sound names. Note that this\\nlist may not include all sounds that clients will actually be able to receive\\n(they may have more available via resourcepacks for example).\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/sound/\",\"plain\":\"Plays a specific sound name, at block or position pos, with optional volume and modified pitch, and under optional mixer. Default values for volume, pitch and mixer are 1.0, 1.0, and master. Valid mixer options are master, music, record, weather, block, hostile,neutral, player, ambient and voice. pos can be either a block, triple of coords, or a list of three numbers. Uses the same options as a corresponding playsound command.\\nUsed with no arguments, returns a list of available sound names. Note that this list may not include all sounds that clients will actually be able to receive (they may have more available via resourcepacks for example).\",\"signatures\":[{\"params\":[]},{\"params\":[{\"name\":\"name\"},{\"name\":\"pos\"}]},{\"params\":[{\"name\":\"name\"},{\"name\":\"pos\"},{\"name\":\"volume\"}]},{\"params\":[{\"name\":\"name\"},{\"name\":\"pos\"},{\"name\":\"volume\"},{\"name\":\"pitch\"}]},{\"params\":[{\"name\":\"name\"},{\"name\":\"pos\"},{\"name\":\"volume\"},{\"name\":\"pitch\"},{\"name\":\"mixer\"}]}]},\"spawn\":{\"markdown\":\"Spawns and places an entity in world, like `/summon` vanilla command. Requires a\\nposition to spawn, and optional extra nbt data to merge with the entity. What\\nmakes it different from calling `run('summon ...')`, is the fact that you get\\nthe entity back as a return value, which is swell.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/entity/spawn/\",\"plain\":\"Spawns and places an entity in world, like /summon vanilla command. Requires a position to spawn, and optional extra nbt data to merge with the entity. What makes it different from calling run('summon ...'), is the fact that you get the entity back as a return value, which is swell.\",\"signatures\":[{\"params\":[{\"name\":\"name\"},{\"name\":\"pos\"},{\"name\":\"nbt\"}]}]},\"spawn_potential\":{\"markdown\":\"Returns spawn potential at a location (1.16+ only)\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/spawn_potential/\",\"plain\":\"Returns spawn potential at a location (1.16+ only)\",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"split\":{\"markdown\":\"Splits a string under `expr` by `separator` which can be a regular expression.\\nIf no separator is specified, it splits by characters.\\n\\nIf `expr` is a list, it will split the list into multiple sublists by the\\nelement (s) which equal `separator`, or which equal the empty string in case no\\nseparator is specified.\\n\\nSplitting a `null` value will return an empty list.\\n\\n```scarpet\\nsplit('foo'); // ['f', 'o', 'o']\\nsplit('', 'foo'); // ['f', 'o', 'o']\\nsplit('.', 'foo.bar'); // []\\nsplit('\\\\\\\\.', 'foo.bar'); // ['foo', 'bar']\\nsplit(1, [2, 5, 1, 2, 3, 1, 5, 6]); // [[2, 5], [2, 3], [5, 6]]\\nsplit(1, [1, 2, 3, 1, 4, 5, 1]; // [[], [2, 3], [4, 5], []]\\nsplit(null); // []\\n```\",\"permalink\":\"https://scarpet.pages.dev/builtins/string/split/\",\"plain\":\"Splits a string under expr by separator which can be a regular expression. If no separator is specified, it splits by characters.\\nIf expr is a list, it will split the list into multiple sublists by the element (s) which equal separator, or which equal the empty string in case no separator is specified.\\nSplitting a null value will return an empty list.\\nsplit('foo'); // ['f', 'o', 'o'] split('', 'foo'); // ['f', 'o', 'o'] split('.', 'foo.bar'); // [] split('\\\\\\\\.', 'foo.bar'); // ['foo', 'bar'] split(1, [2, 5, 1, 2, 3, 1, 5, 6]); // [[2, 5], [2, 3], [5, 6]] split(1, [1, 2, 3, 1, 4, 5, 1]; // [[], [2, 3], [4, 5], []] split(null); // [] \",\"signatures\":[{\"params\":[{\"name\":\"string\"}]},{\"params\":[{\"name\":\"separator\"},{\"name\":\"string\"}]}]},\"sqrt\":{\"markdown\":\"Returns the square root of a number.\\n\\nSquare root (not 'a squirt') of a number. For other fancy roots, use `^`, math\\nand yo noggin. Imagine square roots on a tree...\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/sqrt/\",\"plain\":\"Returns the square root of a number.\\nSquare root (not ‘a squirt’) of a number. For other fancy roots, use ^, math and yo noggin. Imagine square roots on a tree…\",\"signatures\":[{\"params\":[{\"name\":\"n\"}]}]},\"stack_limit\":{\"markdown\":\"Returns number indicating what is the stack limit for the item. Its typically 1\\n(non-stackable), 16 (like buckets), or 64 - rest. It is recommended to consult\\nthis, as other inventory API functions ignore normal stack limits, and it is up\\nto the programmer to keep it at bay. As of 1.13, game checks for negative\\nnumbers and setting an item to negative is the same as empty.\\n\\nThrows `unknown_item` if item doesn't exist.\\n\\n```scarpet\\nstack_limit('wooden_axe') => 1\\nstack_limit('ender_pearl') => 16\\nstack_limit('stone') => 64\\n```\",\"permalink\":\"https://scarpet.pages.dev/minecraft/inventory/stack_limit/\",\"plain\":\"Returns number indicating what is the stack limit for the item. Its typically 1 (non-stackable), 16 (like buckets), or 64 - rest. It is recommended to consult this, as other inventory API functions ignore normal stack limits, and it is up to the programmer to keep it at bay. As of 1.13, game checks for negative numbers and setting an item to negative is the same as empty.\\nThrows unknown_item if item doesn’t exist.\\nstack_limit('wooden_axe') => 1 stack_limit('ender_pearl') => 16 stack_limit('stone') => 64 \",\"signatures\":[{\"params\":[{\"name\":\"item\"}]}]},\"statistic\":{\"markdown\":\"Queries in-game statistics for certain values. Categories include:\\n\\n- `mined`: blocks mined\\n- `crafted`: items crafted\\n- `used`: items used\\n- `broken`: items broken\\n- `picked_up`: items picked up\\n- `dropped`: items dropped\\n- `killed`: mobs killed\\n- `killed_by`: mobs killed by\\n- `custom`: various random stats\\n\\nFor the options of `entry`, consult your statistics page, or give it a guess.\\n\\nThe call will return `null` if the statistics options are incorrect, or player\\ndoesn't have them in their history. If the player encountered the statistic, or\\ngame created for him empty one, it will return a number. Scarpet will not affect\\nthe entries of the statistics, even if it is just creating empty ones. With\\n`null` response it could either mean your input is wrong, or statistic\\neffectively has a value of `0`.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/statistic/\",\"plain\":\"Queries in-game statistics for certain values. Categories include:\\nmined: blocks mined crafted: items crafted used: items used broken: items broken picked_up: items picked up dropped: items dropped killed: mobs killed killed_by: mobs killed by custom: various random stats For the options of entry, consult your statistics page, or give it a guess.\\nThe call will return null if the statistics options are incorrect, or player doesn’t have them in their history. If the player encountered the statistic, or game created for him empty one, it will return a number. Scarpet will not affect the entries of the statistics, even if it is just creating empty ones. With null response it could either mean your input is wrong, or statistic effectively has a value of 0.\",\"signatures\":[{\"params\":[{\"name\":\"player\"},{\"name\":\"category\"},{\"name\":\"entry\"}]}]},\"store_app_data\":{\"markdown\":\"Note: `store_app_data(tag, file)` and `store_app_data(tag, file, shared?)`\\nusages deprecated. Use `write_file` instead.\\n\\nStores the app data associated with the app from the world `/scripts` folder.\\nWith the `file` parameter saves immediately and with every call to a specific\\nfile defined by the `file`, either in app space, or in the scripts shared space\\nif `shared` is true. Without `file` parameter, it may take up to 10 seconds for\\nthe output file to sync preventing flickering in case this tag changes\\nfrequently. It will be synced when server closes.\\n\\nReturns `true` if the file was saved successfully, `false` otherwise.\\n\\nUses the same file structure for exclusive app data, and shared data folder as\\n`load_app_data`.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/store_app_data/\",\"plain\":\"Note: store_app_data(tag, file) and store_app_data(tag, file, shared?) usages deprecated. Use write_file instead.\\nStores the app data associated with the app from the world /scripts folder. With the file parameter saves immediately and with every call to a specific file defined by the file, either in app space, or in the scripts shared space if shared is true. Without file parameter, it may take up to 10 seconds for the output file to sync preventing flickering in case this tag changes frequently. It will be synced when server closes.\\nReturns true if the file was saved successfully, false otherwise.\\nUses the same file structure for exclusive app data, and shared data folder as load_app_data.\",\"signatures\":[{\"params\":[{\"name\":\"tag\"}]}]},\"str\":{\"markdown\":\"If called with one argument, returns string representation of such value.\\n\\nOtherwise, returns a formatted string representing the expression. Arguments for\\nformatting can either be provided as each consecutive parameter, or as a list\\nwhich then would be the only extra parameter. To format one list argument , you\\ncan use `str(list)`, or `str('foo %s', [list])`.\\n\\nAccepts formatting style accepted by [`String.format()`]. Supported types (with\\n`\\\"%<?>\\\"` syntax):\\n\\n- `d`, `o`, `x`: integers, octal, hex\\n- `a`, `e`, `f`, `g`: floats\\n- `b`: booleans\\n- `s`: strings\\n- `%%`: '%' character\\n\\n```scarpet\\nstr(null) => 'null'\\nstr(false) => 'false'\\nstr('') => ''\\nstr('3.14') => '3.14'\\nstr([]) => '[]'\\nstr(['']) => '[]'\\nstr('foo') => 'foo'\\nstr('3bar') => '3bar'\\nstr(2)+str(2) => '22'\\nstr('pi: %.2f',pi) => 'pi: 3.14'\\nstr('player at: %d, %d, %d',pos(player())) => 'player at: 567, -2423, 124'\\n```\\n\\n[`String.format()`]:\\n  https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/String.html#format(java.lang.String,java.lang.Object...)\",\"permalink\":\"https://scarpet.pages.dev/builtins/functions/str/\",\"plain\":\"If called with one argument, returns string representation of such value.\\nOtherwise, returns a formatted string representing the expression. Arguments for formatting can either be provided as each consecutive parameter, or as a list which then would be the only extra parameter. To format one list argument , you can use str(list), or str('foo %s', [list]).\\nAccepts formatting style accepted by String.format(). Supported types (with \\\"%<?>\\\" syntax):\\nd, o, x: integers, octal, hex a, e, f, g: floats b: booleans s: strings %%: ‘%’ character str(null) => 'null' str(false) => 'false' str('') => '' str('3.14') => '3.14' str([]) => '[]' str(['']) => '[]' str('foo') => 'foo' str('3bar') => '3bar' str(2)+str(2) => '22' str('pi: %.2f',pi) => 'pi: 3.14' str('player at: %d, %d, %d',pos(player())) => 'player at: 567, -2423, 124' \",\"signatures\":[{\"params\":[{\"name\":\"value\"}]},{\"params\":[{\"name\":\"format\"},{\"name\":\"args\",\"rest\":true}]},{\"params\":[{\"name\":\"format\"},{\"name\":\"args\"}]}]},\"structure_eligibility\":{\"markdown\":\"Checks worldgen eligibility for a structure in a given chunk. Requires a\\n`Structure Variant` name (see above), or `Standard Structure` to check\\nstructures of this type. If no structure is given, or `null`, then it will check\\nfor all structures. If bounding box of the structures is also requested, it will\\ncompute size of potential structures. This function, unlike other in the\\n`structure*` category is not using world data nor accesses chunks making it\\npreferred for scoping ungenerated terrain, but it takes some compute resources\\nto calculate the structure.\\n\\nUnlike `'structure'` this will return a tentative structure location. Random\\nfactors in world generation may prevent the actual structure from forming.\\n\\nIf structure is specified, it will return `null` if a chunk is not eligible or\\ninvalid, `true` if the structure should appear, or a map with two values:\\n`'box'` for a pair of coordinates indicating bounding box of the structure, and\\n`'pieces'` for list of elements of the structure (as a tuple), with its name,\\ndirection, and box coordinates of the piece.\\n\\nIf structure is not specified, or a `Standard Structure` was specified, like\\n`'village'`,it will return a set of structure names that are eligible, or a map\\nwith structures as keys, and same type of map values as with a single structure\\ncall. An empty set or an empty map would indicate that nothing should be\\ngenerated there.\\n\\nThrows `unknown_structure` if structure doesn't exist.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/structure_eligibility/\",\"plain\":\"Checks worldgen eligibility for a structure in a given chunk. Requires a Structure Variant name (see above), or Standard Structure to check structures of this type. If no structure is given, or null, then it will check for all structures. If bounding box of the structures is also requested, it will compute size of potential structures. This function, unlike other in the structure* category is not using world data nor accesses chunks making it preferred for scoping ungenerated terrain, but it takes some compute resources to calculate the structure.\\nUnlike 'structure' this will return a tentative structure location. Random factors in world generation may prevent the actual structure from forming.\\nIf structure is specified, it will return null if a chunk is not eligible or invalid, true if the structure should appear, or a map with two values: 'box' for a pair of coordinates indicating bounding box of the structure, and 'pieces' for list of elements of the structure (as a tuple), with its name, direction, and box coordinates of the piece.\\nIf structure is not specified, or a Standard Structure was specified, like 'village',it will return a set of structure names that are eligible, or a map with structures as keys, and same type of map values as with a single structure call. An empty set or an empty map would indicate that nothing should be generated there.\\nThrows unknown_structure if structure doesn’t exist.\",\"signatures\":[{\"params\":[{\"name\":\"pos\"},{\"name\":\"structure\"},{\"name\":\"size_needed\"}]}]},\"structure_references\":{\"markdown\":\"Returns structure information that a chunk with a given block position is part\\nof. `structure_references` function can be called with a block, or a block and a\\nstructure name. In the first case it returns a list of structure names that give\\nchunk belongs to. When called with an extra structure name, returns list of\\npositions pointing to the lowest block position in chunks that hold structure\\nstarts for these structures. You can query that chunk structures then to get its\\nbounding boxes.\\n\\nRequires a `Standard Structure` name (see above).\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/structure_references/\",\"plain\":\"Returns structure information that a chunk with a given block position is part of. structure_references function can be called with a block, or a block and a structure name. In the first case it returns a list of structure names that give chunk belongs to. When called with an extra structure name, returns list of positions pointing to the lowest block position in chunks that hold structure starts for these structures. You can query that chunk structures then to get its bounding boxes.\\nRequires a Standard Structure name (see above).\",\"signatures\":[{\"params\":[{\"name\":\"pos\"},{\"name\":\"structure_referencespos\"},{\"name\":\"structure_name\"}]}]},\"structures\":{\"markdown\":\"Returns structure information for a given block position. Note that structure\\ninformation is the same for all the blocks from the same chunk. `structures`\\nfunction can be called with a block, or a block and a structure name. In the\\nfirst case it returns a map of structures at a given position, keyed by\\nstructure name, with values indicating the bounding box of the structure - a\\npair of two 3-value coords (see examples). When called with an extra structure\\nname, returns a map with two values, `'box'` for bounding box of the structure,\\nand `'pieces'` for a list of components for that structure, with their name,\\ndirection and two sets of coordinates indicating the bounding box of the\\nstructure piece. If structure is invalid, its data will be `null`.\\n\\nRequires a `Standard Structure` name (see above).\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/structures/\",\"plain\":\"Returns structure information for a given block position. Note that structure information is the same for all the blocks from the same chunk. structures function can be called with a block, or a block and a structure name. In the first case it returns a map of structures at a given position, keyed by structure name, with values indicating the bounding box of the structure - a pair of two 3-value coords (see examples). When called with an extra structure name, returns a map with two values, 'box' for bounding box of the structure, and 'pieces' for a list of components for that structure, with their name, direction and two sets of coordinates indicating the bounding box of the structure piece. If structure is invalid, its data will be null.\\nRequires a Standard Structure name (see above).\",\"signatures\":[{\"params\":[{\"name\":\"pos\"},{\"name\":\"structurespos\"},{\"name\":\"structure_name\"}]}]},\"suffocates\":{\"markdown\":\"Boolean function, true if the block causes suffocation.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/suffocates/\",\"plain\":\"Boolean function, true if the block causes suffocation.\",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"sum\":{\"permalink\":\"https://scarpet.pages.dev/syntax/operators/sum/\",\"signatures\":[{\"params\":[{\"name\":\"args\",\"rest\":true}]}]},\"synchronize\":{\"markdown\":\"Evaluates `expression` synchronized with respect to the lock `lock`. Returns the\\nvalue of the expression.\",\"permalink\":\"https://scarpet.pages.dev/builtins/threading/synchronize/\",\"plain\":\"Evaluates expression synchronized with respect to the lock lock. Returns the value of the expression.\",\"signatures\":[{\"params\":[{\"name\":\"lock\"},{\"name\":\"expression\"}]}]},\"system_info\":{\"markdown\":\"Fetches the value of one of the following system properties. If called without\\narguments, it returns a list of available system_info options. It can be used to\\nfetch various information, mostly not changing, or only available via low level\\nsystem calls. In all circumstances, these are only provided as read-only.\\nFetches the value of one of the following system properties. If called without\\narguments, it returns a list of available system_info options. It can be used to\\nfetch various information, mostly not changing, or only available via low level\\nsystem calls. In all circumstances, these are only provided as read-only.\\n\\n#### Apps\\n\\n##### `app_name`\\n\\nCurrent app name or `null` if its a default app\\n\\n##### `app_list`\\n\\nList of all loaded apps excluding default commandline app\\n\\n##### `app_scope`\\n\\nScope of the global variables and function. Available options is `player` and\\n`global`\\n\\n##### `app_players`\\n\\nReturns a player list that have app run under them. For `global` apps, the list\\nis always empty\\n\\n#### World Properties\\n\\n##### `world_name`\\n\\nname of the world\\n\\n##### `world_seed`\\n\\na numeric seed of the world\\n\\n##### `world_dimensions`\\n\\na list of dimensions in the world\\n\\n##### `world_path`\\n\\nfull path to the world saves folder\\n\\n##### `world_folder`\\n\\nname of the direct folder in the saves that holds world files\\n\\n##### `world_carpet_rules`\\n\\nreturns all Carpet rules in a map form (`rule`->`value`). Note that the values\\nare always returned as strings, so you can't do boolean comparisons directly.\\nIncludes rules from extensions with their namespace (`namespace:rule`->`value`).\\nYou can later listen to rule changes with the\\n`on_carpet_rule_changes(rule, newValue)` event.\\n\\n##### `world_gamerules`\\n\\nreturns all gamerules in a map form (`rule`->`value`). Like carpet rules, values\\nare returned as strings, so you can use appropriate value conversions using\\n`bool()` or `number()` to convert them to other values. Gamerules are read-only\\nto discourage app programmers to mess up with the settings intentionally applied\\nby server admins. Isn't that just super annoying when a datapack messes up with\\nyour gamerule settings? It is still possible to change them though using\\n`run('gamerule ...`.\\n\\n##### `world_spawn_point`\\n\\nworld spawn point in the overworld dimension\\n\\n##### `world_time`\\n\\nReturns dimension-specific tick counter.\\n\\n##### `world_top`\\n\\nReturns current dimensions' topmost Y value where one can place blocks.\\n\\n##### `world_bottom`\\n\\nReturns current dimensions' bottommost Y value where one can place blocks.\\n\\n##### `world_center`\\n\\nReturns coordinates of the center of the world with respect of the world border\\n\\n##### `world_size`\\n\\nReturns radius of world border for current dimension.\\n\\n##### `world_max_size`\\n\\nReturns maximum possible radius of world border for current dimension.\\n\\n##### `world_min_spawning_light`\\n\\nReturns minimum light level at which mobs can spawn for current dimension,\\ntaking into account datapacks\\n\\n#### Game Related Properties\\n\\n##### `game_difficulty`\\n\\ncurrent difficulty of the game: `'peaceful'`, `'easy'`, `'normal'`, or `'hard'`\\n\\n##### `game_hardcore`\\n\\nboolean whether the game is in hardcore mode\\n\\n##### `game_storage_format`\\n\\nformat of the world save files, either `'McRegion'` or `'Anvil'`\\n\\n##### `game_default_gamemode`\\n\\ndefault gamemode for new players\\n\\n##### `game_max_players`\\n\\nmax allowed players when joining the world\\n\\n##### `game_view_distance`\\n\\nthe view distance\\n\\n##### `game_mod_name`\\n\\nthe name of the base mod. Expect `'fabric'`\\n\\n##### `game_version`\\n\\nbase version of the game\\n\\n##### `game_target`\\n\\ntarget release version\\n\\n##### `game_major_target`\\n\\nmajor release target. For 1.12.2, that would be 12\\n\\n##### `game_minor_release`\\n\\nminor release target. For 1.12.2, that would be 2\\n\\n##### `game_protocol`\\n\\nprotocol version number\\n\\n##### `game_pack_version`\\n\\ndatapack version number\\n\\n##### `game_data_version`\\n\\ndata version of the game. Returns an integer, so it can be compared.\\n\\n##### `game_stable`\\n\\nindicating if its a production release or a snapshot\\n\\n#### Server properties\\n\\n##### `server_motd`\\n\\nthe motd of the server visible when joining\\n\\n##### `server_ip`\\n\\nIP adress of the game hosted\\n\\n##### `server_whitelisted`\\n\\nboolean indicating whether the access to the server is only for whitelisted\\nplayers\\n\\n##### `server_whitelist`\\n\\nlist of players allowed to log in\\n\\n##### `server_banned_players`\\n\\nlist of banned player names\\n\\n##### `server_banned_ips`\\n\\nlist of banned IP addresses\\n\\n##### `server_dev_environment`\\n\\nboolean indicating whether this server is in a development environment.\\n\\n##### `server_mods`\\n\\nmap with all loaded mods mapped to their versions as strings\\n\\n##### `server_last_tick_times`\\n\\nReturns a 100-long array of recent tick times, in milliseconds. First item on\\nthe list is the most recent tick If called outside of the main tick (either\\nthrogh scheduled tasks, or async execution), then the first item on the list may\\nrefer to the previous tick performance. In this case the last entry (tick 100)\\nwould refer to the most current tick. For all intent and purpose,\\n`system_info('last_tick_times'):0` should be used as last tick execution time,\\nbut individual tick times may vary greatly, and these need to be taken with the\\nlittle grain of averaging.\\n\\n#### Source related properties\\n\\nThe source is what is the cause of the code running, with Carpet using it same\\nway as Minecraft commands use to run. Those are used in some API functions that\\ninteract with the game or with commands, and can be manipulated if the execution\\nis caused by an `execute` command, modified by some functions or ran in\\nnon-standard ways. This section provides useful information from these cases\\n(like running from a command block, right clicking a sign, etc)\\n\\n##### `source_entity`\\n\\nThe entity associated with the execution. This is usually a player (in which\\ncase `player()` would get the entity from this), but it may also be a different\\nentity or `null` if the execution comes from the server console or a command\\nblock.\\n\\n##### `source_position`\\n\\nThe position associated with the execution. This is usually the position of the\\nentity, but it may have been manipulated or it could come from a command block\\n(no entity then). If this call comes from the server console, it will be the\\nworld spawn.\\n\\n##### `source_dimension`\\n\\nThe dimension associated with the execution. Execution from the server console\\nprovides `overworld` as the dimension. This can be manipulated by running code\\ninside `in_dimension()`.\\n\\n##### `source_rotation`\\n\\nThe rotation associated with the execution. Usually `[0, 0]` in non-standard\\nsituations, the rotation of the entity otherwise.\\n\\n#### System properties\\n\\n##### `java_max_memory`\\n\\nMaximum allowed memory accessible by JVM\\n\\n##### `java_allocated_memory`\\n\\nCurrently allocated memory by JVM\\n\\n##### `java_used_memory`\\n\\nCurrently used memory by JVM\\n\\n##### `java_cpu_count`\\n\\nNumber of processors\\n\\n##### `java_version`\\n\\nVersion of Java\\n\\n##### `java_bits`\\n\\nNumber indicating how many bits the Java has, 32 or 64\\n\\n##### `java_system_cpu_load`\\n\\nCurrent percentage of CPU used by the system\\n\\n##### `java_process_cpu_load`\\n\\nCurrent percentage of CPU used by JVM\\n\\n#### Scarpet related properties\\n\\n##### `scarpet_version`\\n\\nReturns the version of the carpet your scarpet comes with.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/system_info/\",\"plain\":\"Fetches the value of one of the following system properties. If called without arguments, it returns a list of available system_info options. It can be used to fetch various information, mostly not changing, or only available via low level system calls. In all circumstances, these are only provided as read-only. Fetches the value of one of the following system properties. If called without arguments, it returns a list of available system_info options. It can be used to fetch various information, mostly not changing, or only available via low level system calls. In all circumstances, these are only provided as read-only.\\nApps app_name Current app name or null if its a default app\\napp_list List of all loaded apps excluding default commandline app\\napp_scope Scope of the global variables and function. Available options is player and global\\napp_players Returns a player list that have app run under them. For global apps, the list is always empty\\nWorld Properties world_name name of the world\\nworld_seed a numeric seed of the world\\nworld_dimensions a list of dimensions in the world\\nworld_path full path to the world saves folder\\nworld_folder name of the direct folder in the saves that holds world files\\nworld_carpet_rules returns all Carpet rules in a map form (rule->value). Note that the values are always returned as strings, so you can’t do boolean comparisons directly. Includes rules from extensions with their namespace (namespace:rule->value). You can later listen to rule changes with the on_carpet_rule_changes(rule, newValue) event.\\nworld_gamerules returns all gamerules in a map form (rule->value). Like carpet rules, values are returned as strings, so you can use appropriate value conversions using bool() or number() to convert them to other values. Gamerules are read-only to discourage app programmers to mess up with the settings intentionally applied by server admins. Isn’t that just super annoying when a datapack messes up with your gamerule settings? It is still possible to change them though using run('gamerule ....\\nworld_spawn_point world spawn point in the overworld dimension\\nworld_time Returns dimension-specific tick counter.\\nworld_top Returns current dimensions’ topmost Y value where one can place blocks.\\nworld_bottom Returns current dimensions’ bottommost Y value where one can place blocks.\\nworld_center Returns coordinates of the center of the world with respect of the world border\\nworld_size Returns radius of world border for current dimension.\\nworld_max_size Returns maximum possible radius of world border for current dimension.\\nworld_min_spawning_light Returns minimum light level at which mobs can spawn for current dimension, taking into account datapacks\\nGame Related Properties game_difficulty current difficulty of the game: 'peaceful', 'easy', 'normal', or 'hard'\\ngame_hardcore boolean whether the game is in hardcore mode\\ngame_storage_format format of the world save files, either 'McRegion' or 'Anvil'\\ngame_default_gamemode default gamemode for new players\\ngame_max_players max allowed players when joining the world\\ngame_view_distance the view distance\\ngame_mod_name the name of the base mod. Expect 'fabric'\\ngame_version base version of the game\\ngame_target target release version\\ngame_major_target major release target. For 1.12.2, that would be 12\\ngame_minor_release minor release target. For 1.12.2, that would be 2\\ngame_protocol protocol version number\\ngame_pack_version datapack version number\\ngame_data_version data version of the game. Returns an integer, so it can be compared.\\ngame_stable indicating if its a production release or a snapshot\\nServer properties server_motd the motd of the server visible when joining\\nserver_ip IP adress of the game hosted\\nserver_whitelisted boolean indicating whether the access to the server is only for whitelisted players\\nserver_whitelist list of players allowed to log in\\nserver_banned_players list of banned player names\\nserver_banned_ips list of banned IP addresses\\nserver_dev_environment boolean indicating whether this server is in a development environment.\\nserver_mods map with all loaded mods mapped to their versions as strings\\nserver_last_tick_times Returns a 100-long array of recent tick times, in milliseconds. First item on the list is the most recent tick If called outside of the main tick (either throgh scheduled tasks, or async execution), then the first item on the list may refer to the previous tick performance. In this case the last entry (tick 100) would refer to the most current tick. For all intent and purpose, system_info('last_tick_times'):0 should be used as last tick execution time, but individual tick times may vary greatly, and these need to be taken with the little grain of averaging.\\nSource related properties The source is what is the cause of the code running, with Carpet using it same way as Minecraft commands use to run. Those are used in some API functions that interact with the game or with commands, and can be manipulated if the execution is caused by an execute command, modified by some functions or ran in non-standard ways. This section provides useful information from these cases (like running from a command block, right clicking a sign, etc)\\nsource_entity The entity associated with the execution. This is usually a player (in which case player() would get the entity from this), but it may also be a different entity or null if the execution comes from the server console or a command block.\\nsource_position The position associated with the execution. This is usually the position of the entity, but it may have been manipulated or it could come from a command block (no entity then). If this call comes from the server console, it will be the world spawn.\\nsource_dimension The dimension associated with the execution. Execution from the server console provides overworld as the dimension. This can be manipulated by running code inside in_dimension().\\nsource_rotation The rotation associated with the execution. Usually [0, 0] in non-standard situations, the rotation of the entity otherwise.\\nSystem properties java_max_memory Maximum allowed memory accessible by JVM\\njava_allocated_memory Currently allocated memory by JVM\\njava_used_memory Currently used memory by JVM\\njava_cpu_count Number of processors\\njava_version Version of Java\\njava_bits Number indicating how many bits the Java has, 32 or 64\\njava_system_cpu_load Current percentage of CPU used by the system\\njava_process_cpu_load Current percentage of CPU used by JVM\\nScarpet related properties scarpet_version Returns the version of the carpet your scarpet comes with.\",\"signatures\":[{\"params\":[]},{\"params\":[{\"name\":\"property\"}]}]},\"system_variable_get\":{\"markdown\":\"Returns the variable from the system shared key-value storage keyed with a `key`\\nvalue, optionally if value is not present, and default expression is provided,\\nsets a new value to be associated with that key\",\"permalink\":\"https://scarpet.pages.dev/builtins/functions/system_variable_get/\",\"plain\":\"Returns the variable from the system shared key-value storage keyed with a key value, optionally if value is not present, and default expression is provided, sets a new value to be associated with that key\",\"signatures\":[{\"params\":[{\"name\":\"key\"},{\"name\":\"default_value\"}]}]},\"system_variable_set\":{\"markdown\":\"Returns the variable from the system shared key-value storage keyed with a `key`\\nvalue, and sets a new mapping for the key.\",\"permalink\":\"https://scarpet.pages.dev/builtins/functions/system_variable_set/\",\"plain\":\"Returns the variable from the system shared key-value storage keyed with a key value, and sets a new mapping for the key.\",\"signatures\":[{\"params\":[{\"name\":\"key\"},{\"name\":\"new_value\"}]}]},\"tag_matches\":{\"markdown\":\"Utility returning `true` if `baby_tag` is fully contained in `daddy_tag`.\\nAnything matches `null` baby tag, and Nothing is contained in a `null` daddy\\ntag. If `match_lists` is specified and `false`, content of nested lists is\\nignored. Default behaviour is to match them.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/tag_matches/\",\"plain\":\"Utility returning true if baby_tag is fully contained in daddy_tag. Anything matches null baby tag, and Nothing is contained in a null daddy tag. If match_lists is specified and false, content of nested lists is ignored. Default behaviour is to match them.\",\"signatures\":[{\"params\":[{\"name\":\"daddy_tag\"},{\"name\":\"baby_tag\"},{\"name\":\"match_lists\"}]}]},\"tan\":{\"markdown\":\"Returns the tangent of an angle in **degrees**.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/tan/\",\"plain\":\"Returns the tangent of an angle in degrees.\",\"signatures\":[{\"params\":[{\"name\":\"x\"}]}]},\"tanh\":{\"markdown\":\"Returns the hyperbolic tangent of a number.\",\"permalink\":\"https://scarpet.pages.dev/builtins/math/tanh/\",\"plain\":\"Returns the hyperbolic tangent of a number.\",\"signatures\":[{\"params\":[{\"name\":\"x\"}]}]},\"task\":{\"markdown\":\"Creates and runs a parallel task, returning the handle to the task object. Task\\nwill return the return value of the function when its completed, or will return\\n`null` immediately if task is still in progress, so grabbing a value of a task\\nobject is non-blocking. Function can be either function value, or function\\nlambda, or a name of an existing defined function. In case function needs\\narguments to be called with, they should be supplied after the function name, or\\nvalue. `executor` identifier in `task_thread`, places the task in a specific\\nqueue identified by this value. The default thread value is the `null` thread.\\nThere are no limits on number of parallel tasks for any executor, so using\\ndifferent queues is solely for synchronization purposes.\\n\\n```scarpet\\ntask( _() -> print('Hello Other World') )  => Runs print command on a separate thread\\nfoo(a, b) -> print(a+b); task('foo',2,2)  => Uses existing function definition to start a task\\ntask_thread('temp', 'foo',3,5);  => runs function foo with a different thread executor, identified as 'temp'\\na = 3; task_thread('temp', _(outer(a), b) -> foo(a,b), 5)\\n    => Another example of running the same thing passing arguments using closure over anonymous function as well as passing a parameter.\\n```\\n\\nIn case you want to create a task based on a function that is not defined in\\nyour module, please read the tips on \\\"Passing function references to other\\nmodules of your application\\\" section in the `call(...)` section.\",\"permalink\":\"https://scarpet.pages.dev/builtins/threading/task/\",\"plain\":\"Creates and runs a parallel task, returning the handle to the task object. Task will return the return value of the function when its completed, or will return null immediately if task is still in progress, so grabbing a value of a task object is non-blocking. Function can be either function value, or function lambda, or a name of an existing defined function. In case function needs arguments to be called with, they should be supplied after the function name, or value. executor identifier in task_thread, places the task in a specific queue identified by this value. The default thread value is the null thread. There are no limits on number of parallel tasks for any executor, so using different queues is solely for synchronization purposes.\\ntask( _() -> print('Hello Other World') ) => Runs print command on a separate thread foo(a, b) -> print(a+b); task('foo',2,2) => Uses existing function definition to start a task task_thread('temp', 'foo',3,5); => runs function foo with a different thread executor, identified as 'temp' a = 3; task_thread('temp', _(outer(a), b) -> foo(a,b), 5) => Another example of running the same thing passing arguments using closure over anonymous function as well as passing a parameter. In case you want to create a task based on a function that is not defined in your module, please read the tips on “Passing function references to other modules of your application” section in the call(...) section.\",\"signatures\":[{\"params\":[{\"name\":\"function\"},{\"name\":\"args\"}]}]},\"task_completed\":{\"markdown\":\"Returns true if task has completed, or false otherwise.\",\"permalink\":\"https://scarpet.pages.dev/builtins/threading/task_completed/\",\"plain\":\"Returns true if task has completed, or false otherwise.\",\"signatures\":[{\"params\":[{\"name\":\"task\"}]}]},\"task_count\":{\"markdown\":\"If no argument provided, returns total number of tasks being executed in\\nparallel at this moment using scarpet threading system. If the executor is\\nprovided, returns number of active tasks for that provider. Use\\n`task_count(null)` to get the task count of the default executor only.\",\"permalink\":\"https://scarpet.pages.dev/builtins/threading/task_count/\",\"plain\":\"If no argument provided, returns total number of tasks being executed in parallel at this moment using scarpet threading system. If the executor is provided, returns number of active tasks for that provider. Use task_count(null) to get the task count of the default executor only.\",\"signatures\":[{\"params\":[{\"name\":\"executor\"}]}]},\"task_dock\":{\"markdown\":\"In a not-task (running regular code on the main game thread) it is a\\npass-through command. In tasks - it docks the current thread on the main server\\nthread and executes expression as one server offline server task. This is\\nespecially helpful in case a task has several docking operations to perform,\\nsuch as setting a block, and it would be much more efficient to do them all at\\nonce rather then packing each block access in each own call.\\n\\nBe mindful, that docking the task means that the tick execution will be delayed\\nuntil the expression is evaluated. This will synchronize your task with other\\ntasks using `task_dock`, but if you should be using `synchronize` to synchronize\\ntasks without locking the main thread.\",\"permalink\":\"https://scarpet.pages.dev/builtins/threading/task_dock/\",\"plain\":\"In a not-task (running regular code on the main game thread) it is a pass-through command. In tasks - it docks the current thread on the main server thread and executes expression as one server offline server task. This is especially helpful in case a task has several docking operations to perform, such as setting a block, and it would be much more efficient to do them all at once rather then packing each block access in each own call.\\nBe mindful, that docking the task means that the tick execution will be delayed until the expression is evaluated. This will synchronize your task with other tasks using task_dock, but if you should be using synchronize to synchronize tasks without locking the main thread.\",\"signatures\":[{\"params\":[{\"name\":\"expr\"}]}]},\"task_join\":{\"markdown\":\"Waits for the task completion and returns its computed value. If the task has\\nalready finished returns it immediately. Unless taking the task value directly,\\ni.e. via `task_value`, this operation is blocking. Since Minecraft has a\\nlimitation that all world access operations have to be performed on the main\\ngame thread in the off-tick time, joining any tasks that use Minecraft API from\\nthe main thread would mean automatic lock, so joining from the main thread is\\nnot allowed. Join tasks from other threads, if you really need to, or\\ncommunicate asynchronously with the task via globals or function data /\\narguments to monitor its progress, communicate, get partial results, or signal\\ntermination.\",\"permalink\":\"https://scarpet.pages.dev/builtins/threading/task_join/\",\"plain\":\"Waits for the task completion and returns its computed value. If the task has already finished returns it immediately. Unless taking the task value directly, i.e. via task_value, this operation is blocking. Since Minecraft has a limitation that all world access operations have to be performed on the main game thread in the off-tick time, joining any tasks that use Minecraft API from the main thread would mean automatic lock, so joining from the main thread is not allowed. Join tasks from other threads, if you really need to, or communicate asynchronously with the task via globals or function data / arguments to monitor its progress, communicate, get partial results, or signal termination.\",\"signatures\":[{\"params\":[{\"name\":\"task\"}]}]},\"task_thread\":{\"permalink\":\"https://scarpet.pages.dev/builtins/threading/task_thread/\",\"signatures\":[{\"params\":[{\"name\":\"executor\"},{\"name\":\"function\"},{\"name\":\"args\",\"rest\":true}]}]},\"task_value\":{\"markdown\":\"Returns the task return value, or `null` if task hasn't finished yet. Its a\\nnon-blocking operation. Unlike `join_task`, can be called on any task at any\\npoint\",\"permalink\":\"https://scarpet.pages.dev/builtins/threading/task_value/\",\"plain\":\"Returns the task return value, or null if task hasn’t finished yet. Its a non-blocking operation. Unlike join_task, can be called on any task at any point\",\"signatures\":[{\"params\":[{\"name\":\"task\"}]}]},\"then\":{\"markdown\":\"Evaluate more than one expression sequentially.\\n\\n```scarpet\\nthen(expr_1, expr_2);\\n```\\n\\n```scarpet\\nexpr_1;\\nexpr_2;\\n```\",\"permalink\":\"https://scarpet.pages.dev/syntax/control_flow/then/\",\"plain\":\"Evaluate more than one expression sequentially.\\nthen(expr_1, expr_2); expr_1; expr_2; \",\"signatures\":[{\"params\":[{\"name\":\"expr\",\"rest\":true}]}]},\"throw\":{\"markdown\":\"Throws an exception that can be caught in a `try` block (see above). If ran\\nwithout arguments, it will throw a `user_exception` passing `null` as the value\\nto the `catch_expr`. With two arguments you can mimic any other exception type\\nthrown in scarpet. With 3 arguments, you can specify a custom exception acting\\nas a `subtype` of a provided `type`, allowing to customize `try` statements with\\ncustom exceptions.\",\"permalink\":\"https://scarpet.pages.dev/syntax/control_flow/throw/\",\"plain\":\"Throws an exception that can be caught in a try block (see above). If ran without arguments, it will throw a user_exception passing null as the value to the catch_expr. With two arguments you can mimic any other exception type thrown in scarpet. With 3 arguments, you can specify a custom exception acting as a subtype of a provided type, allowing to customize try statements with custom exceptions.\",\"signatures\":[{\"params\":[]},{\"params\":[{\"name\":\"value\"}]},{\"params\":[{\"name\":\"type\"},{\"name\":\"value\"}]},{\"params\":[{\"name\":\"subtype\"},{\"name\":\"type\"},{\"name\":\"value\"}]}]},\"tick_time\":{\"markdown\":\"Returns server tick counter. Can be used to run certain operations every n-th\\nticks, or to count in-game time.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/tick_time/\",\"plain\":\"Returns server tick counter. Can be used to run certain operations every n-th ticks, or to count in-game time.\",\"signatures\":[{\"params\":[]}]},\"ticks_randomly\":{\"markdown\":\"Boolean function, true if the block ticks randomly.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/ticks_randomly/\",\"plain\":\"Boolean function, true if the block ticks randomly.\",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"time\":{\"markdown\":\"Returns the number of milliseconds since 'some point', like Java's\\n`System.nanoTime()`, which varies from system to system and from Java to Java.\\nThis measure should NOT be used to determine the current (date)time, but to\\nmeasure durations of things. it returns a float with time in milliseconds (ms)\\nfor convenience and microsecond (μs) resolution for sanity.\\n\\n```scarpet\\nstart_time = time();\\nflip_my_world_upside_down();\\nprint(str('this took %d milliseconds',time()-start_time))\\n```\",\"permalink\":\"https://scarpet.pages.dev/builtins/functions/time/\",\"plain\":\"Returns the number of milliseconds since ‘some point’, like Java’s System.nanoTime(), which varies from system to system and from Java to Java. This measure should NOT be used to determine the current (date)time, but to measure durations of things. it returns a float with time in milliseconds (ms) for convenience and microsecond (μs) resolution for sanity.\\nstart_time = time(); flip_my_world_upside_down(); print(str('this took %d milliseconds',time()-start_time)) \",\"signatures\":[{\"params\":[]}]},\"title\":{\"markdown\":\"Returns a new string representing the value of string converted to title case.\\n\\n### Examples\\n\\n```scarpet\\nprint(title('heLlo wOrlD')); // 'Hello World'\\n```\",\"permalink\":\"https://scarpet.pages.dev/builtins/string/title/\",\"plain\":\"Returns a new string representing the value of string converted to title case.\\nExamples print(title('heLlo wOrlD')); // 'Hello World' \",\"signatures\":[{\"params\":[{\"name\":\"string\"}]}]},\"top\":{\"markdown\":\"Returns the Y value of the topmost block at given x, z coords (y value of a\\nblock is not important), according to the heightmap specified by `type`. Valid\\noptions are:\\n\\n- `light`: topmost light blocking block (1.13 only)\\n- `motion`: topmost motion blocking block\\n- `terrain`: topmost motion blocking block except leaves\\n- `ocean_floor`: topmost non-water block\\n- `surface`: topmost surface block\\n\\n```scarpet\\ntop('motion', x, y, z)  => 63\\ntop('ocean_floor', x, y, z)  => 41\\n```\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/top/\",\"plain\":\"Returns the Y value of the topmost block at given x, z coords (y value of a block is not important), according to the heightmap specified by type. Valid options are:\\nlight: topmost light blocking block (1.13 only) motion: topmost motion blocking block terrain: topmost motion blocking block except leaves ocean_floor: topmost non-water block surface: topmost surface block top('motion', x, y, z) => 63 top('ocean_floor', x, y, z) => 41 \",\"signatures\":[{\"params\":[{\"name\":\"type\"},{\"name\":\"pos\"}]}]},\"transparent\":{\"markdown\":\"Boolean function, true if the block is transparent.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/transparent/\",\"plain\":\"Boolean function, true if the block is transparent.\",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"try\":{\"markdown\":\"Evaluate an expression catching any exceptions thrown.\\n\\nThe exceptions can be thrown explicitly using `throw()` or internally by scarpet\\nwhere code is correct but detects illegal state. The 2-argument form catches\\nonly user-thrown exceptions and one argument call `try(expr)` is equivalent to\\n`try(expr, null)`, or `try(expr, 'user_exception', null)`. If multiple\\n`type-catch` pairs are defined, the execution terminates on the first applicable\\ntype for the exception thrown. Therefore, even if the caught exception matches\\nmultiple filters, only the first matching block will be executed.\\n\\nCatch expressions are evaluated with `_` set to the value associated with the\\nexception and `_trace` set to contain details about point of error (token, and\\nline and column positions), call stack and local variables at the time of\\nfailure. The `type` will catch any exception of that type and any subtype of\\nthis type.\\n\\nYou can use `try` mechanism to exit from large portion of a convoluted call\\nstack and continue program execution, although catching exceptions is typically\\nmuch more expensive comparing to not throwing them.\\n\\nThe `try` function allows you to catch some scarpet exceptions for cases\\ncovering invalid data, like invalid blocks, biomes, dimensions and other things,\\nthat may have been modified by datapacks, resourcepacks or other mods, or when\\nan error is outside of the programmers scope, such as problems when reading or\\ndecoding files.\\n\\n### Exception Types\\n\\n### `exception`\\n\\nBase type for all exceptions. `'exception'` catches all exceptions that can be\\ncaught.\\n\\n#### `value_exception`\\n\\nThese exceptions are thrown if an invalid value is passed to a built-in\\nfunction.\\n\\n- `unknown_item`\\n- `unknown_block`\\n- `unknown_biome`\\n- `unknown_sound`\\n- `unknown_particle`\\n- `unknown_poi_type`\\n- `unknown_dimension`\\n- `unknown_structure`\\n- `unknown_criterion`\\n\\n#### `io_exception`\\n\\nThis is the parent for any exception that occurs due to an error handling\\nexternal data.\\n\\n- `nbt_error` Incorrect input/output NBT file.\\n- `json_error` Incorrect input/output JSON data.\\n- `b64_error` Incorrect input/output b64 (base 64) string\\n\\n#### `user_exception`\\n\\nException thrown by default with `throw` function.\\n\\n### Examples\\n\\n```scarpet\\ninner_call() -> (\\n    aaa = 'booyah';\\n    try(\\n      for(range(10), item_tags('stick'+_*'k')),\\n      print(_trace), // not caught, only catching user_exceptions\\n    );\\n);\\n\\nouter_call() -> (\\n    try(\\n        inner_call(),\\n        'exception', // catching everything\\n        print(_trace),\\n    );\\n);\\n```\\n\\nProduces:\\n\\n```text\\n{\\n  stack: [[<app>, inner_call, 1, 14]],\\n  locals: {_a: 0, aaa: booyah, _: 1, _y: 0, _i: 1, _x: 0, _z: 0},\\n  token: [item_tags, 5, 23]\\n}\\n```\",\"permalink\":\"https://scarpet.pages.dev/syntax/control_flow/try/\",\"plain\":\"Evaluate an expression catching any exceptions thrown.\\nThe exceptions can be thrown explicitly using throw() or internally by scarpet where code is correct but detects illegal state. The 2-argument form catches only user-thrown exceptions and one argument call try(expr) is equivalent to try(expr, null), or try(expr, 'user_exception', null). If multiple type-catch pairs are defined, the execution terminates on the first applicable type for the exception thrown. Therefore, even if the caught exception matches multiple filters, only the first matching block will be executed.\\nCatch expressions are evaluated with _ set to the value associated with the exception and _trace set to contain details about point of error (token, and line and column positions), call stack and local variables at the time of failure. The type will catch any exception of that type and any subtype of this type.\\nYou can use try mechanism to exit from large portion of a convoluted call stack and continue program execution, although catching exceptions is typically much more expensive comparing to not throwing them.\\nThe try function allows you to catch some scarpet exceptions for cases covering invalid data, like invalid blocks, biomes, dimensions and other things, that may have been modified by datapacks, resourcepacks or other mods, or when an error is outside of the programmers scope, such as problems when reading or decoding files.\\nException Types exception Base type for all exceptions. 'exception' catches all exceptions that can be caught.\\nvalue_exception These exceptions are thrown if an invalid value is passed to a built-in function.\\nunknown_item unknown_block unknown_biome unknown_sound unknown_particle unknown_poi_type unknown_dimension unknown_structure unknown_criterion io_exception This is the parent for any exception that occurs due to an error handling external data.\\nnbt_error Incorrect input/output NBT file. json_error Incorrect input/output JSON data. b64_error Incorrect input/output b64 (base 64) string user_exception Exception thrown by default with throw function.\\nExamples inner_call() -> ( aaa = 'booyah'; try( for(range(10), item_tags('stick'+_*'k')), print(_trace), // not caught, only catching user_exceptions ); ); outer_call() -> ( try( inner_call(), 'exception', // catching everything print(_trace), ); ); Produces:\\n{ stack: [[<app>, inner_call, 1, 14]], locals: {_a: 0, aaa: booyah, _: 1, _y: 0, _i: 1, _x: 0, _z: 0}, token: [item_tags, 5, 23] } \",\"signatures\":[{\"params\":[{\"name\":\"expr\"}]},{\"params\":[{\"name\":\"expr\"},{\"name\":\"catch_expr\"}]},{\"params\":[{\"name\":\"expr\"},{\"name\":\"type\"},{\"name\":\"catch_expr\"},{\"rest\":true}]}]},\"type\":{\"markdown\":\"Returns the string value indicating type of the expression. Possible outcomes\\nare `null`, `number`, `string`, `list`, `map`, `iterator`, `function`, `task`,\\nas well as minecraft related concepts like `block`, `entity`, `nbt`, `text`.\",\"permalink\":\"https://scarpet.pages.dev/builtins/functions/type/\",\"plain\":\"Returns the string value indicating type of the expression. Possible outcomes are null, number, string, list, map, iterator, function, task, as well as minecraft related concepts like block, entity, nbt, text.\",\"signatures\":[{\"params\":[{\"name\":\"expr\"}]}]},\"undef\":{\"markdown\":\"Removes all bindings of a variable with a name of `expr`. Removes also all\\nfunction definitions with that name. It can affect global variable pool, and\\nlocal variable set for a particular function.\\n\\n```scarpet\\ninc(i) -> i+1; foo = 5; inc(foo) => 6\\ninc(i) -> i+1; foo = 5; undef('foo'); inc(foo) => 1\\ninc(i) -> i+1; foo = 5; undef('inc'); undef('foo'); inc(foo) => Error: Function inc is not defined yet at pos 53\\n```\",\"permalink\":\"https://scarpet.pages.dev/builtins/functions/undef/\",\"plain\":\"Removes all bindings of a variable with a name of expr. Removes also all function definitions with that name. It can affect global variable pool, and local variable set for a particular function.\\ninc(i) -> i+1; foo = 5; inc(foo) => 6 inc(i) -> i+1; foo = 5; undef('foo'); inc(foo) => 1 inc(i) -> i+1; foo = 5; undef('inc'); undef('foo'); inc(foo) => Error: Function inc is not defined yet at pos 53 \",\"signatures\":[{\"params\":[{\"name\":\"expr\"}]}]},\"unique\":{\"permalink\":\"https://scarpet.pages.dev/syntax/operators/unique/\",\"signatures\":[{\"params\":[{\"name\":\"x\"},{\"name\":\"y\"}]}]},\"unix_time\":{\"markdown\":\"Returns standard POSIX time as a number of milliseconds since the start of the\\nepoch (00:00 am and 0 seconds, 1 Jan 1970).\\n\\nUnlike the previous function, this can be used to get exact time, but it varies\\nfrom time zone to time zone.\",\"permalink\":\"https://scarpet.pages.dev/builtins/functions/unix_time/\",\"plain\":\"Returns standard POSIX time as a number of milliseconds since the start of the epoch (00:00 am and 0 seconds, 1 Jan 1970).\\nUnlike the previous function, this can be used to get exact time, but it varies from time zone to time zone.\",\"signatures\":[{\"params\":[]}]},\"update\":{\"markdown\":\"Causes a block update at position.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/update/\",\"plain\":\"Causes a block update at position.\",\"signatures\":[{\"params\":[{\"name\":\"pos\"}]}]},\"upper\":{\"markdown\":\"Returns a new string representing the value of string converted to upper case.\\n\\n### Examples\\n\\n```scarpet\\nprint(upper('abC')); // 'ABC'\\n```\",\"permalink\":\"https://scarpet.pages.dev/builtins/string/upper/\",\"plain\":\"Returns a new string representing the value of string converted to upper case.\\nExamples print(upper('abC')); // 'ABC' \",\"signatures\":[{\"params\":[{\"name\":\"string\"}]}]},\"values\":{\"permalink\":\"https://scarpet.pages.dev/builtins/functions/values/\"},\"var\":{\"markdown\":\"Returns the variable under the name of the string value of the expression.\\nAllows to manipulate variables in more programmatic manner, which allows to use\\nlocal variable set with a hash map type key-value access, can also be used with\\nglobal variables\\n\\n```scarpet\\na = 1;\\nvar('a') = 'foo';\\na == 'foo'\\n```\",\"permalink\":\"https://scarpet.pages.dev/builtins/functions/var/\",\"plain\":\"Returns the variable under the name of the string value of the expression. Allows to manipulate variables in more programmatic manner, which allows to use local variable set with a hash map type key-value access, can also be used with global variables\\na = 1; var('a') = 'foo'; a == 'foo' \",\"signatures\":[{\"params\":[{\"name\":\"expr\"}]}]},\"vars\":{\"markdown\":\"It returns all names of variables from local scope (if prefix does not start\\nwith 'global') or global variables (otherwise). Here is a larger example that\\nuses combination of `vars` and `var` functions to be used for object counting\\n\\n```scarpet\\ncount_blocks(ent) -> (\\n  [cx, cy, cz] = query(ent, 'pos');\\n  scan(cx, cy, cz, 16, 16, 16, var('count_'+_) += 1);\\n  for (sort_key(vars('count_'), -var(_)),\\n    print(str('%s: %d', slice(_, 6), var(_)))\\n  );\\n);\\ncount_blocks(player());\\n```\",\"permalink\":\"https://scarpet.pages.dev/builtins/functions/vars/\",\"plain\":\"It returns all names of variables from local scope (if prefix does not start with ‘global’) or global variables (otherwise). Here is a larger example that uses combination of vars and var functions to be used for object counting\\ncount_blocks(ent) -> ( [cx, cy, cz] = query(ent, 'pos'); scan(cx, cy, cz, 16, 16, 16, var('count_'+_) += 1); for (sort_key(vars('count_'), -var(_)), print(str('%s: %d', slice(_, 6), var(_))) ); ); count_blocks(player()); \",\"signatures\":[{\"params\":[{\"name\":\"prefix\"}]}]},\"view_distance\":{\"deprecated\":\"Deprecated — use [`system_info('game_view_distance')`](/minecraft/auxillary/system_info/#game_view_distance)\",\"markdown\":\"Returns the view distance of the server.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/view_distance/\",\"plain\":\"Returns the view distance of the server.\",\"signatures\":[{\"params\":[]}]},\"weather\":{\"markdown\":\"### Querying\\n\\nCalled with no parameters, returns a string `clear`, `rain` or `thunder` based\\non the current weather.\\n\\nCalled with a single parameter, either `clear`, `rain` or `thunder`, returns the\\nnumber of remaining ticks of that weather type.\\n\\n**Note**: it can thunder without there being a thunderstorm; it has to _thunder_\\nand _rain_ to have a thunderstorm.\\n\\n#### Examples\\n\\n```scarpet\\nif(weather() == 'thunder' && weather('rain') > 0,\\n    print('There is a thunderstorm!'));\\n```\\n\\n### Changing Weather\\n\\nCall with both `type` and `ticks` to set the weather to the given type for the\\nspecified amount of ticks.\\n\\n#### Examples\\n\\n```scarpet\\nweather('rain', 200); // set to rain for 200 ticks\\n```\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/weather/\",\"plain\":\"Querying Called with no parameters, returns a string clear, rain or thunder based on the current weather.\\nCalled with a single parameter, either clear, rain or thunder, returns the number of remaining ticks of that weather type.\\nNote: it can thunder without there being a thunderstorm; it has to thunder and rain to have a thunderstorm.\\nExamples if(weather() == 'thunder' && weather('rain') > 0, print('There is a thunderstorm!')); Changing Weather Call with both type and ticks to set the weather to the given type for the specified amount of ticks.\\nExamples weather('rain', 200); // set to rain for 200 ticks \",\"signatures\":[{\"params\":[]},{\"params\":[{\"name\":\"type\",\"suggest\":[\"clear\",\"rain\",\"thunder\"]}]},{\"params\":[{\"name\":\"type\",\"suggest\":[\"clear\",\"rain\",\"thunder\"]},{\"name\":\"ticks\"}]}]},\"while\":{\"markdown\":\"Loop while a condition holds.\\n\\n`while()` evaluates an expression repeatedly while its condition evaluates to\\n`true`. The expression receives a bound variable `_` indicating the current\\niteration number.\\n\\nReturns the result of the last iteration or `null`.\\n\\n```scarpet\\ni = 0;\\nwhile(i < 5,\\n    print(_);\\n    i += 1;\\n);\\n```\\n\\n`while()` may also be called with three arguments. Where the second argument\\nspecifies an upper limit for the number of times to loop.\\n\\n```scarpet\\ni = 0;\\nwhile(i < 7, 5, // can only loop 5 times\\n    print(_);\\n    i += 1;\\n);\\n```\",\"permalink\":\"https://scarpet.pages.dev/syntax/control_flow/while/\",\"plain\":\"Loop while a condition holds.\\nwhile() evaluates an expression repeatedly while its condition evaluates to true. The expression receives a bound variable _ indicating the current iteration number.\\nReturns the result of the last iteration or null.\\ni = 0; while(i < 5, print(_); i += 1; ); while() may also be called with three arguments. Where the second argument specifies an upper limit for the number of times to loop.\\ni = 0; while(i < 7, 5, // can only loop 5 times print(_); i += 1; ); \",\"signatures\":[{\"params\":[{\"name\":\"condition\"},{\"binds\":[\"_\"],\"name\":\"body\"}]},{\"params\":[{\"name\":\"condition\"},{\"name\":\"limit\",\"type\":\"number\"},{\"binds\":[\"_\"],\"name\":\"body\"}]}]},\"without_updates\":{\"markdown\":\"Evaluates subexpression without causing updates when blocks change in the world.\\n\\nFor synchronization sake, as well as from the fact that suppressed update can\\nonly happen within a tick, the call to the `expr` is docked on the main server\\ntask.\\n\\nConsider following scenario: We would like to generate a bunch of terrain in a\\nflat world following a perlin noise generator. The following code causes a\\ncascading effect as blocks placed on chunk borders will cause other chunks to\\nget loaded to full, thus generated:\\n\\n```scarpet\\n__config() -> {'scope' -> 'global'};\\n__on_chunk_generated(x, z) -> (\\n  scan(x,0,z,0,0,0,15,15,15,\\n    if (perlin(_x/16, _y/8, _z/16) > _y/16,\\n      set(_, 'black_stained_glass');\\n    )\\n  )\\n)\\n```\\n\\nThe following addition resolves this issue, by not allowing block updates past\\nchunk borders:\\n\\n```scarpet\\n__config() -> {'scope' -> 'global'};\\n__on_chunk_generated(x, z) -> (\\n  without_updates(\\n    scan(x,0,z,0,0,0,15,15,15,\\n      if (perlin(_x/16, _y/8, _z/16) > _y/16,\\n        set(_, 'black_stained_glass');\\n      )\\n    )\\n  )\\n)\\n```\",\"permalink\":\"https://scarpet.pages.dev/minecraft/world/without_updates/\",\"plain\":\"Evaluates subexpression without causing updates when blocks change in the world.\\nFor synchronization sake, as well as from the fact that suppressed update can only happen within a tick, the call to the expr is docked on the main server task.\\nConsider following scenario: We would like to generate a bunch of terrain in a flat world following a perlin noise generator. The following code causes a cascading effect as blocks placed on chunk borders will cause other chunks to get loaded to full, thus generated:\\n__config() -> {'scope' -> 'global'}; __on_chunk_generated(x, z) -> ( scan(x,0,z,0,0,0,15,15,15, if (perlin(_x/16, _y/8, _z/16) > _y/16, set(_, 'black_stained_glass'); ) ) ) The following addition resolves this issue, by not allowing block updates past chunk borders:\\n__config() -> {'scope' -> 'global'}; __on_chunk_generated(x, z) -> ( without_updates( scan(x,0,z,0,0,0,15,15,15, if (perlin(_x/16, _y/8, _z/16) > _y/16, set(_, 'black_stained_glass'); ) ) ) ) \",\"signatures\":[{\"params\":[{\"name\":\"expr\"}]}]},\"world_time\":{\"deprecated\":\"Deprecated — use [`system_info('world_time')`](/minecraft/auxillary/system_info/#world_time)\",\"markdown\":\"Returns dimension-specific tick counter.\",\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/world_time/\",\"plain\":\"Returns dimension-specific tick counter.\",\"signatures\":[{\"params\":[]}]},\"write_file\":{\"permalink\":\"https://scarpet.pages.dev/minecraft/auxillary/write_file/\",\"signatures\":[{\"params\":[{\"name\":\"resource\"},{\"name\":\"type\"},{\"name\":\"data\"}]}]}}}");
export default data;
